// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/master/allocator.proto

#ifndef PROTOBUF_mesos_2fmaster_2fallocator_2eproto__INCLUDED
#define PROTOBUF_mesos_2fmaster_2fallocator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace master {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mesos_2fmaster_2fallocator_2eproto();
void protobuf_AssignDesc_mesos_2fmaster_2fallocator_2eproto();
void protobuf_ShutdownFile_mesos_2fmaster_2fallocator_2eproto();

class RoleInfo;
class InverseOfferStatus;

enum InverseOfferStatus_Status {
  InverseOfferStatus_Status_UNKNOWN = 1,
  InverseOfferStatus_Status_ACCEPT = 2,
  InverseOfferStatus_Status_DECLINE = 3
};
bool InverseOfferStatus_Status_IsValid(int value);
const InverseOfferStatus_Status InverseOfferStatus_Status_Status_MIN = InverseOfferStatus_Status_UNKNOWN;
const InverseOfferStatus_Status InverseOfferStatus_Status_Status_MAX = InverseOfferStatus_Status_DECLINE;
const int InverseOfferStatus_Status_Status_ARRAYSIZE = InverseOfferStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* InverseOfferStatus_Status_descriptor();
inline const ::std::string& InverseOfferStatus_Status_Name(InverseOfferStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    InverseOfferStatus_Status_descriptor(), value);
}
inline bool InverseOfferStatus_Status_Parse(
    const ::std::string& name, InverseOfferStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InverseOfferStatus_Status>(
    InverseOfferStatus_Status_descriptor(), name, value);
}
// ===================================================================

class RoleInfo : public ::google::protobuf::Message {
 public:
  RoleInfo();
  virtual ~RoleInfo();

  RoleInfo(const RoleInfo& from);

  inline RoleInfo& operator=(const RoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleInfo& default_instance();

  void Swap(RoleInfo* other);

  // implements Message ----------------------------------------------

  RoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleInfo& from);
  void MergeFrom(const RoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double weight = 2 [default = 1];
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline double weight() const;
  inline void set_weight(double value);

  // @@protoc_insertion_point(class_scope:mesos.master.RoleInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_weight();
  inline void clear_has_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double weight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fmaster_2fallocator_2eproto();
  friend void protobuf_AssignDesc_mesos_2fmaster_2fallocator_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fmaster_2fallocator_2eproto();

  void InitAsDefaultInstance();
  static RoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class InverseOfferStatus : public ::google::protobuf::Message {
 public:
  InverseOfferStatus();
  virtual ~InverseOfferStatus();

  InverseOfferStatus(const InverseOfferStatus& from);

  inline InverseOfferStatus& operator=(const InverseOfferStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InverseOfferStatus& default_instance();

  void Swap(InverseOfferStatus* other);

  // implements Message ----------------------------------------------

  InverseOfferStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InverseOfferStatus& from);
  void MergeFrom(const InverseOfferStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InverseOfferStatus_Status Status;
  static const Status UNKNOWN = InverseOfferStatus_Status_UNKNOWN;
  static const Status ACCEPT = InverseOfferStatus_Status_ACCEPT;
  static const Status DECLINE = InverseOfferStatus_Status_DECLINE;
  static inline bool Status_IsValid(int value) {
    return InverseOfferStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    InverseOfferStatus_Status_Status_MIN;
  static const Status Status_MAX =
    InverseOfferStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    InverseOfferStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return InverseOfferStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return InverseOfferStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return InverseOfferStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.master.InverseOfferStatus.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::mesos::master::InverseOfferStatus_Status status() const;
  inline void set_status(::mesos::master::InverseOfferStatus_Status value);

  // required .mesos.FrameworkID framework_id = 2;
  inline bool has_framework_id() const;
  inline void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 2;
  inline const ::mesos::FrameworkID& framework_id() const;
  inline ::mesos::FrameworkID* mutable_framework_id();
  inline ::mesos::FrameworkID* release_framework_id();
  inline void set_allocated_framework_id(::mesos::FrameworkID* framework_id);

  // required .mesos.TimeInfo timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::mesos::TimeInfo& timestamp() const;
  inline ::mesos::TimeInfo* mutable_timestamp();
  inline ::mesos::TimeInfo* release_timestamp();
  inline void set_allocated_timestamp(::mesos::TimeInfo* timestamp);

  // @@protoc_insertion_point(class_scope:mesos.master.InverseOfferStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_framework_id();
  inline void clear_has_framework_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::FrameworkID* framework_id_;
  ::mesos::TimeInfo* timestamp_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fmaster_2fallocator_2eproto();
  friend void protobuf_AssignDesc_mesos_2fmaster_2fallocator_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fmaster_2fallocator_2eproto();

  void InitAsDefaultInstance();
  static InverseOfferStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleInfo

// required string name = 1;
inline bool RoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleInfo::name() const {
  return *name_;
}
inline void RoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double weight = 2 [default = 1];
inline bool RoleInfo::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleInfo::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleInfo::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleInfo::clear_weight() {
  weight_ = 1;
  clear_has_weight();
}
inline double RoleInfo::weight() const {
  return weight_;
}
inline void RoleInfo::set_weight(double value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// InverseOfferStatus

// required .mesos.master.InverseOfferStatus.Status status = 1;
inline bool InverseOfferStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InverseOfferStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InverseOfferStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InverseOfferStatus::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::mesos::master::InverseOfferStatus_Status InverseOfferStatus::status() const {
  return static_cast< ::mesos::master::InverseOfferStatus_Status >(status_);
}
inline void InverseOfferStatus::set_status(::mesos::master::InverseOfferStatus_Status value) {
  assert(::mesos::master::InverseOfferStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// required .mesos.FrameworkID framework_id = 2;
inline bool InverseOfferStatus::has_framework_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InverseOfferStatus::set_has_framework_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InverseOfferStatus::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InverseOfferStatus::clear_framework_id() {
  if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
  clear_has_framework_id();
}
inline const ::mesos::FrameworkID& InverseOfferStatus::framework_id() const {
  return framework_id_ != NULL ? *framework_id_ : *default_instance_->framework_id_;
}
inline ::mesos::FrameworkID* InverseOfferStatus::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) framework_id_ = new ::mesos::FrameworkID;
  return framework_id_;
}
inline ::mesos::FrameworkID* InverseOfferStatus::release_framework_id() {
  clear_has_framework_id();
  ::mesos::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline void InverseOfferStatus::set_allocated_framework_id(::mesos::FrameworkID* framework_id) {
  delete framework_id_;
  framework_id_ = framework_id;
  if (framework_id) {
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
}

// required .mesos.TimeInfo timestamp = 3;
inline bool InverseOfferStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InverseOfferStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InverseOfferStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InverseOfferStatus::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::mesos::TimeInfo::Clear();
  clear_has_timestamp();
}
inline const ::mesos::TimeInfo& InverseOfferStatus::timestamp() const {
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
inline ::mesos::TimeInfo* InverseOfferStatus::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) timestamp_ = new ::mesos::TimeInfo;
  return timestamp_;
}
inline ::mesos::TimeInfo* InverseOfferStatus::release_timestamp() {
  clear_has_timestamp();
  ::mesos::TimeInfo* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline void InverseOfferStatus::set_allocated_timestamp(::mesos::TimeInfo* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace master
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::master::InverseOfferStatus_Status>() {
  return ::mesos::master::InverseOfferStatus_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fmaster_2fallocator_2eproto__INCLUDED
