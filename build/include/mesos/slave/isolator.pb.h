// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/slave/isolator.proto

#ifndef PROTOBUF_mesos_2fslave_2fisolator_2eproto__INCLUDED
#define PROTOBUF_mesos_2fslave_2fisolator_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace slave {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
void protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto();
void protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto();

class ContainerLimitation;
class ContainerState;
class ContainerPrepareInfo;

// ===================================================================

class ContainerLimitation : public ::google::protobuf::Message {
 public:
  ContainerLimitation();
  virtual ~ContainerLimitation();

  ContainerLimitation(const ContainerLimitation& from);

  inline ContainerLimitation& operator=(const ContainerLimitation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerLimitation& default_instance();

  void Swap(ContainerLimitation* other);

  // implements Message ----------------------------------------------

  ContainerLimitation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerLimitation& from);
  void MergeFrom(const ContainerLimitation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Resource resources = 1;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 1;
  inline const ::mesos::Resource& resources(int index) const;
  inline ::mesos::Resource* mutable_resources(int index);
  inline ::mesos::Resource* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();

  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // optional .mesos.TaskStatus.Reason reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::mesos::TaskStatus_Reason reason() const;
  inline void set_reason(::mesos::TaskStatus_Reason value);

  // @@protoc_insertion_point(class_scope:mesos.slave.ContainerLimitation)
 private:
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;
  ::std::string* message_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto();

  void InitAsDefaultInstance();
  static ContainerLimitation* default_instance_;
};
// -------------------------------------------------------------------

class ContainerState : public ::google::protobuf::Message {
 public:
  ContainerState();
  virtual ~ContainerState();

  ContainerState(const ContainerState& from);

  inline ContainerState& operator=(const ContainerState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerState& default_instance();

  void Swap(ContainerState* other);

  // implements Message ----------------------------------------------

  ContainerState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerState& from);
  void MergeFrom(const ContainerState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ExecutorInfo executor_info = 1;
  inline bool has_executor_info() const;
  inline void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 1;
  inline const ::mesos::ExecutorInfo& executor_info() const;
  inline ::mesos::ExecutorInfo* mutable_executor_info();
  inline ::mesos::ExecutorInfo* release_executor_info();
  inline void set_allocated_executor_info(::mesos::ExecutorInfo* executor_info);

  // required .mesos.ContainerID container_id = 2;
  inline bool has_container_id() const;
  inline void clear_container_id();
  static const int kContainerIdFieldNumber = 2;
  inline const ::mesos::ContainerID& container_id() const;
  inline ::mesos::ContainerID* mutable_container_id();
  inline ::mesos::ContainerID* release_container_id();
  inline void set_allocated_container_id(::mesos::ContainerID* container_id);

  // required uint64 pid = 3;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 3;
  inline ::google::protobuf::uint64 pid() const;
  inline void set_pid(::google::protobuf::uint64 value);

  // required string directory = 4;
  inline bool has_directory() const;
  inline void clear_directory();
  static const int kDirectoryFieldNumber = 4;
  inline const ::std::string& directory() const;
  inline void set_directory(const ::std::string& value);
  inline void set_directory(const char* value);
  inline void set_directory(const char* value, size_t size);
  inline ::std::string* mutable_directory();
  inline ::std::string* release_directory();
  inline void set_allocated_directory(::std::string* directory);

  // @@protoc_insertion_point(class_scope:mesos.slave.ContainerState)
 private:
  inline void set_has_executor_info();
  inline void clear_has_executor_info();
  inline void set_has_container_id();
  inline void clear_has_container_id();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_directory();
  inline void clear_has_directory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::ExecutorInfo* executor_info_;
  ::mesos::ContainerID* container_id_;
  ::google::protobuf::uint64 pid_;
  ::std::string* directory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto();

  void InitAsDefaultInstance();
  static ContainerState* default_instance_;
};
// -------------------------------------------------------------------

class ContainerPrepareInfo : public ::google::protobuf::Message {
 public:
  ContainerPrepareInfo();
  virtual ~ContainerPrepareInfo();

  ContainerPrepareInfo(const ContainerPrepareInfo& from);

  inline ContainerPrepareInfo& operator=(const ContainerPrepareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerPrepareInfo& default_instance();

  void Swap(ContainerPrepareInfo* other);

  // implements Message ----------------------------------------------

  ContainerPrepareInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerPrepareInfo& from);
  void MergeFrom(const ContainerPrepareInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.CommandInfo commands = 1;
  inline int commands_size() const;
  inline void clear_commands();
  static const int kCommandsFieldNumber = 1;
  inline const ::mesos::CommandInfo& commands(int index) const;
  inline ::mesos::CommandInfo* mutable_commands(int index);
  inline ::mesos::CommandInfo* add_commands();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::CommandInfo >&
      commands() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::CommandInfo >*
      mutable_commands();

  // optional .mesos.Environment environment = 2;
  inline bool has_environment() const;
  inline void clear_environment();
  static const int kEnvironmentFieldNumber = 2;
  inline const ::mesos::Environment& environment() const;
  inline ::mesos::Environment* mutable_environment();
  inline ::mesos::Environment* release_environment();
  inline void set_allocated_environment(::mesos::Environment* environment);

  // optional string rootfs = 3;
  inline bool has_rootfs() const;
  inline void clear_rootfs();
  static const int kRootfsFieldNumber = 3;
  inline const ::std::string& rootfs() const;
  inline void set_rootfs(const ::std::string& value);
  inline void set_rootfs(const char* value);
  inline void set_rootfs(const char* value, size_t size);
  inline ::std::string* mutable_rootfs();
  inline ::std::string* release_rootfs();
  inline void set_allocated_rootfs(::std::string* rootfs);

  // optional uint32 namespaces = 4 [default = 0];
  inline bool has_namespaces() const;
  inline void clear_namespaces();
  static const int kNamespacesFieldNumber = 4;
  inline ::google::protobuf::uint32 namespaces() const;
  inline void set_namespaces(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mesos.slave.ContainerPrepareInfo)
 private:
  inline void set_has_environment();
  inline void clear_has_environment();
  inline void set_has_rootfs();
  inline void clear_has_rootfs();
  inline void set_has_namespaces();
  inline void clear_has_namespaces();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::CommandInfo > commands_;
  ::mesos::Environment* environment_;
  ::std::string* rootfs_;
  ::google::protobuf::uint32 namespaces_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto();

  void InitAsDefaultInstance();
  static ContainerPrepareInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ContainerLimitation

// repeated .mesos.Resource resources = 1;
inline int ContainerLimitation::resources_size() const {
  return resources_.size();
}
inline void ContainerLimitation::clear_resources() {
  resources_.Clear();
}
inline const ::mesos::Resource& ContainerLimitation::resources(int index) const {
  return resources_.Get(index);
}
inline ::mesos::Resource* ContainerLimitation::mutable_resources(int index) {
  return resources_.Mutable(index);
}
inline ::mesos::Resource* ContainerLimitation::add_resources() {
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
ContainerLimitation::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
ContainerLimitation::mutable_resources() {
  return &resources_;
}

// optional string message = 2;
inline bool ContainerLimitation::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerLimitation::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerLimitation::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerLimitation::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ContainerLimitation::message() const {
  return *message_;
}
inline void ContainerLimitation::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ContainerLimitation::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void ContainerLimitation::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerLimitation::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* ContainerLimitation::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContainerLimitation::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .mesos.TaskStatus.Reason reason = 3;
inline bool ContainerLimitation::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerLimitation::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerLimitation::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerLimitation::clear_reason() {
  reason_ = 0;
  clear_has_reason();
}
inline ::mesos::TaskStatus_Reason ContainerLimitation::reason() const {
  return static_cast< ::mesos::TaskStatus_Reason >(reason_);
}
inline void ContainerLimitation::set_reason(::mesos::TaskStatus_Reason value) {
  assert(::mesos::TaskStatus_Reason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// ContainerState

// required .mesos.ExecutorInfo executor_info = 1;
inline bool ContainerState::has_executor_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerState::set_has_executor_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerState::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerState::clear_executor_info() {
  if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
  clear_has_executor_info();
}
inline const ::mesos::ExecutorInfo& ContainerState::executor_info() const {
  return executor_info_ != NULL ? *executor_info_ : *default_instance_->executor_info_;
}
inline ::mesos::ExecutorInfo* ContainerState::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) executor_info_ = new ::mesos::ExecutorInfo;
  return executor_info_;
}
inline ::mesos::ExecutorInfo* ContainerState::release_executor_info() {
  clear_has_executor_info();
  ::mesos::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline void ContainerState::set_allocated_executor_info(::mesos::ExecutorInfo* executor_info) {
  delete executor_info_;
  executor_info_ = executor_info;
  if (executor_info) {
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
}

// required .mesos.ContainerID container_id = 2;
inline bool ContainerState::has_container_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerState::set_has_container_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerState::clear_has_container_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerState::clear_container_id() {
  if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
  clear_has_container_id();
}
inline const ::mesos::ContainerID& ContainerState::container_id() const {
  return container_id_ != NULL ? *container_id_ : *default_instance_->container_id_;
}
inline ::mesos::ContainerID* ContainerState::mutable_container_id() {
  set_has_container_id();
  if (container_id_ == NULL) container_id_ = new ::mesos::ContainerID;
  return container_id_;
}
inline ::mesos::ContainerID* ContainerState::release_container_id() {
  clear_has_container_id();
  ::mesos::ContainerID* temp = container_id_;
  container_id_ = NULL;
  return temp;
}
inline void ContainerState::set_allocated_container_id(::mesos::ContainerID* container_id) {
  delete container_id_;
  container_id_ = container_id;
  if (container_id) {
    set_has_container_id();
  } else {
    clear_has_container_id();
  }
}

// required uint64 pid = 3;
inline bool ContainerState::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerState::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerState::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerState::clear_pid() {
  pid_ = GOOGLE_ULONGLONG(0);
  clear_has_pid();
}
inline ::google::protobuf::uint64 ContainerState::pid() const {
  return pid_;
}
inline void ContainerState::set_pid(::google::protobuf::uint64 value) {
  set_has_pid();
  pid_ = value;
}

// required string directory = 4;
inline bool ContainerState::has_directory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerState::set_has_directory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerState::clear_has_directory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerState::clear_directory() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    directory_->clear();
  }
  clear_has_directory();
}
inline const ::std::string& ContainerState::directory() const {
  return *directory_;
}
inline void ContainerState::set_directory(const ::std::string& value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void ContainerState::set_directory(const char* value) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(value);
}
inline void ContainerState::set_directory(const char* value, size_t size) {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerState::mutable_directory() {
  set_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    directory_ = new ::std::string;
  }
  return directory_;
}
inline ::std::string* ContainerState::release_directory() {
  clear_has_directory();
  if (directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directory_;
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContainerState::set_allocated_directory(::std::string* directory) {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (directory) {
    set_has_directory();
    directory_ = directory;
  } else {
    clear_has_directory();
    directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ContainerPrepareInfo

// repeated .mesos.CommandInfo commands = 1;
inline int ContainerPrepareInfo::commands_size() const {
  return commands_.size();
}
inline void ContainerPrepareInfo::clear_commands() {
  commands_.Clear();
}
inline const ::mesos::CommandInfo& ContainerPrepareInfo::commands(int index) const {
  return commands_.Get(index);
}
inline ::mesos::CommandInfo* ContainerPrepareInfo::mutable_commands(int index) {
  return commands_.Mutable(index);
}
inline ::mesos::CommandInfo* ContainerPrepareInfo::add_commands() {
  return commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::CommandInfo >&
ContainerPrepareInfo::commands() const {
  return commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::CommandInfo >*
ContainerPrepareInfo::mutable_commands() {
  return &commands_;
}

// optional .mesos.Environment environment = 2;
inline bool ContainerPrepareInfo::has_environment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerPrepareInfo::set_has_environment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerPrepareInfo::clear_has_environment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerPrepareInfo::clear_environment() {
  if (environment_ != NULL) environment_->::mesos::Environment::Clear();
  clear_has_environment();
}
inline const ::mesos::Environment& ContainerPrepareInfo::environment() const {
  return environment_ != NULL ? *environment_ : *default_instance_->environment_;
}
inline ::mesos::Environment* ContainerPrepareInfo::mutable_environment() {
  set_has_environment();
  if (environment_ == NULL) environment_ = new ::mesos::Environment;
  return environment_;
}
inline ::mesos::Environment* ContainerPrepareInfo::release_environment() {
  clear_has_environment();
  ::mesos::Environment* temp = environment_;
  environment_ = NULL;
  return temp;
}
inline void ContainerPrepareInfo::set_allocated_environment(::mesos::Environment* environment) {
  delete environment_;
  environment_ = environment;
  if (environment) {
    set_has_environment();
  } else {
    clear_has_environment();
  }
}

// optional string rootfs = 3;
inline bool ContainerPrepareInfo::has_rootfs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerPrepareInfo::set_has_rootfs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerPrepareInfo::clear_has_rootfs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerPrepareInfo::clear_rootfs() {
  if (rootfs_ != &::google::protobuf::internal::kEmptyString) {
    rootfs_->clear();
  }
  clear_has_rootfs();
}
inline const ::std::string& ContainerPrepareInfo::rootfs() const {
  return *rootfs_;
}
inline void ContainerPrepareInfo::set_rootfs(const ::std::string& value) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::kEmptyString) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(value);
}
inline void ContainerPrepareInfo::set_rootfs(const char* value) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::kEmptyString) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(value);
}
inline void ContainerPrepareInfo::set_rootfs(const char* value, size_t size) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::kEmptyString) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContainerPrepareInfo::mutable_rootfs() {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::kEmptyString) {
    rootfs_ = new ::std::string;
  }
  return rootfs_;
}
inline ::std::string* ContainerPrepareInfo::release_rootfs() {
  clear_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rootfs_;
    rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ContainerPrepareInfo::set_allocated_rootfs(::std::string* rootfs) {
  if (rootfs_ != &::google::protobuf::internal::kEmptyString) {
    delete rootfs_;
  }
  if (rootfs) {
    set_has_rootfs();
    rootfs_ = rootfs;
  } else {
    clear_has_rootfs();
    rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 namespaces = 4 [default = 0];
inline bool ContainerPrepareInfo::has_namespaces() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerPrepareInfo::set_has_namespaces() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerPrepareInfo::clear_has_namespaces() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerPrepareInfo::clear_namespaces() {
  namespaces_ = 0u;
  clear_has_namespaces();
}
inline ::google::protobuf::uint32 ContainerPrepareInfo::namespaces() const {
  return namespaces_;
}
inline void ContainerPrepareInfo::set_namespaces(::google::protobuf::uint32 value) {
  set_has_namespaces();
  namespaces_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slave
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fslave_2fisolator_2eproto__INCLUDED
