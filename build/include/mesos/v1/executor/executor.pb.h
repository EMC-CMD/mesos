// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/v1/executor/executor.proto

#ifndef PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED
#define PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/v1/mesos.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace v1 {
namespace executor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

class Event;
class Event_Subscribed;
class Event_Launch;
class Event_Kill;
class Event_Acknowledged;
class Event_Message;
class Event_Error;
class Call;
class Call_Subscribe;
class Call_Update;
class Call_Message;

enum Event_Type {
  Event_Type_SUBSCRIBED = 1,
  Event_Type_LAUNCH = 2,
  Event_Type_KILL = 3,
  Event_Type_ACKNOWLEDGED = 4,
  Event_Type_MESSAGE = 5,
  Event_Type_SHUTDOWN = 6,
  Event_Type_ERROR = 7
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_SUBSCRIBED;
const Event_Type Event_Type_Type_MAX = Event_Type_ERROR;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor();
inline const ::std::string& Event_Type_Name(Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_Type_descriptor(), value);
}
inline bool Event_Type_Parse(
    const ::std::string& name, Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Type>(
    Event_Type_descriptor(), name, value);
}
enum Call_Type {
  Call_Type_SUBSCRIBE = 1,
  Call_Type_UPDATE = 2,
  Call_Type_MESSAGE = 3
};
bool Call_Type_IsValid(int value);
const Call_Type Call_Type_Type_MIN = Call_Type_SUBSCRIBE;
const Call_Type Call_Type_Type_MAX = Call_Type_MESSAGE;
const int Call_Type_Type_ARRAYSIZE = Call_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor();
inline const ::std::string& Call_Type_Name(Call_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Type_descriptor(), value);
}
inline bool Call_Type_Parse(
    const ::std::string& name, Call_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Type>(
    Call_Type_descriptor(), name, value);
}
// ===================================================================

class Event_Subscribed : public ::google::protobuf::Message {
 public:
  Event_Subscribed();
  virtual ~Event_Subscribed();

  Event_Subscribed(const Event_Subscribed& from);

  inline Event_Subscribed& operator=(const Event_Subscribed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Subscribed& default_instance();

  void Swap(Event_Subscribed* other);

  // implements Message ----------------------------------------------

  Event_Subscribed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Subscribed& from);
  void MergeFrom(const Event_Subscribed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.ExecutorInfo executor_info = 1;
  inline bool has_executor_info() const;
  inline void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 1;
  inline const ::mesos::v1::ExecutorInfo& executor_info() const;
  inline ::mesos::v1::ExecutorInfo* mutable_executor_info();
  inline ::mesos::v1::ExecutorInfo* release_executor_info();
  inline void set_allocated_executor_info(::mesos::v1::ExecutorInfo* executor_info);

  // required .mesos.v1.FrameworkInfo framework_info = 2;
  inline bool has_framework_info() const;
  inline void clear_framework_info();
  static const int kFrameworkInfoFieldNumber = 2;
  inline const ::mesos::v1::FrameworkInfo& framework_info() const;
  inline ::mesos::v1::FrameworkInfo* mutable_framework_info();
  inline ::mesos::v1::FrameworkInfo* release_framework_info();
  inline void set_allocated_framework_info(::mesos::v1::FrameworkInfo* framework_info);

  // required .mesos.v1.AgentInfo agent_info = 3;
  inline bool has_agent_info() const;
  inline void clear_agent_info();
  static const int kAgentInfoFieldNumber = 3;
  inline const ::mesos::v1::AgentInfo& agent_info() const;
  inline ::mesos::v1::AgentInfo* mutable_agent_info();
  inline ::mesos::v1::AgentInfo* release_agent_info();
  inline void set_allocated_agent_info(::mesos::v1::AgentInfo* agent_info);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Subscribed)
 private:
  inline void set_has_executor_info();
  inline void clear_has_executor_info();
  inline void set_has_framework_info();
  inline void clear_has_framework_info();
  inline void set_has_agent_info();
  inline void clear_has_agent_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::ExecutorInfo* executor_info_;
  ::mesos::v1::FrameworkInfo* framework_info_;
  ::mesos::v1::AgentInfo* agent_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Subscribed* default_instance_;
};
// -------------------------------------------------------------------

class Event_Launch : public ::google::protobuf::Message {
 public:
  Event_Launch();
  virtual ~Event_Launch();

  Event_Launch(const Event_Launch& from);

  inline Event_Launch& operator=(const Event_Launch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Launch& default_instance();

  void Swap(Event_Launch* other);

  // implements Message ----------------------------------------------

  Event_Launch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Launch& from);
  void MergeFrom(const Event_Launch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskInfo task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::mesos::v1::TaskInfo& task() const;
  inline ::mesos::v1::TaskInfo* mutable_task();
  inline ::mesos::v1::TaskInfo* release_task();
  inline void set_allocated_task(::mesos::v1::TaskInfo* task);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Launch)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::TaskInfo* task_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Launch* default_instance_;
};
// -------------------------------------------------------------------

class Event_Kill : public ::google::protobuf::Message {
 public:
  Event_Kill();
  virtual ~Event_Kill();

  Event_Kill(const Event_Kill& from);

  inline Event_Kill& operator=(const Event_Kill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Kill& default_instance();

  void Swap(Event_Kill* other);

  // implements Message ----------------------------------------------

  Event_Kill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Kill& from);
  void MergeFrom(const Event_Kill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskID task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::mesos::v1::TaskID& task_id() const;
  inline ::mesos::v1::TaskID* mutable_task_id();
  inline ::mesos::v1::TaskID* release_task_id();
  inline void set_allocated_task_id(::mesos::v1::TaskID* task_id);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Kill)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::TaskID* task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Kill* default_instance_;
};
// -------------------------------------------------------------------

class Event_Acknowledged : public ::google::protobuf::Message {
 public:
  Event_Acknowledged();
  virtual ~Event_Acknowledged();

  Event_Acknowledged(const Event_Acknowledged& from);

  inline Event_Acknowledged& operator=(const Event_Acknowledged& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Acknowledged& default_instance();

  void Swap(Event_Acknowledged* other);

  // implements Message ----------------------------------------------

  Event_Acknowledged* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Acknowledged& from);
  void MergeFrom(const Event_Acknowledged& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskID task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline const ::mesos::v1::TaskID& task_id() const;
  inline ::mesos::v1::TaskID* mutable_task_id();
  inline ::mesos::v1::TaskID* release_task_id();
  inline void set_allocated_task_id(::mesos::v1::TaskID* task_id);

  // required bytes uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Acknowledged)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::TaskID* task_id_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Acknowledged* default_instance_;
};
// -------------------------------------------------------------------

class Event_Message : public ::google::protobuf::Message {
 public:
  Event_Message();
  virtual ~Event_Message();

  Event_Message(const Event_Message& from);

  inline Event_Message& operator=(const Event_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Message& default_instance();

  void Swap(Event_Message* other);

  // implements Message ----------------------------------------------

  Event_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Message& from);
  void MergeFrom(const Event_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Message)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Message* default_instance_;
};
// -------------------------------------------------------------------

class Event_Error : public ::google::protobuf::Message {
 public:
  Event_Error();
  virtual ~Event_Error();

  Event_Error(const Event_Error& from);

  inline Event_Error& operator=(const Event_Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Error& default_instance();

  void Swap(Event_Error* other);

  // implements Message ----------------------------------------------

  Event_Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Error& from);
  void MergeFrom(const Event_Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event.Error)
 private:
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event_Error* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_Subscribed Subscribed;
  typedef Event_Launch Launch;
  typedef Event_Kill Kill;
  typedef Event_Acknowledged Acknowledged;
  typedef Event_Message Message;
  typedef Event_Error Error;

  typedef Event_Type Type;
  static const Type SUBSCRIBED = Event_Type_SUBSCRIBED;
  static const Type LAUNCH = Event_Type_LAUNCH;
  static const Type KILL = Event_Type_KILL;
  static const Type ACKNOWLEDGED = Event_Type_ACKNOWLEDGED;
  static const Type MESSAGE = Event_Type_MESSAGE;
  static const Type SHUTDOWN = Event_Type_SHUTDOWN;
  static const Type ERROR = Event_Type_ERROR;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.v1.executor.Event.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::v1::executor::Event_Type type() const;
  inline void set_type(::mesos::v1::executor::Event_Type value);

  // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
  inline bool has_subscribed() const;
  inline void clear_subscribed();
  static const int kSubscribedFieldNumber = 2;
  inline const ::mesos::v1::executor::Event_Subscribed& subscribed() const;
  inline ::mesos::v1::executor::Event_Subscribed* mutable_subscribed();
  inline ::mesos::v1::executor::Event_Subscribed* release_subscribed();
  inline void set_allocated_subscribed(::mesos::v1::executor::Event_Subscribed* subscribed);

  // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
  inline bool has_acknowledged() const;
  inline void clear_acknowledged();
  static const int kAcknowledgedFieldNumber = 3;
  inline const ::mesos::v1::executor::Event_Acknowledged& acknowledged() const;
  inline ::mesos::v1::executor::Event_Acknowledged* mutable_acknowledged();
  inline ::mesos::v1::executor::Event_Acknowledged* release_acknowledged();
  inline void set_allocated_acknowledged(::mesos::v1::executor::Event_Acknowledged* acknowledged);

  // optional .mesos.v1.executor.Event.Launch launch = 4;
  inline bool has_launch() const;
  inline void clear_launch();
  static const int kLaunchFieldNumber = 4;
  inline const ::mesos::v1::executor::Event_Launch& launch() const;
  inline ::mesos::v1::executor::Event_Launch* mutable_launch();
  inline ::mesos::v1::executor::Event_Launch* release_launch();
  inline void set_allocated_launch(::mesos::v1::executor::Event_Launch* launch);

  // optional .mesos.v1.executor.Event.Kill kill = 5;
  inline bool has_kill() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 5;
  inline const ::mesos::v1::executor::Event_Kill& kill() const;
  inline ::mesos::v1::executor::Event_Kill* mutable_kill();
  inline ::mesos::v1::executor::Event_Kill* release_kill();
  inline void set_allocated_kill(::mesos::v1::executor::Event_Kill* kill);

  // optional .mesos.v1.executor.Event.Message message = 6;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 6;
  inline const ::mesos::v1::executor::Event_Message& message() const;
  inline ::mesos::v1::executor::Event_Message* mutable_message();
  inline ::mesos::v1::executor::Event_Message* release_message();
  inline void set_allocated_message(::mesos::v1::executor::Event_Message* message);

  // optional .mesos.v1.executor.Event.Error error = 7;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 7;
  inline const ::mesos::v1::executor::Event_Error& error() const;
  inline ::mesos::v1::executor::Event_Error* mutable_error();
  inline ::mesos::v1::executor::Event_Error* release_error();
  inline void set_allocated_error(::mesos::v1::executor::Event_Error* error);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subscribed();
  inline void clear_has_subscribed();
  inline void set_has_acknowledged();
  inline void clear_has_acknowledged();
  inline void set_has_launch();
  inline void clear_has_launch();
  inline void set_has_kill();
  inline void clear_has_kill();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::executor::Event_Subscribed* subscribed_;
  ::mesos::v1::executor::Event_Acknowledged* acknowledged_;
  ::mesos::v1::executor::Event_Launch* launch_;
  ::mesos::v1::executor::Event_Kill* kill_;
  ::mesos::v1::executor::Event_Message* message_;
  ::mesos::v1::executor::Event_Error* error_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Call_Subscribe : public ::google::protobuf::Message {
 public:
  Call_Subscribe();
  virtual ~Call_Subscribe();

  Call_Subscribe(const Call_Subscribe& from);

  inline Call_Subscribe& operator=(const Call_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Subscribe& default_instance();

  void Swap(Call_Subscribe* other);

  // implements Message ----------------------------------------------

  Call_Subscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_Subscribe& from);
  void MergeFrom(const Call_Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.v1.TaskInfo tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::mesos::v1::TaskInfo& tasks(int index) const;
  inline ::mesos::v1::TaskInfo* mutable_tasks(int index);
  inline ::mesos::v1::TaskInfo* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >*
      mutable_tasks();

  // repeated .mesos.v1.executor.Call.Update updates = 2;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 2;
  inline const ::mesos::v1::executor::Call_Update& updates(int index) const;
  inline ::mesos::v1::executor::Call_Update* mutable_updates(int index);
  inline ::mesos::v1::executor::Call_Update* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >*
      mutable_updates();

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Subscribe)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo > tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update > updates_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Call_Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class Call_Update : public ::google::protobuf::Message {
 public:
  Call_Update();
  virtual ~Call_Update();

  Call_Update(const Call_Update& from);

  inline Call_Update& operator=(const Call_Update& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Update& default_instance();

  void Swap(Call_Update* other);

  // implements Message ----------------------------------------------

  Call_Update* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_Update& from);
  void MergeFrom(const Call_Update& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.v1.TaskStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::mesos::v1::TaskStatus& status() const;
  inline ::mesos::v1::TaskStatus* mutable_status();
  inline ::mesos::v1::TaskStatus* release_status();
  inline void set_allocated_status(::mesos::v1::TaskStatus* status);

  // required double timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline double timestamp() const;
  inline void set_timestamp(double value);

  // required bytes uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Update)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::TaskStatus* status_;
  double timestamp_;
  ::std::string* uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Call_Update* default_instance_;
};
// -------------------------------------------------------------------

class Call_Message : public ::google::protobuf::Message {
 public:
  Call_Message();
  virtual ~Call_Message();

  Call_Message(const Call_Message& from);

  inline Call_Message& operator=(const Call_Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_Message& default_instance();

  void Swap(Call_Message* other);

  // implements Message ----------------------------------------------

  Call_Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_Message& from);
  void MergeFrom(const Call_Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call.Message)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Call_Message* default_instance_;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  void Swap(Call* other);

  // implements Message ----------------------------------------------

  Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Call_Subscribe Subscribe;
  typedef Call_Update Update;
  typedef Call_Message Message;

  typedef Call_Type Type;
  static const Type SUBSCRIBE = Call_Type_SUBSCRIBE;
  static const Type UPDATE = Call_Type_UPDATE;
  static const Type MESSAGE = Call_Type_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return Call_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Call_Type_Type_MIN;
  static const Type Type_MAX =
    Call_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Call_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Call_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Call_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Call_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.v1.ExecutorID executor_id = 1;
  inline bool has_executor_id() const;
  inline void clear_executor_id();
  static const int kExecutorIdFieldNumber = 1;
  inline const ::mesos::v1::ExecutorID& executor_id() const;
  inline ::mesos::v1::ExecutorID* mutable_executor_id();
  inline ::mesos::v1::ExecutorID* release_executor_id();
  inline void set_allocated_executor_id(::mesos::v1::ExecutorID* executor_id);

  // required .mesos.v1.FrameworkID framework_id = 2;
  inline bool has_framework_id() const;
  inline void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 2;
  inline const ::mesos::v1::FrameworkID& framework_id() const;
  inline ::mesos::v1::FrameworkID* mutable_framework_id();
  inline ::mesos::v1::FrameworkID* release_framework_id();
  inline void set_allocated_framework_id(::mesos::v1::FrameworkID* framework_id);

  // required .mesos.v1.executor.Call.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::mesos::v1::executor::Call_Type type() const;
  inline void set_type(::mesos::v1::executor::Call_Type value);

  // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
  inline bool has_subscribe() const;
  inline void clear_subscribe();
  static const int kSubscribeFieldNumber = 4;
  inline const ::mesos::v1::executor::Call_Subscribe& subscribe() const;
  inline ::mesos::v1::executor::Call_Subscribe* mutable_subscribe();
  inline ::mesos::v1::executor::Call_Subscribe* release_subscribe();
  inline void set_allocated_subscribe(::mesos::v1::executor::Call_Subscribe* subscribe);

  // optional .mesos.v1.executor.Call.Update update = 5;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 5;
  inline const ::mesos::v1::executor::Call_Update& update() const;
  inline ::mesos::v1::executor::Call_Update* mutable_update();
  inline ::mesos::v1::executor::Call_Update* release_update();
  inline void set_allocated_update(::mesos::v1::executor::Call_Update* update);

  // optional .mesos.v1.executor.Call.Message message = 6;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 6;
  inline const ::mesos::v1::executor::Call_Message& message() const;
  inline ::mesos::v1::executor::Call_Message* mutable_message();
  inline ::mesos::v1::executor::Call_Message* release_message();
  inline void set_allocated_message(::mesos::v1::executor::Call_Message* message);

  // @@protoc_insertion_point(class_scope:mesos.v1.executor.Call)
 private:
  inline void set_has_executor_id();
  inline void clear_has_executor_id();
  inline void set_has_framework_id();
  inline void clear_has_framework_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subscribe();
  inline void clear_has_subscribe();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::v1::ExecutorID* executor_id_;
  ::mesos::v1::FrameworkID* framework_id_;
  ::mesos::v1::executor::Call_Subscribe* subscribe_;
  ::mesos::v1::executor::Call_Update* update_;
  ::mesos::v1::executor::Call_Message* message_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  friend void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto();

  void InitAsDefaultInstance();
  static Call* default_instance_;
};
// ===================================================================


// ===================================================================

// Event_Subscribed

// required .mesos.v1.ExecutorInfo executor_info = 1;
inline bool Event_Subscribed::has_executor_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Subscribed::set_has_executor_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Subscribed::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Subscribed::clear_executor_info() {
  if (executor_info_ != NULL) executor_info_->::mesos::v1::ExecutorInfo::Clear();
  clear_has_executor_info();
}
inline const ::mesos::v1::ExecutorInfo& Event_Subscribed::executor_info() const {
  return executor_info_ != NULL ? *executor_info_ : *default_instance_->executor_info_;
}
inline ::mesos::v1::ExecutorInfo* Event_Subscribed::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) executor_info_ = new ::mesos::v1::ExecutorInfo;
  return executor_info_;
}
inline ::mesos::v1::ExecutorInfo* Event_Subscribed::release_executor_info() {
  clear_has_executor_info();
  ::mesos::v1::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline void Event_Subscribed::set_allocated_executor_info(::mesos::v1::ExecutorInfo* executor_info) {
  delete executor_info_;
  executor_info_ = executor_info;
  if (executor_info) {
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
}

// required .mesos.v1.FrameworkInfo framework_info = 2;
inline bool Event_Subscribed::has_framework_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Subscribed::set_has_framework_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Subscribed::clear_has_framework_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Subscribed::clear_framework_info() {
  if (framework_info_ != NULL) framework_info_->::mesos::v1::FrameworkInfo::Clear();
  clear_has_framework_info();
}
inline const ::mesos::v1::FrameworkInfo& Event_Subscribed::framework_info() const {
  return framework_info_ != NULL ? *framework_info_ : *default_instance_->framework_info_;
}
inline ::mesos::v1::FrameworkInfo* Event_Subscribed::mutable_framework_info() {
  set_has_framework_info();
  if (framework_info_ == NULL) framework_info_ = new ::mesos::v1::FrameworkInfo;
  return framework_info_;
}
inline ::mesos::v1::FrameworkInfo* Event_Subscribed::release_framework_info() {
  clear_has_framework_info();
  ::mesos::v1::FrameworkInfo* temp = framework_info_;
  framework_info_ = NULL;
  return temp;
}
inline void Event_Subscribed::set_allocated_framework_info(::mesos::v1::FrameworkInfo* framework_info) {
  delete framework_info_;
  framework_info_ = framework_info;
  if (framework_info) {
    set_has_framework_info();
  } else {
    clear_has_framework_info();
  }
}

// required .mesos.v1.AgentInfo agent_info = 3;
inline bool Event_Subscribed::has_agent_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_Subscribed::set_has_agent_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_Subscribed::clear_has_agent_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_Subscribed::clear_agent_info() {
  if (agent_info_ != NULL) agent_info_->::mesos::v1::AgentInfo::Clear();
  clear_has_agent_info();
}
inline const ::mesos::v1::AgentInfo& Event_Subscribed::agent_info() const {
  return agent_info_ != NULL ? *agent_info_ : *default_instance_->agent_info_;
}
inline ::mesos::v1::AgentInfo* Event_Subscribed::mutable_agent_info() {
  set_has_agent_info();
  if (agent_info_ == NULL) agent_info_ = new ::mesos::v1::AgentInfo;
  return agent_info_;
}
inline ::mesos::v1::AgentInfo* Event_Subscribed::release_agent_info() {
  clear_has_agent_info();
  ::mesos::v1::AgentInfo* temp = agent_info_;
  agent_info_ = NULL;
  return temp;
}
inline void Event_Subscribed::set_allocated_agent_info(::mesos::v1::AgentInfo* agent_info) {
  delete agent_info_;
  agent_info_ = agent_info;
  if (agent_info) {
    set_has_agent_info();
  } else {
    clear_has_agent_info();
  }
}

// -------------------------------------------------------------------

// Event_Launch

// required .mesos.v1.TaskInfo task = 1;
inline bool Event_Launch::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Launch::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Launch::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Launch::clear_task() {
  if (task_ != NULL) task_->::mesos::v1::TaskInfo::Clear();
  clear_has_task();
}
inline const ::mesos::v1::TaskInfo& Event_Launch::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::mesos::v1::TaskInfo* Event_Launch::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::mesos::v1::TaskInfo;
  return task_;
}
inline ::mesos::v1::TaskInfo* Event_Launch::release_task() {
  clear_has_task();
  ::mesos::v1::TaskInfo* temp = task_;
  task_ = NULL;
  return temp;
}
inline void Event_Launch::set_allocated_task(::mesos::v1::TaskInfo* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
}

// -------------------------------------------------------------------

// Event_Kill

// required .mesos.v1.TaskID task_id = 1;
inline bool Event_Kill::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Kill::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Kill::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Kill::clear_task_id() {
  if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
  clear_has_task_id();
}
inline const ::mesos::v1::TaskID& Event_Kill::task_id() const {
  return task_id_ != NULL ? *task_id_ : *default_instance_->task_id_;
}
inline ::mesos::v1::TaskID* Event_Kill::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == NULL) task_id_ = new ::mesos::v1::TaskID;
  return task_id_;
}
inline ::mesos::v1::TaskID* Event_Kill::release_task_id() {
  clear_has_task_id();
  ::mesos::v1::TaskID* temp = task_id_;
  task_id_ = NULL;
  return temp;
}
inline void Event_Kill::set_allocated_task_id(::mesos::v1::TaskID* task_id) {
  delete task_id_;
  task_id_ = task_id;
  if (task_id) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
}

// -------------------------------------------------------------------

// Event_Acknowledged

// required .mesos.v1.TaskID task_id = 1;
inline bool Event_Acknowledged::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Acknowledged::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Acknowledged::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Acknowledged::clear_task_id() {
  if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
  clear_has_task_id();
}
inline const ::mesos::v1::TaskID& Event_Acknowledged::task_id() const {
  return task_id_ != NULL ? *task_id_ : *default_instance_->task_id_;
}
inline ::mesos::v1::TaskID* Event_Acknowledged::mutable_task_id() {
  set_has_task_id();
  if (task_id_ == NULL) task_id_ = new ::mesos::v1::TaskID;
  return task_id_;
}
inline ::mesos::v1::TaskID* Event_Acknowledged::release_task_id() {
  clear_has_task_id();
  ::mesos::v1::TaskID* temp = task_id_;
  task_id_ = NULL;
  return temp;
}
inline void Event_Acknowledged::set_allocated_task_id(::mesos::v1::TaskID* task_id) {
  delete task_id_;
  task_id_ = task_id;
  if (task_id) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
}

// required bytes uuid = 2;
inline bool Event_Acknowledged::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_Acknowledged::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_Acknowledged::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_Acknowledged::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Event_Acknowledged::uuid() const {
  return *uuid_;
}
inline void Event_Acknowledged::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Event_Acknowledged::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Event_Acknowledged::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Acknowledged::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Event_Acknowledged::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_Acknowledged::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Event_Message

// required bytes data = 1;
inline bool Event_Message::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Message::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Message::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Event_Message::data() const {
  return *data_;
}
inline void Event_Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Event_Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Event_Message::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Event_Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Event_Error

// required string message = 1;
inline bool Event_Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Error::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Event_Error::message() const {
  return *message_;
}
inline void Event_Error::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Event_Error::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Event_Error::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event_Error::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Event_Error::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event_Error::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Event

// required .mesos.v1.executor.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::v1::executor::Event_Type Event::type() const {
  return static_cast< ::mesos::v1::executor::Event_Type >(type_);
}
inline void Event::set_type(::mesos::v1::executor::Event_Type value) {
  assert(::mesos::v1::executor::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
inline bool Event::has_subscribed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_subscribed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_subscribed() {
  if (subscribed_ != NULL) subscribed_->::mesos::v1::executor::Event_Subscribed::Clear();
  clear_has_subscribed();
}
inline const ::mesos::v1::executor::Event_Subscribed& Event::subscribed() const {
  return subscribed_ != NULL ? *subscribed_ : *default_instance_->subscribed_;
}
inline ::mesos::v1::executor::Event_Subscribed* Event::mutable_subscribed() {
  set_has_subscribed();
  if (subscribed_ == NULL) subscribed_ = new ::mesos::v1::executor::Event_Subscribed;
  return subscribed_;
}
inline ::mesos::v1::executor::Event_Subscribed* Event::release_subscribed() {
  clear_has_subscribed();
  ::mesos::v1::executor::Event_Subscribed* temp = subscribed_;
  subscribed_ = NULL;
  return temp;
}
inline void Event::set_allocated_subscribed(::mesos::v1::executor::Event_Subscribed* subscribed) {
  delete subscribed_;
  subscribed_ = subscribed;
  if (subscribed) {
    set_has_subscribed();
  } else {
    clear_has_subscribed();
  }
}

// optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
inline bool Event::has_acknowledged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_acknowledged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_acknowledged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_acknowledged() {
  if (acknowledged_ != NULL) acknowledged_->::mesos::v1::executor::Event_Acknowledged::Clear();
  clear_has_acknowledged();
}
inline const ::mesos::v1::executor::Event_Acknowledged& Event::acknowledged() const {
  return acknowledged_ != NULL ? *acknowledged_ : *default_instance_->acknowledged_;
}
inline ::mesos::v1::executor::Event_Acknowledged* Event::mutable_acknowledged() {
  set_has_acknowledged();
  if (acknowledged_ == NULL) acknowledged_ = new ::mesos::v1::executor::Event_Acknowledged;
  return acknowledged_;
}
inline ::mesos::v1::executor::Event_Acknowledged* Event::release_acknowledged() {
  clear_has_acknowledged();
  ::mesos::v1::executor::Event_Acknowledged* temp = acknowledged_;
  acknowledged_ = NULL;
  return temp;
}
inline void Event::set_allocated_acknowledged(::mesos::v1::executor::Event_Acknowledged* acknowledged) {
  delete acknowledged_;
  acknowledged_ = acknowledged;
  if (acknowledged) {
    set_has_acknowledged();
  } else {
    clear_has_acknowledged();
  }
}

// optional .mesos.v1.executor.Event.Launch launch = 4;
inline bool Event::has_launch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_launch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_launch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_launch() {
  if (launch_ != NULL) launch_->::mesos::v1::executor::Event_Launch::Clear();
  clear_has_launch();
}
inline const ::mesos::v1::executor::Event_Launch& Event::launch() const {
  return launch_ != NULL ? *launch_ : *default_instance_->launch_;
}
inline ::mesos::v1::executor::Event_Launch* Event::mutable_launch() {
  set_has_launch();
  if (launch_ == NULL) launch_ = new ::mesos::v1::executor::Event_Launch;
  return launch_;
}
inline ::mesos::v1::executor::Event_Launch* Event::release_launch() {
  clear_has_launch();
  ::mesos::v1::executor::Event_Launch* temp = launch_;
  launch_ = NULL;
  return temp;
}
inline void Event::set_allocated_launch(::mesos::v1::executor::Event_Launch* launch) {
  delete launch_;
  launch_ = launch;
  if (launch) {
    set_has_launch();
  } else {
    clear_has_launch();
  }
}

// optional .mesos.v1.executor.Event.Kill kill = 5;
inline bool Event::has_kill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_kill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_kill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_kill() {
  if (kill_ != NULL) kill_->::mesos::v1::executor::Event_Kill::Clear();
  clear_has_kill();
}
inline const ::mesos::v1::executor::Event_Kill& Event::kill() const {
  return kill_ != NULL ? *kill_ : *default_instance_->kill_;
}
inline ::mesos::v1::executor::Event_Kill* Event::mutable_kill() {
  set_has_kill();
  if (kill_ == NULL) kill_ = new ::mesos::v1::executor::Event_Kill;
  return kill_;
}
inline ::mesos::v1::executor::Event_Kill* Event::release_kill() {
  clear_has_kill();
  ::mesos::v1::executor::Event_Kill* temp = kill_;
  kill_ = NULL;
  return temp;
}
inline void Event::set_allocated_kill(::mesos::v1::executor::Event_Kill* kill) {
  delete kill_;
  kill_ = kill;
  if (kill) {
    set_has_kill();
  } else {
    clear_has_kill();
  }
}

// optional .mesos.v1.executor.Event.Message message = 6;
inline bool Event::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_message() {
  if (message_ != NULL) message_->::mesos::v1::executor::Event_Message::Clear();
  clear_has_message();
}
inline const ::mesos::v1::executor::Event_Message& Event::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::mesos::v1::executor::Event_Message* Event::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::mesos::v1::executor::Event_Message;
  return message_;
}
inline ::mesos::v1::executor::Event_Message* Event::release_message() {
  clear_has_message();
  ::mesos::v1::executor::Event_Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void Event::set_allocated_message(::mesos::v1::executor::Event_Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
}

// optional .mesos.v1.executor.Event.Error error = 7;
inline bool Event::has_error() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Event::set_has_error() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Event::clear_has_error() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Event::clear_error() {
  if (error_ != NULL) error_->::mesos::v1::executor::Event_Error::Clear();
  clear_has_error();
}
inline const ::mesos::v1::executor::Event_Error& Event::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::mesos::v1::executor::Event_Error* Event::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::mesos::v1::executor::Event_Error;
  return error_;
}
inline ::mesos::v1::executor::Event_Error* Event::release_error() {
  clear_has_error();
  ::mesos::v1::executor::Event_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Event::set_allocated_error(::mesos::v1::executor::Event_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
}

// -------------------------------------------------------------------

// Call_Subscribe

// repeated .mesos.v1.TaskInfo tasks = 1;
inline int Call_Subscribe::tasks_size() const {
  return tasks_.size();
}
inline void Call_Subscribe::clear_tasks() {
  tasks_.Clear();
}
inline const ::mesos::v1::TaskInfo& Call_Subscribe::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::mesos::v1::TaskInfo* Call_Subscribe::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::mesos::v1::TaskInfo* Call_Subscribe::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >&
Call_Subscribe::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::TaskInfo >*
Call_Subscribe::mutable_tasks() {
  return &tasks_;
}

// repeated .mesos.v1.executor.Call.Update updates = 2;
inline int Call_Subscribe::updates_size() const {
  return updates_.size();
}
inline void Call_Subscribe::clear_updates() {
  updates_.Clear();
}
inline const ::mesos::v1::executor::Call_Update& Call_Subscribe::updates(int index) const {
  return updates_.Get(index);
}
inline ::mesos::v1::executor::Call_Update* Call_Subscribe::mutable_updates(int index) {
  return updates_.Mutable(index);
}
inline ::mesos::v1::executor::Call_Update* Call_Subscribe::add_updates() {
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >&
Call_Subscribe::updates() const {
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::v1::executor::Call_Update >*
Call_Subscribe::mutable_updates() {
  return &updates_;
}

// -------------------------------------------------------------------

// Call_Update

// required .mesos.v1.TaskStatus status = 1;
inline bool Call_Update::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_Update::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_Update::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_Update::clear_status() {
  if (status_ != NULL) status_->::mesos::v1::TaskStatus::Clear();
  clear_has_status();
}
inline const ::mesos::v1::TaskStatus& Call_Update::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mesos::v1::TaskStatus* Call_Update::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::mesos::v1::TaskStatus;
  return status_;
}
inline ::mesos::v1::TaskStatus* Call_Update::release_status() {
  clear_has_status();
  ::mesos::v1::TaskStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Call_Update::set_allocated_status(::mesos::v1::TaskStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
}

// required double timestamp = 2;
inline bool Call_Update::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call_Update::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call_Update::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call_Update::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Call_Update::timestamp() const {
  return timestamp_;
}
inline void Call_Update::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required bytes uuid = 3;
inline bool Call_Update::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call_Update::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call_Update::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call_Update::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Call_Update::uuid() const {
  return *uuid_;
}
inline void Call_Update::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Call_Update::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Call_Update::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Call_Update::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Call_Update::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Call_Update::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Call_Message

// required bytes data = 2;
inline bool Call_Message::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_Message::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_Message::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_Message::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Call_Message::data() const {
  return *data_;
}
inline void Call_Message::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Call_Message::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Call_Message::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Call_Message::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Call_Message::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Call_Message::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Call

// required .mesos.v1.ExecutorID executor_id = 1;
inline bool Call::has_executor_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_executor_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_executor_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_executor_id() {
  if (executor_id_ != NULL) executor_id_->::mesos::v1::ExecutorID::Clear();
  clear_has_executor_id();
}
inline const ::mesos::v1::ExecutorID& Call::executor_id() const {
  return executor_id_ != NULL ? *executor_id_ : *default_instance_->executor_id_;
}
inline ::mesos::v1::ExecutorID* Call::mutable_executor_id() {
  set_has_executor_id();
  if (executor_id_ == NULL) executor_id_ = new ::mesos::v1::ExecutorID;
  return executor_id_;
}
inline ::mesos::v1::ExecutorID* Call::release_executor_id() {
  clear_has_executor_id();
  ::mesos::v1::ExecutorID* temp = executor_id_;
  executor_id_ = NULL;
  return temp;
}
inline void Call::set_allocated_executor_id(::mesos::v1::ExecutorID* executor_id) {
  delete executor_id_;
  executor_id_ = executor_id;
  if (executor_id) {
    set_has_executor_id();
  } else {
    clear_has_executor_id();
  }
}

// required .mesos.v1.FrameworkID framework_id = 2;
inline bool Call::has_framework_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_framework_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call::clear_framework_id() {
  if (framework_id_ != NULL) framework_id_->::mesos::v1::FrameworkID::Clear();
  clear_has_framework_id();
}
inline const ::mesos::v1::FrameworkID& Call::framework_id() const {
  return framework_id_ != NULL ? *framework_id_ : *default_instance_->framework_id_;
}
inline ::mesos::v1::FrameworkID* Call::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) framework_id_ = new ::mesos::v1::FrameworkID;
  return framework_id_;
}
inline ::mesos::v1::FrameworkID* Call::release_framework_id() {
  clear_has_framework_id();
  ::mesos::v1::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline void Call::set_allocated_framework_id(::mesos::v1::FrameworkID* framework_id) {
  delete framework_id_;
  framework_id_ = framework_id;
  if (framework_id) {
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
}

// required .mesos.v1.executor.Call.Type type = 3;
inline bool Call::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::v1::executor::Call_Type Call::type() const {
  return static_cast< ::mesos::v1::executor::Call_Type >(type_);
}
inline void Call::set_type(::mesos::v1::executor::Call_Type value) {
  assert(::mesos::v1::executor::Call_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
inline bool Call::has_subscribe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call::set_has_subscribe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Call::clear_subscribe() {
  if (subscribe_ != NULL) subscribe_->::mesos::v1::executor::Call_Subscribe::Clear();
  clear_has_subscribe();
}
inline const ::mesos::v1::executor::Call_Subscribe& Call::subscribe() const {
  return subscribe_ != NULL ? *subscribe_ : *default_instance_->subscribe_;
}
inline ::mesos::v1::executor::Call_Subscribe* Call::mutable_subscribe() {
  set_has_subscribe();
  if (subscribe_ == NULL) subscribe_ = new ::mesos::v1::executor::Call_Subscribe;
  return subscribe_;
}
inline ::mesos::v1::executor::Call_Subscribe* Call::release_subscribe() {
  clear_has_subscribe();
  ::mesos::v1::executor::Call_Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
inline void Call::set_allocated_subscribe(::mesos::v1::executor::Call_Subscribe* subscribe) {
  delete subscribe_;
  subscribe_ = subscribe;
  if (subscribe) {
    set_has_subscribe();
  } else {
    clear_has_subscribe();
  }
}

// optional .mesos.v1.executor.Call.Update update = 5;
inline bool Call::has_update() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Call::set_has_update() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Call::clear_has_update() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Call::clear_update() {
  if (update_ != NULL) update_->::mesos::v1::executor::Call_Update::Clear();
  clear_has_update();
}
inline const ::mesos::v1::executor::Call_Update& Call::update() const {
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::mesos::v1::executor::Call_Update* Call::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::mesos::v1::executor::Call_Update;
  return update_;
}
inline ::mesos::v1::executor::Call_Update* Call::release_update() {
  clear_has_update();
  ::mesos::v1::executor::Call_Update* temp = update_;
  update_ = NULL;
  return temp;
}
inline void Call::set_allocated_update(::mesos::v1::executor::Call_Update* update) {
  delete update_;
  update_ = update;
  if (update) {
    set_has_update();
  } else {
    clear_has_update();
  }
}

// optional .mesos.v1.executor.Call.Message message = 6;
inline bool Call::has_message() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Call::set_has_message() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Call::clear_has_message() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Call::clear_message() {
  if (message_ != NULL) message_->::mesos::v1::executor::Call_Message::Clear();
  clear_has_message();
}
inline const ::mesos::v1::executor::Call_Message& Call::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::mesos::v1::executor::Call_Message* Call::mutable_message() {
  set_has_message();
  if (message_ == NULL) message_ = new ::mesos::v1::executor::Call_Message;
  return message_;
}
inline ::mesos::v1::executor::Call_Message* Call::release_message() {
  clear_has_message();
  ::mesos::v1::executor::Call_Message* temp = message_;
  message_ = NULL;
  return temp;
}
inline void Call::set_allocated_message(::mesos::v1::executor::Call_Message* message) {
  delete message_;
  message_ = message;
  if (message) {
    set_has_message();
  } else {
    clear_has_message();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace executor
}  // namespace v1
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::v1::executor::Event_Type>() {
  return ::mesos::v1::executor::Event_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::v1::executor::Call_Type>() {
  return ::mesos::v1::executor::Call_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mesos_2fv1_2fexecutor_2fexecutor_2eproto__INCLUDED
