// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/v1/mesos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos/v1/mesos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* FrameworkID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkID_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfferID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfferID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DurationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DurationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* URL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URL_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unavailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unavailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineID_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MachineInfo_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInfo_Capability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInfo_Capability_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameworkInfo_Capability_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HealthCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HealthCheck_HTTP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HealthCheck_HTTP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInfo_URI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInfo_URI_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandInfo_ContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandInfo_ContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_Scalar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_Scalar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_Ranges_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_Ranges_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_Set_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_Set_reflection_ = NULL;
const ::google::protobuf::Descriptor* Value_Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_Text_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Value_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Attribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_ReservationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_ReservationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_DiskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_DiskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_DiskInfo_Persistence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_DiskInfo_Persistence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_RevocableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_RevocableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficControlStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficControlStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceUsage_Executor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceUsage_Executor_reflection_ = NULL;
const ::google::protobuf::Descriptor* PerfStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PerfStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_Launch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_Launch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_Reserve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_Reserve_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_Unreserve_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_Unreserve_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_Create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_Create_reflection_ = NULL;
const ::google::protobuf::Descriptor* Offer_Operation_Destroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Offer_Operation_Destroy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Offer_Operation_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InverseOffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InverseOffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_Source_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_Reason_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Filters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Environment_Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Environment_Variable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Credential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Credential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Credentials_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Credentials_reflection_ = NULL;
const ::google::protobuf::Descriptor* RateLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RateLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RateLimits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RateLimits_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_AppC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_AppC_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Image_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Volume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Volume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Volume_Mode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerInfo_DockerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInfo_DockerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerInfo_DockerInfo_PortMapping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInfo_DockerInfo_PortMapping_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerInfo_DockerInfo_Network_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ContainerInfo_MesosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInfo_MesosInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerInfo_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Labels_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Labels_reflection_ = NULL;
const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* Port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Port_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ports_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ports_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscoveryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscoveryInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscoveryInfo_Visibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2fv1_2fmesos_2eproto() {
  protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos/v1/mesos.proto");
  GOOGLE_CHECK(file != NULL);
  FrameworkID_descriptor_ = file->message_type(0);
  static const int FrameworkID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, value_),
  };
  FrameworkID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkID_descriptor_,
      FrameworkID::default_instance_,
      FrameworkID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkID));
  OfferID_descriptor_ = file->message_type(1);
  static const int OfferID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, value_),
  };
  OfferID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfferID_descriptor_,
      OfferID::default_instance_,
      OfferID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfferID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfferID));
  AgentID_descriptor_ = file->message_type(2);
  static const int AgentID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentID, value_),
  };
  AgentID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentID_descriptor_,
      AgentID::default_instance_,
      AgentID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentID));
  TaskID_descriptor_ = file->message_type(3);
  static const int TaskID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, value_),
  };
  TaskID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskID_descriptor_,
      TaskID::default_instance_,
      TaskID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskID));
  ExecutorID_descriptor_ = file->message_type(4);
  static const int ExecutorID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, value_),
  };
  ExecutorID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutorID_descriptor_,
      ExecutorID::default_instance_,
      ExecutorID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutorID));
  ContainerID_descriptor_ = file->message_type(5);
  static const int ContainerID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerID, value_),
  };
  ContainerID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerID_descriptor_,
      ContainerID::default_instance_,
      ContainerID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerID));
  TimeInfo_descriptor_ = file->message_type(6);
  static const int TimeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, nanoseconds_),
  };
  TimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeInfo_descriptor_,
      TimeInfo::default_instance_,
      TimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeInfo));
  DurationInfo_descriptor_ = file->message_type(7);
  static const int DurationInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationInfo, nanoseconds_),
  };
  DurationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DurationInfo_descriptor_,
      DurationInfo::default_instance_,
      DurationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DurationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DurationInfo));
  Address_descriptor_ = file->message_type(8);
  static const int Address_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  URL_descriptor_ = file->message_type(9);
  static const int URL_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, scheme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, fragment_),
  };
  URL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      URL_descriptor_,
      URL::default_instance_,
      URL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(URL));
  Unavailability_descriptor_ = file->message_type(10);
  static const int Unavailability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unavailability, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unavailability, duration_),
  };
  Unavailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unavailability_descriptor_,
      Unavailability::default_instance_,
      Unavailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unavailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unavailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unavailability));
  MachineID_descriptor_ = file->message_type(11);
  static const int MachineID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineID, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineID, ip_),
  };
  MachineID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineID_descriptor_,
      MachineID::default_instance_,
      MachineID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineID));
  MachineInfo_descriptor_ = file->message_type(12);
  static const int MachineInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, unavailability_),
  };
  MachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineInfo_descriptor_,
      MachineInfo::default_instance_,
      MachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineInfo));
  MachineInfo_Mode_descriptor_ = MachineInfo_descriptor_->enum_type(0);
  FrameworkInfo_descriptor_ = file->message_type(13);
  static const int FrameworkInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, failover_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, checkpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, principal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, webui_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, labels_),
  };
  FrameworkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInfo_descriptor_,
      FrameworkInfo::default_instance_,
      FrameworkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInfo));
  FrameworkInfo_Capability_descriptor_ = FrameworkInfo_descriptor_->nested_type(0);
  static const int FrameworkInfo_Capability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo_Capability, type_),
  };
  FrameworkInfo_Capability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInfo_Capability_descriptor_,
      FrameworkInfo_Capability::default_instance_,
      FrameworkInfo_Capability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo_Capability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInfo_Capability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInfo_Capability));
  FrameworkInfo_Capability_Type_descriptor_ = FrameworkInfo_Capability_descriptor_->enum_type(0);
  HealthCheck_descriptor_ = file->message_type(14);
  static const int HealthCheck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, http_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, delay_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, interval_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, timeout_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, consecutive_failures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, grace_period_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, command_),
  };
  HealthCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthCheck_descriptor_,
      HealthCheck::default_instance_,
      HealthCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthCheck));
  HealthCheck_HTTP_descriptor_ = HealthCheck_descriptor_->nested_type(0);
  static const int HealthCheck_HTTP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HTTP, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HTTP, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HTTP, statuses_),
  };
  HealthCheck_HTTP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HealthCheck_HTTP_descriptor_,
      HealthCheck_HTTP::default_instance_,
      HealthCheck_HTTP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HTTP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HealthCheck_HTTP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HealthCheck_HTTP));
  CommandInfo_descriptor_ = file->message_type(15);
  static const int CommandInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, uris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, shell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, arguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, user_),
  };
  CommandInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInfo_descriptor_,
      CommandInfo::default_instance_,
      CommandInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInfo));
  CommandInfo_URI_descriptor_ = CommandInfo_descriptor_->nested_type(0);
  static const int CommandInfo_URI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, executable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, extract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, cache_),
  };
  CommandInfo_URI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInfo_URI_descriptor_,
      CommandInfo_URI::default_instance_,
      CommandInfo_URI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_URI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInfo_URI));
  CommandInfo_ContainerInfo_descriptor_ = CommandInfo_descriptor_->nested_type(1);
  static const int CommandInfo_ContainerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_ContainerInfo, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_ContainerInfo, options_),
  };
  CommandInfo_ContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandInfo_ContainerInfo_descriptor_,
      CommandInfo_ContainerInfo::default_instance_,
      CommandInfo_ContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_ContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandInfo_ContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandInfo_ContainerInfo));
  ExecutorInfo_descriptor_ = file->message_type(16);
  static const int ExecutorInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, executor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, discovery_),
  };
  ExecutorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutorInfo_descriptor_,
      ExecutorInfo::default_instance_,
      ExecutorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutorInfo));
  MasterInfo_descriptor_ = file->message_type(17);
  static const int MasterInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, address_),
  };
  MasterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterInfo_descriptor_,
      MasterInfo::default_instance_,
      MasterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterInfo));
  AgentInfo_descriptor_ = file->message_type(18);
  static const int AgentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, id_),
  };
  AgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInfo_descriptor_,
      AgentInfo::default_instance_,
      AgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInfo));
  Value_descriptor_ = file->message_type(19);
  static const int Value_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, text_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  Value_Scalar_descriptor_ = Value_descriptor_->nested_type(0);
  static const int Value_Scalar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Scalar, value_),
  };
  Value_Scalar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_Scalar_descriptor_,
      Value_Scalar::default_instance_,
      Value_Scalar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Scalar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Scalar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value_Scalar));
  Value_Range_descriptor_ = Value_descriptor_->nested_type(1);
  static const int Value_Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Range, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Range, end_),
  };
  Value_Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_Range_descriptor_,
      Value_Range::default_instance_,
      Value_Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value_Range));
  Value_Ranges_descriptor_ = Value_descriptor_->nested_type(2);
  static const int Value_Ranges_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Ranges, range_),
  };
  Value_Ranges_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_Ranges_descriptor_,
      Value_Ranges::default_instance_,
      Value_Ranges_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Ranges, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Ranges, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value_Ranges));
  Value_Set_descriptor_ = Value_descriptor_->nested_type(3);
  static const int Value_Set_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Set, item_),
  };
  Value_Set_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_Set_descriptor_,
      Value_Set::default_instance_,
      Value_Set_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Set, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Set, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value_Set));
  Value_Text_descriptor_ = Value_descriptor_->nested_type(4);
  static const int Value_Text_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Text, value_),
  };
  Value_Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_Text_descriptor_,
      Value_Text::default_instance_,
      Value_Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value_Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value_Text));
  Value_Type_descriptor_ = Value_descriptor_->enum_type(0);
  Attribute_descriptor_ = file->message_type(20);
  static const int Attribute_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, text_),
  };
  Attribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attribute_descriptor_,
      Attribute::default_instance_,
      Attribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attribute));
  Resource_descriptor_ = file->message_type(21);
  static const int Resource_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, scalar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, ranges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, disk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, revocable_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  Resource_ReservationInfo_descriptor_ = Resource_descriptor_->nested_type(0);
  static const int Resource_ReservationInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_ReservationInfo, principal_),
  };
  Resource_ReservationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_ReservationInfo_descriptor_,
      Resource_ReservationInfo::default_instance_,
      Resource_ReservationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_ReservationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_ReservationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_ReservationInfo));
  Resource_DiskInfo_descriptor_ = Resource_descriptor_->nested_type(1);
  static const int Resource_DiskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo, persistence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo, volume_),
  };
  Resource_DiskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_DiskInfo_descriptor_,
      Resource_DiskInfo::default_instance_,
      Resource_DiskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_DiskInfo));
  Resource_DiskInfo_Persistence_descriptor_ = Resource_DiskInfo_descriptor_->nested_type(0);
  static const int Resource_DiskInfo_Persistence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo_Persistence, id_),
  };
  Resource_DiskInfo_Persistence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_DiskInfo_Persistence_descriptor_,
      Resource_DiskInfo_Persistence::default_instance_,
      Resource_DiskInfo_Persistence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo_Persistence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_DiskInfo_Persistence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_DiskInfo_Persistence));
  Resource_RevocableInfo_descriptor_ = Resource_descriptor_->nested_type(2);
  static const int Resource_RevocableInfo_offsets_[1] = {
  };
  Resource_RevocableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_RevocableInfo_descriptor_,
      Resource_RevocableInfo::default_instance_,
      Resource_RevocableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_RevocableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource_RevocableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource_RevocableInfo));
  TrafficControlStatistics_descriptor_ = file->message_type(22);
  static const int TrafficControlStatistics_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, backlog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, drops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, overlimits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, qlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, ratebps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, ratepps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, requeues_),
  };
  TrafficControlStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficControlStatistics_descriptor_,
      TrafficControlStatistics::default_instance_,
      TrafficControlStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficControlStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficControlStatistics));
  ResourceStatistics_descriptor_ = file->message_type(23);
  static const int ResourceStatistics_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_user_time_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_system_time_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_nr_periods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_nr_throttled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, cpus_throttled_time_secs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_total_memsw_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_limit_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_soft_limit_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_file_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_anon_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_cache_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_rss_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_mapped_file_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_swap_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_low_pressure_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_medium_pressure_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, mem_critical_pressure_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, disk_limit_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, disk_used_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, perf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_rx_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_rx_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_rx_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_rx_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tx_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tx_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tx_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tx_dropped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_rtt_microsecs_p50_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_rtt_microsecs_p90_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_rtt_microsecs_p95_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_rtt_microsecs_p99_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_active_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_tcp_time_wait_connections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, net_traffic_control_statistics_),
  };
  ResourceStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceStatistics_descriptor_,
      ResourceStatistics::default_instance_,
      ResourceStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceStatistics));
  ResourceUsage_descriptor_ = file->message_type(24);
  static const int ResourceUsage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage, executors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage, total_),
  };
  ResourceUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceUsage_descriptor_,
      ResourceUsage::default_instance_,
      ResourceUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceUsage));
  ResourceUsage_Executor_descriptor_ = ResourceUsage_descriptor_->nested_type(0);
  static const int ResourceUsage_Executor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage_Executor, executor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage_Executor, allocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage_Executor, statistics_),
  };
  ResourceUsage_Executor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceUsage_Executor_descriptor_,
      ResourceUsage_Executor::default_instance_,
      ResourceUsage_Executor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage_Executor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceUsage_Executor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceUsage_Executor));
  PerfStatistics_descriptor_ = file->message_type(25);
  static const int PerfStatistics_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, stalled_cycles_frontend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, stalled_cycles_backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, cache_references_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, cache_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, branches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, branch_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, bus_cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, ref_cycles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, cpu_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, task_clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, page_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, minor_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, major_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, context_switches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, cpu_migrations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, alignment_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, emulation_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_store_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_prefetches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_dcache_prefetch_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_icache_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_icache_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_icache_prefetches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, l1_icache_prefetch_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_store_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_prefetches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, llc_prefetch_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_store_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_prefetches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, dtlb_prefetch_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, itlb_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, itlb_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, branch_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, branch_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_load_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_stores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_store_misses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_prefetches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, node_prefetch_misses_),
  };
  PerfStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PerfStatistics_descriptor_,
      PerfStatistics::default_instance_,
      PerfStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerfStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PerfStatistics));
  Request_descriptor_ = file->message_type(26);
  static const int Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, resources_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Offer_descriptor_ = file->message_type(27);
  static const int Offer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, executor_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, unavailability_),
  };
  Offer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_descriptor_,
      Offer::default_instance_,
      Offer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer));
  Offer_Operation_descriptor_ = Offer_descriptor_->nested_type(0);
  static const int Offer_Operation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, unreserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, destroy_),
  };
  Offer_Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_descriptor_,
      Offer_Operation::default_instance_,
      Offer_Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation));
  Offer_Operation_Launch_descriptor_ = Offer_Operation_descriptor_->nested_type(0);
  static const int Offer_Operation_Launch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Launch, task_infos_),
  };
  Offer_Operation_Launch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_Launch_descriptor_,
      Offer_Operation_Launch::default_instance_,
      Offer_Operation_Launch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Launch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Launch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation_Launch));
  Offer_Operation_Reserve_descriptor_ = Offer_Operation_descriptor_->nested_type(1);
  static const int Offer_Operation_Reserve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Reserve, resources_),
  };
  Offer_Operation_Reserve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_Reserve_descriptor_,
      Offer_Operation_Reserve::default_instance_,
      Offer_Operation_Reserve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Reserve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Reserve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation_Reserve));
  Offer_Operation_Unreserve_descriptor_ = Offer_Operation_descriptor_->nested_type(2);
  static const int Offer_Operation_Unreserve_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Unreserve, resources_),
  };
  Offer_Operation_Unreserve_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_Unreserve_descriptor_,
      Offer_Operation_Unreserve::default_instance_,
      Offer_Operation_Unreserve_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Unreserve, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Unreserve, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation_Unreserve));
  Offer_Operation_Create_descriptor_ = Offer_Operation_descriptor_->nested_type(3);
  static const int Offer_Operation_Create_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Create, volumes_),
  };
  Offer_Operation_Create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_Create_descriptor_,
      Offer_Operation_Create::default_instance_,
      Offer_Operation_Create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation_Create));
  Offer_Operation_Destroy_descriptor_ = Offer_Operation_descriptor_->nested_type(4);
  static const int Offer_Operation_Destroy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Destroy, volumes_),
  };
  Offer_Operation_Destroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Offer_Operation_Destroy_descriptor_,
      Offer_Operation_Destroy::default_instance_,
      Offer_Operation_Destroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Destroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Offer_Operation_Destroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Offer_Operation_Destroy));
  Offer_Operation_Type_descriptor_ = Offer_Operation_descriptor_->enum_type(0);
  InverseOffer_descriptor_ = file->message_type(28);
  static const int InverseOffer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, unavailability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, resources_),
  };
  InverseOffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InverseOffer_descriptor_,
      InverseOffer::default_instance_,
      InverseOffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InverseOffer));
  TaskInfo_descriptor_ = file->message_type(29);
  static const int TaskInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, executor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, health_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, discovery_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
  TaskStatus_descriptor_ = file->message_type(30);
  static const int TaskStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, agent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, executor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, healthy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, labels_),
  };
  TaskStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStatus));
  TaskStatus_Source_descriptor_ = TaskStatus_descriptor_->enum_type(0);
  TaskStatus_Reason_descriptor_ = TaskStatus_descriptor_->enum_type(1);
  Filters_descriptor_ = file->message_type(31);
  static const int Filters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, refuse_seconds_),
  };
  Filters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Filters_descriptor_,
      Filters::default_instance_,
      Filters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Filters));
  Environment_descriptor_ = file->message_type(32);
  static const int Environment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, variables_),
  };
  Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Environment_descriptor_,
      Environment::default_instance_,
      Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Environment));
  Environment_Variable_descriptor_ = Environment_descriptor_->nested_type(0);
  static const int Environment_Variable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment_Variable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment_Variable, value_),
  };
  Environment_Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Environment_Variable_descriptor_,
      Environment_Variable::default_instance_,
      Environment_Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment_Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment_Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Environment_Variable));
  Parameter_descriptor_ = file->message_type(33);
  static const int Parameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, value_),
  };
  Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameter_descriptor_,
      Parameter::default_instance_,
      Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameter));
  Parameters_descriptor_ = file->message_type(34);
  static const int Parameters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, parameter_),
  };
  Parameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parameters_descriptor_,
      Parameters::default_instance_,
      Parameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parameters));
  Credential_descriptor_ = file->message_type(35);
  static const int Credential_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, principal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, secret_),
  };
  Credential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Credential_descriptor_,
      Credential::default_instance_,
      Credential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Credential));
  Credentials_descriptor_ = file->message_type(36);
  static const int Credentials_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, credentials_),
  };
  Credentials_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Credentials_descriptor_,
      Credentials::default_instance_,
      Credentials_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credentials, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Credentials));
  RateLimit_descriptor_ = file->message_type(37);
  static const int RateLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, principal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, capacity_),
  };
  RateLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RateLimit_descriptor_,
      RateLimit::default_instance_,
      RateLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RateLimit));
  RateLimits_descriptor_ = file->message_type(38);
  static const int RateLimits_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimits, limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimits, aggregate_default_qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimits, aggregate_default_capacity_),
  };
  RateLimits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RateLimits_descriptor_,
      RateLimits::default_instance_,
      RateLimits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateLimits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RateLimits));
  Image_descriptor_ = file->message_type(39);
  static const int Image_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, appc_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_AppC_descriptor_ = Image_descriptor_->nested_type(0);
  static const int Image_AppC_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_AppC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_AppC, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_AppC, labels_),
  };
  Image_AppC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_AppC_descriptor_,
      Image_AppC::default_instance_,
      Image_AppC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_AppC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_AppC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image_AppC));
  Image_Type_descriptor_ = Image_descriptor_->enum_type(0);
  Volume_descriptor_ = file->message_type(40);
  static const int Volume_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, container_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, host_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, image_),
  };
  Volume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Volume_descriptor_,
      Volume::default_instance_,
      Volume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Volume));
  Volume_Mode_descriptor_ = Volume_descriptor_->enum_type(0);
  ContainerInfo_descriptor_ = file->message_type(41);
  static const int ContainerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, volumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, docker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, mesos_),
  };
  ContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInfo_descriptor_,
      ContainerInfo::default_instance_,
      ContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInfo));
  ContainerInfo_DockerInfo_descriptor_ = ContainerInfo_descriptor_->nested_type(0);
  static const int ContainerInfo_DockerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, port_mappings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, privileged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, force_pull_image_),
  };
  ContainerInfo_DockerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInfo_DockerInfo_descriptor_,
      ContainerInfo_DockerInfo::default_instance_,
      ContainerInfo_DockerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInfo_DockerInfo));
  ContainerInfo_DockerInfo_PortMapping_descriptor_ = ContainerInfo_DockerInfo_descriptor_->nested_type(0);
  static const int ContainerInfo_DockerInfo_PortMapping_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo_PortMapping, host_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo_PortMapping, container_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo_PortMapping, protocol_),
  };
  ContainerInfo_DockerInfo_PortMapping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInfo_DockerInfo_PortMapping_descriptor_,
      ContainerInfo_DockerInfo_PortMapping::default_instance_,
      ContainerInfo_DockerInfo_PortMapping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo_PortMapping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_DockerInfo_PortMapping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInfo_DockerInfo_PortMapping));
  ContainerInfo_DockerInfo_Network_descriptor_ = ContainerInfo_DockerInfo_descriptor_->enum_type(0);
  ContainerInfo_MesosInfo_descriptor_ = ContainerInfo_descriptor_->nested_type(1);
  static const int ContainerInfo_MesosInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_MesosInfo, image_),
  };
  ContainerInfo_MesosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInfo_MesosInfo_descriptor_,
      ContainerInfo_MesosInfo::default_instance_,
      ContainerInfo_MesosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_MesosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo_MesosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInfo_MesosInfo));
  ContainerInfo_Type_descriptor_ = ContainerInfo_descriptor_->enum_type(0);
  Labels_descriptor_ = file->message_type(42);
  static const int Labels_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, labels_),
  };
  Labels_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Labels_descriptor_,
      Labels::default_instance_,
      Labels_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Labels, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Labels));
  Label_descriptor_ = file->message_type(43);
  static const int Label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, value_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
  Port_descriptor_ = file->message_type(44);
  static const int Port_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, protocol_),
  };
  Port_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Port_descriptor_,
      Port::default_instance_,
      Port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Port));
  Ports_descriptor_ = file->message_type(45);
  static const int Ports_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, ports_),
  };
  Ports_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ports_descriptor_,
      Ports::default_instance_,
      Ports_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ports, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ports));
  DiscoveryInfo_descriptor_ = file->message_type(46);
  static const int DiscoveryInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, labels_),
  };
  DiscoveryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscoveryInfo_descriptor_,
      DiscoveryInfo::default_instance_,
      DiscoveryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscoveryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscoveryInfo));
  DiscoveryInfo_Visibility_descriptor_ = DiscoveryInfo_descriptor_->enum_type(0);
  Status_descriptor_ = file->enum_type(0);
  TaskState_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2fv1_2fmesos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkID_descriptor_, &FrameworkID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfferID_descriptor_, &OfferID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentID_descriptor_, &AgentID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskID_descriptor_, &TaskID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutorID_descriptor_, &ExecutorID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerID_descriptor_, &ContainerID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeInfo_descriptor_, &TimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DurationInfo_descriptor_, &DurationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    URL_descriptor_, &URL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unavailability_descriptor_, &Unavailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineID_descriptor_, &MachineID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineInfo_descriptor_, &MachineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInfo_descriptor_, &FrameworkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInfo_Capability_descriptor_, &FrameworkInfo_Capability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthCheck_descriptor_, &HealthCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HealthCheck_HTTP_descriptor_, &HealthCheck_HTTP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInfo_descriptor_, &CommandInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInfo_URI_descriptor_, &CommandInfo_URI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandInfo_ContainerInfo_descriptor_, &CommandInfo_ContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutorInfo_descriptor_, &ExecutorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterInfo_descriptor_, &MasterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInfo_descriptor_, &AgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_Scalar_descriptor_, &Value_Scalar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_Range_descriptor_, &Value_Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_Ranges_descriptor_, &Value_Ranges::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_Set_descriptor_, &Value_Set::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_Text_descriptor_, &Value_Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attribute_descriptor_, &Attribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_ReservationInfo_descriptor_, &Resource_ReservationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_DiskInfo_descriptor_, &Resource_DiskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_DiskInfo_Persistence_descriptor_, &Resource_DiskInfo_Persistence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_RevocableInfo_descriptor_, &Resource_RevocableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficControlStatistics_descriptor_, &TrafficControlStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceStatistics_descriptor_, &ResourceStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceUsage_descriptor_, &ResourceUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceUsage_Executor_descriptor_, &ResourceUsage_Executor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PerfStatistics_descriptor_, &PerfStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_descriptor_, &Offer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_descriptor_, &Offer_Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_Launch_descriptor_, &Offer_Operation_Launch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_Reserve_descriptor_, &Offer_Operation_Reserve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_Unreserve_descriptor_, &Offer_Operation_Unreserve::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_Create_descriptor_, &Offer_Operation_Create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Offer_Operation_Destroy_descriptor_, &Offer_Operation_Destroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InverseOffer_descriptor_, &InverseOffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Filters_descriptor_, &Filters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Environment_descriptor_, &Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Environment_Variable_descriptor_, &Environment_Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameter_descriptor_, &Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parameters_descriptor_, &Parameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Credential_descriptor_, &Credential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Credentials_descriptor_, &Credentials::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RateLimit_descriptor_, &RateLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RateLimits_descriptor_, &RateLimits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_AppC_descriptor_, &Image_AppC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Volume_descriptor_, &Volume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInfo_descriptor_, &ContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInfo_DockerInfo_descriptor_, &ContainerInfo_DockerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInfo_DockerInfo_PortMapping_descriptor_, &ContainerInfo_DockerInfo_PortMapping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInfo_MesosInfo_descriptor_, &ContainerInfo_MesosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Labels_descriptor_, &Labels::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Port_descriptor_, &Port::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ports_descriptor_, &Ports::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscoveryInfo_descriptor_, &DiscoveryInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2fv1_2fmesos_2eproto() {
  delete FrameworkID::default_instance_;
  delete FrameworkID_reflection_;
  delete OfferID::default_instance_;
  delete OfferID_reflection_;
  delete AgentID::default_instance_;
  delete AgentID_reflection_;
  delete TaskID::default_instance_;
  delete TaskID_reflection_;
  delete ExecutorID::default_instance_;
  delete ExecutorID_reflection_;
  delete ContainerID::default_instance_;
  delete ContainerID_reflection_;
  delete TimeInfo::default_instance_;
  delete TimeInfo_reflection_;
  delete DurationInfo::default_instance_;
  delete DurationInfo_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete URL::default_instance_;
  delete URL_reflection_;
  delete Unavailability::default_instance_;
  delete Unavailability_reflection_;
  delete MachineID::default_instance_;
  delete MachineID_reflection_;
  delete MachineInfo::default_instance_;
  delete MachineInfo_reflection_;
  delete FrameworkInfo::default_instance_;
  delete FrameworkInfo_reflection_;
  delete FrameworkInfo::_default_role_;
  delete FrameworkInfo_Capability::default_instance_;
  delete FrameworkInfo_Capability_reflection_;
  delete HealthCheck::default_instance_;
  delete HealthCheck_reflection_;
  delete HealthCheck_HTTP::default_instance_;
  delete HealthCheck_HTTP_reflection_;
  delete HealthCheck_HTTP::_default_path_;
  delete CommandInfo::default_instance_;
  delete CommandInfo_reflection_;
  delete CommandInfo_URI::default_instance_;
  delete CommandInfo_URI_reflection_;
  delete CommandInfo_ContainerInfo::default_instance_;
  delete CommandInfo_ContainerInfo_reflection_;
  delete ExecutorInfo::default_instance_;
  delete ExecutorInfo_reflection_;
  delete MasterInfo::default_instance_;
  delete MasterInfo_reflection_;
  delete AgentInfo::default_instance_;
  delete AgentInfo_reflection_;
  delete Value::default_instance_;
  delete Value_reflection_;
  delete Value_Scalar::default_instance_;
  delete Value_Scalar_reflection_;
  delete Value_Range::default_instance_;
  delete Value_Range_reflection_;
  delete Value_Ranges::default_instance_;
  delete Value_Ranges_reflection_;
  delete Value_Set::default_instance_;
  delete Value_Set_reflection_;
  delete Value_Text::default_instance_;
  delete Value_Text_reflection_;
  delete Attribute::default_instance_;
  delete Attribute_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete Resource::_default_role_;
  delete Resource_ReservationInfo::default_instance_;
  delete Resource_ReservationInfo_reflection_;
  delete Resource_DiskInfo::default_instance_;
  delete Resource_DiskInfo_reflection_;
  delete Resource_DiskInfo_Persistence::default_instance_;
  delete Resource_DiskInfo_Persistence_reflection_;
  delete Resource_RevocableInfo::default_instance_;
  delete Resource_RevocableInfo_reflection_;
  delete TrafficControlStatistics::default_instance_;
  delete TrafficControlStatistics_reflection_;
  delete ResourceStatistics::default_instance_;
  delete ResourceStatistics_reflection_;
  delete ResourceUsage::default_instance_;
  delete ResourceUsage_reflection_;
  delete ResourceUsage_Executor::default_instance_;
  delete ResourceUsage_Executor_reflection_;
  delete PerfStatistics::default_instance_;
  delete PerfStatistics_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Offer::default_instance_;
  delete Offer_reflection_;
  delete Offer_Operation::default_instance_;
  delete Offer_Operation_reflection_;
  delete Offer_Operation_Launch::default_instance_;
  delete Offer_Operation_Launch_reflection_;
  delete Offer_Operation_Reserve::default_instance_;
  delete Offer_Operation_Reserve_reflection_;
  delete Offer_Operation_Unreserve::default_instance_;
  delete Offer_Operation_Unreserve_reflection_;
  delete Offer_Operation_Create::default_instance_;
  delete Offer_Operation_Create_reflection_;
  delete Offer_Operation_Destroy::default_instance_;
  delete Offer_Operation_Destroy_reflection_;
  delete InverseOffer::default_instance_;
  delete InverseOffer_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete Filters::default_instance_;
  delete Filters_reflection_;
  delete Environment::default_instance_;
  delete Environment_reflection_;
  delete Environment_Variable::default_instance_;
  delete Environment_Variable_reflection_;
  delete Parameter::default_instance_;
  delete Parameter_reflection_;
  delete Parameters::default_instance_;
  delete Parameters_reflection_;
  delete Credential::default_instance_;
  delete Credential_reflection_;
  delete Credentials::default_instance_;
  delete Credentials_reflection_;
  delete RateLimit::default_instance_;
  delete RateLimit_reflection_;
  delete RateLimits::default_instance_;
  delete RateLimits_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Image_AppC::default_instance_;
  delete Image_AppC_reflection_;
  delete Volume::default_instance_;
  delete Volume_reflection_;
  delete ContainerInfo::default_instance_;
  delete ContainerInfo_reflection_;
  delete ContainerInfo_DockerInfo::default_instance_;
  delete ContainerInfo_DockerInfo_reflection_;
  delete ContainerInfo_DockerInfo_PortMapping::default_instance_;
  delete ContainerInfo_DockerInfo_PortMapping_reflection_;
  delete ContainerInfo_MesosInfo::default_instance_;
  delete ContainerInfo_MesosInfo_reflection_;
  delete Labels::default_instance_;
  delete Labels_reflection_;
  delete Label::default_instance_;
  delete Label_reflection_;
  delete Port::default_instance_;
  delete Port_reflection_;
  delete Ports::default_instance_;
  delete Ports_reflection_;
  delete DiscoveryInfo::default_instance_;
  delete DiscoveryInfo_reflection_;
}

void protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024mesos/v1/mesos.proto\022\010mesos.v1\"\034\n\013Fram"
    "eworkID\022\r\n\005value\030\001 \002(\t\"\030\n\007OfferID\022\r\n\005val"
    "ue\030\001 \002(\t\"\030\n\007AgentID\022\r\n\005value\030\001 \002(\t\"\027\n\006Ta"
    "skID\022\r\n\005value\030\001 \002(\t\"\033\n\nExecutorID\022\r\n\005val"
    "ue\030\001 \002(\t\"\034\n\013ContainerID\022\r\n\005value\030\001 \002(\t\"\037"
    "\n\010TimeInfo\022\023\n\013nanoseconds\030\001 \002(\003\"#\n\014Durat"
    "ionInfo\022\023\n\013nanoseconds\030\001 \002(\003\"5\n\007Address\022"
    "\020\n\010hostname\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 "
    "\002(\005\"}\n\003URL\022\016\n\006scheme\030\001 \002(\t\022\"\n\007address\030\002 "
    "\002(\0132\021.mesos.v1.Address\022\014\n\004path\030\003 \001(\t\022\"\n\005"
    "query\030\004 \003(\0132\023.mesos.v1.Parameter\022\020\n\010frag"
    "ment\030\005 \001(\t\"]\n\016Unavailability\022!\n\005start\030\001 "
    "\002(\0132\022.mesos.v1.TimeInfo\022(\n\010duration\030\002 \001("
    "\0132\026.mesos.v1.DurationInfo\")\n\tMachineID\022\020"
    "\n\010hostname\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\"\262\001\n\013Machine"
    "Info\022\037\n\002id\030\001 \002(\0132\023.mesos.v1.MachineID\022(\n"
    "\004mode\030\002 \001(\0162\032.mesos.v1.MachineInfo.Mode\022"
    "0\n\016unavailability\030\003 \001(\0132\030.mesos.v1.Unava"
    "ilability\"&\n\004Mode\022\006\n\002UP\020\001\022\014\n\010DRAINING\020\002\022"
    "\010\n\004DOWN\020\003\"\221\003\n\rFrameworkInfo\022\014\n\004user\030\001 \002("
    "\t\022\014\n\004name\030\002 \002(\t\022!\n\002id\030\003 \001(\0132\025.mesos.v1.F"
    "rameworkID\022\033\n\020failover_timeout\030\004 \001(\001:\0010\022"
    "\031\n\ncheckpoint\030\005 \001(\010:\005false\022\017\n\004role\030\006 \001(\t"
    ":\001*\022\020\n\010hostname\030\007 \001(\t\022\021\n\tprincipal\030\010 \001(\t"
    "\022\021\n\twebui_url\030\t \001(\t\0228\n\014capabilities\030\n \003("
    "\0132\".mesos.v1.FrameworkInfo.Capability\022 \n"
    "\006labels\030\013 \001(\0132\020.mesos.v1.Labels\032d\n\nCapab"
    "ility\0225\n\004type\030\001 \002(\0162\'.mesos.v1.Framework"
    "Info.Capability.Type\"\037\n\004Type\022\027\n\023REVOCABL"
    "E_RESOURCES\020\001\"\261\002\n\013HealthCheck\022(\n\004http\030\001 "
    "\001(\0132\032.mesos.v1.HealthCheck.HTTP\022\031\n\rdelay"
    "_seconds\030\002 \001(\001:\00215\022\034\n\020interval_seconds\030\003"
    " \001(\001:\00210\022\033\n\017timeout_seconds\030\004 \001(\001:\00220\022\037\n"
    "\024consecutive_failures\030\005 \001(\r:\0013\022 \n\024grace_"
    "period_seconds\030\006 \001(\001:\00210\022&\n\007command\030\007 \001("
    "\0132\025.mesos.v1.CommandInfo\0327\n\004HTTP\022\014\n\004port"
    "\030\001 \002(\r\022\017\n\004path\030\002 \001(\t:\001/\022\020\n\010statuses\030\004 \003("
    "\r\"\340\002\n\013CommandInfo\0226\n\tcontainer\030\004 \001(\0132#.m"
    "esos.v1.CommandInfo.ContainerInfo\022\'\n\004uri"
    "s\030\001 \003(\0132\031.mesos.v1.CommandInfo.URI\022*\n\013en"
    "vironment\030\002 \001(\0132\025.mesos.v1.Environment\022\023"
    "\n\005shell\030\006 \001(\010:\004true\022\r\n\005value\030\003 \001(\t\022\021\n\tar"
    "guments\030\007 \003(\t\022\014\n\004user\030\005 \001(\t\032N\n\003URI\022\r\n\005va"
    "lue\030\001 \002(\t\022\022\n\nexecutable\030\002 \001(\010\022\025\n\007extract"
    "\030\003 \001(\010:\004true\022\r\n\005cache\030\004 \001(\010\032/\n\rContainer"
    "Info\022\r\n\005image\030\001 \002(\t\022\017\n\007options\030\002 \003(\t\"\271\002\n"
    "\014ExecutorInfo\022)\n\013executor_id\030\001 \002(\0132\024.mes"
    "os.v1.ExecutorID\022+\n\014framework_id\030\010 \001(\0132\025"
    ".mesos.v1.FrameworkID\022&\n\007command\030\007 \002(\0132\025"
    ".mesos.v1.CommandInfo\022*\n\tcontainer\030\013 \001(\013"
    "2\027.mesos.v1.ContainerInfo\022%\n\tresources\030\005"
    " \003(\0132\022.mesos.v1.Resource\022\014\n\004name\030\t \001(\t\022\016"
    "\n\006source\030\n \001(\t\022\014\n\004data\030\004 \001(\014\022*\n\tdiscover"
    "y\030\014 \001(\0132\027.mesos.v1.DiscoveryInfo\"\214\001\n\nMas"
    "terInfo\022\n\n\002id\030\001 \002(\t\022\n\n\002ip\030\002 \002(\r\022\022\n\004port\030"
    "\003 \002(\r:\0045050\022\013\n\003pid\030\004 \001(\t\022\020\n\010hostname\030\005 \001"
    "(\t\022\017\n\007version\030\006 \001(\t\022\"\n\007address\030\007 \001(\0132\021.m"
    "esos.v1.Address\"\240\001\n\tAgentInfo\022\020\n\010hostnam"
    "e\030\001 \002(\t\022\022\n\004port\030\010 \001(\005:\0045051\022%\n\tresources"
    "\030\003 \003(\0132\022.mesos.v1.Resource\022\'\n\nattributes"
    "\030\005 \003(\0132\023.mesos.v1.Attribute\022\035\n\002id\030\006 \001(\0132"
    "\021.mesos.v1.AgentID\"\216\003\n\005Value\022\"\n\004type\030\001 \002"
    "(\0162\024.mesos.v1.Value.Type\022&\n\006scalar\030\002 \001(\013"
    "2\026.mesos.v1.Value.Scalar\022&\n\006ranges\030\003 \001(\013"
    "2\026.mesos.v1.Value.Ranges\022 \n\003set\030\004 \001(\0132\023."
    "mesos.v1.Value.Set\022\"\n\004text\030\005 \001(\0132\024.mesos"
    ".v1.Value.Text\032\027\n\006Scalar\022\r\n\005value\030\001 \002(\001\032"
    "#\n\005Range\022\r\n\005begin\030\001 \002(\004\022\013\n\003end\030\002 \002(\004\032.\n\006"
    "Ranges\022$\n\005range\030\001 \003(\0132\025.mesos.v1.Value.R"
    "ange\032\023\n\003Set\022\014\n\004item\030\001 \003(\t\032\025\n\004Text\022\r\n\005val"
    "ue\030\001 \002(\t\"1\n\004Type\022\n\n\006SCALAR\020\000\022\n\n\006RANGES\020\001"
    "\022\007\n\003SET\020\002\022\010\n\004TEXT\020\003\"\323\001\n\tAttribute\022\014\n\004nam"
    "e\030\001 \002(\t\022\"\n\004type\030\002 \002(\0162\024.mesos.v1.Value.T"
    "ype\022&\n\006scalar\030\003 \001(\0132\026.mesos.v1.Value.Sca"
    "lar\022&\n\006ranges\030\004 \001(\0132\026.mesos.v1.Value.Ran"
    "ges\022 \n\003set\030\006 \001(\0132\023.mesos.v1.Value.Set\022\"\n"
    "\004text\030\005 \001(\0132\024.mesos.v1.Value.Text\"\227\004\n\010Re"
    "source\022\014\n\004name\030\001 \002(\t\022\"\n\004type\030\002 \002(\0162\024.mes"
    "os.v1.Value.Type\022&\n\006scalar\030\003 \001(\0132\026.mesos"
    ".v1.Value.Scalar\022&\n\006ranges\030\004 \001(\0132\026.mesos"
    ".v1.Value.Ranges\022 \n\003set\030\005 \001(\0132\023.mesos.v1"
    ".Value.Set\022\017\n\004role\030\006 \001(\t:\001*\0227\n\013reservati"
    "on\030\010 \001(\0132\".mesos.v1.Resource.Reservation"
    "Info\022)\n\004disk\030\007 \001(\0132\033.mesos.v1.Resource.D"
    "iskInfo\0223\n\trevocable\030\t \001(\0132 .mesos.v1.Re"
    "source.RevocableInfo\032$\n\017ReservationInfo\022"
    "\021\n\tprincipal\030\001 \002(\t\032\205\001\n\010DiskInfo\022<\n\013persi"
    "stence\030\001 \001(\0132\'.mesos.v1.Resource.DiskInf"
    "o.Persistence\022 \n\006volume\030\002 \001(\0132\020.mesos.v1"
    ".Volume\032\031\n\013Persistence\022\n\n\002id\030\001 \002(\t\032\017\n\rRe"
    "vocableInfo\"\274\001\n\030TrafficControlStatistics"
    "\022\n\n\002id\030\001 \002(\t\022\017\n\007backlog\030\002 \001(\004\022\r\n\005bytes\030\003"
    " \001(\004\022\r\n\005drops\030\004 \001(\004\022\022\n\noverlimits\030\005 \001(\004\022"
    "\017\n\007packets\030\006 \001(\004\022\014\n\004qlen\030\007 \001(\004\022\017\n\007ratebp"
    "s\030\010 \001(\004\022\017\n\007ratepps\030\t \001(\004\022\020\n\010requeues\030\n \001"
    "(\004\"\235\t\n\022ResourceStatistics\022\021\n\ttimestamp\030\001"
    " \002(\001\022\021\n\tprocesses\030\036 \001(\r\022\017\n\007threads\030\037 \001(\r"
    "\022\033\n\023cpus_user_time_secs\030\002 \001(\001\022\035\n\025cpus_sy"
    "stem_time_secs\030\003 \001(\001\022\022\n\ncpus_limit\030\004 \001(\001"
    "\022\027\n\017cpus_nr_periods\030\007 \001(\r\022\031\n\021cpus_nr_thr"
    "ottled\030\010 \001(\r\022 \n\030cpus_throttled_time_secs"
    "\030\t \001(\001\022\027\n\017mem_total_bytes\030$ \001(\004\022\035\n\025mem_t"
    "otal_memsw_bytes\030% \001(\004\022\027\n\017mem_limit_byte"
    "s\030\006 \001(\004\022\034\n\024mem_soft_limit_bytes\030& \001(\004\022\026\n"
    "\016mem_file_bytes\030\n \001(\004\022\026\n\016mem_anon_bytes\030"
    "\013 \001(\004\022\027\n\017mem_cache_bytes\030\' \001(\004\022\025\n\rmem_rs"
    "s_bytes\030\005 \001(\004\022\035\n\025mem_mapped_file_bytes\030\014"
    " \001(\004\022\026\n\016mem_swap_bytes\030( \001(\004\022 \n\030mem_low_"
    "pressure_counter\030  \001(\004\022#\n\033mem_medium_pre"
    "ssure_counter\030! \001(\004\022%\n\035mem_critical_pres"
    "sure_counter\030\" \001(\004\022\030\n\020disk_limit_bytes\030\032"
    " \001(\004\022\027\n\017disk_used_bytes\030\033 \001(\004\022&\n\004perf\030\r "
    "\001(\0132\030.mesos.v1.PerfStatistics\022\026\n\016net_rx_"
    "packets\030\016 \001(\004\022\024\n\014net_rx_bytes\030\017 \001(\004\022\025\n\rn"
    "et_rx_errors\030\020 \001(\004\022\026\n\016net_rx_dropped\030\021 \001"
    "(\004\022\026\n\016net_tx_packets\030\022 \001(\004\022\024\n\014net_tx_byt"
    "es\030\023 \001(\004\022\025\n\rnet_tx_errors\030\024 \001(\004\022\026\n\016net_t"
    "x_dropped\030\025 \001(\004\022!\n\031net_tcp_rtt_microsecs"
    "_p50\030\026 \001(\001\022!\n\031net_tcp_rtt_microsecs_p90\030"
    "\027 \001(\001\022!\n\031net_tcp_rtt_microsecs_p95\030\030 \001(\001"
    "\022!\n\031net_tcp_rtt_microsecs_p99\030\031 \001(\001\022\"\n\032n"
    "et_tcp_active_connections\030\034 \001(\001\022%\n\035net_t"
    "cp_time_wait_connections\030\035 \001(\001\022J\n\036net_tr"
    "affic_control_statistics\030# \003(\0132\".mesos.v"
    "1.TrafficControlStatistics\"\374\001\n\rResourceU"
    "sage\0223\n\texecutors\030\001 \003(\0132 .mesos.v1.Resou"
    "rceUsage.Executor\022!\n\005total\030\002 \003(\0132\022.mesos"
    ".v1.Resource\032\222\001\n\010Executor\022-\n\rexecutor_in"
    "fo\030\001 \002(\0132\026.mesos.v1.ExecutorInfo\022%\n\tallo"
    "cated\030\002 \003(\0132\022.mesos.v1.Resource\0220\n\nstati"
    "stics\030\003 \001(\0132\034.mesos.v1.ResourceStatistic"
    "s\"\260\n\n\016PerfStatistics\022\021\n\ttimestamp\030\001 \002(\001\022"
    "\020\n\010duration\030\002 \002(\001\022\016\n\006cycles\030\003 \001(\004\022\037\n\027sta"
    "lled_cycles_frontend\030\004 \001(\004\022\036\n\026stalled_cy"
    "cles_backend\030\005 \001(\004\022\024\n\014instructions\030\006 \001(\004"
    "\022\030\n\020cache_references\030\007 \001(\004\022\024\n\014cache_miss"
    "es\030\010 \001(\004\022\020\n\010branches\030\t \001(\004\022\025\n\rbranch_mis"
    "ses\030\n \001(\004\022\022\n\nbus_cycles\030\013 \001(\004\022\022\n\nref_cyc"
    "les\030\014 \001(\004\022\021\n\tcpu_clock\030\r \001(\001\022\022\n\ntask_clo"
    "ck\030\016 \001(\001\022\023\n\013page_faults\030\017 \001(\004\022\024\n\014minor_f"
    "aults\030\020 \001(\004\022\024\n\014major_faults\030\021 \001(\004\022\030\n\020con"
    "text_switches\030\022 \001(\004\022\026\n\016cpu_migrations\030\023 "
    "\001(\004\022\030\n\020alignment_faults\030\024 \001(\004\022\030\n\020emulati"
    "on_faults\030\025 \001(\004\022\027\n\017l1_dcache_loads\030\026 \001(\004"
    "\022\035\n\025l1_dcache_load_misses\030\027 \001(\004\022\030\n\020l1_dc"
    "ache_stores\030\030 \001(\004\022\036\n\026l1_dcache_store_mis"
    "ses\030\031 \001(\004\022\034\n\024l1_dcache_prefetches\030\032 \001(\004\022"
    "!\n\031l1_dcache_prefetch_misses\030\033 \001(\004\022\027\n\017l1"
    "_icache_loads\030\034 \001(\004\022\035\n\025l1_icache_load_mi"
    "sses\030\035 \001(\004\022\034\n\024l1_icache_prefetches\030\036 \001(\004"
    "\022!\n\031l1_icache_prefetch_misses\030\037 \001(\004\022\021\n\tl"
    "lc_loads\030  \001(\004\022\027\n\017llc_load_misses\030! \001(\004\022"
    "\022\n\nllc_stores\030\" \001(\004\022\030\n\020llc_store_misses\030"
    "# \001(\004\022\026\n\016llc_prefetches\030$ \001(\004\022\033\n\023llc_pre"
    "fetch_misses\030% \001(\004\022\022\n\ndtlb_loads\030& \001(\004\022\030"
    "\n\020dtlb_load_misses\030\' \001(\004\022\023\n\013dtlb_stores\030"
    "( \001(\004\022\031\n\021dtlb_store_misses\030) \001(\004\022\027\n\017dtlb"
    "_prefetches\030* \001(\004\022\034\n\024dtlb_prefetch_misse"
    "s\030+ \001(\004\022\022\n\nitlb_loads\030, \001(\004\022\030\n\020itlb_load"
    "_misses\030- \001(\004\022\024\n\014branch_loads\030. \001(\004\022\032\n\022b"
    "ranch_load_misses\030/ \001(\004\022\022\n\nnode_loads\0300 "
    "\001(\004\022\030\n\020node_load_misses\0301 \001(\004\022\023\n\013node_st"
    "ores\0302 \001(\004\022\031\n\021node_store_misses\0303 \001(\004\022\027\n"
    "\017node_prefetches\0304 \001(\004\022\034\n\024node_prefetch_"
    "misses\0305 \001(\004\"U\n\007Request\022#\n\010agent_id\030\001 \001("
    "\0132\021.mesos.v1.AgentID\022%\n\tresources\030\002 \003(\0132"
    "\022.mesos.v1.Resource\"\324\007\n\005Offer\022\035\n\002id\030\001 \002("
    "\0132\021.mesos.v1.OfferID\022+\n\014framework_id\030\002 \002"
    "(\0132\025.mesos.v1.FrameworkID\022#\n\010agent_id\030\003 "
    "\002(\0132\021.mesos.v1.AgentID\022\020\n\010hostname\030\004 \002(\t"
    "\022\032\n\003url\030\010 \001(\0132\r.mesos.v1.URL\022%\n\tresource"
    "s\030\005 \003(\0132\022.mesos.v1.Resource\022\'\n\nattribute"
    "s\030\007 \003(\0132\023.mesos.v1.Attribute\022*\n\014executor"
    "_ids\030\006 \003(\0132\024.mesos.v1.ExecutorID\0220\n\016unav"
    "ailability\030\t \001(\0132\030.mesos.v1.Unavailabili"
    "ty\032\375\004\n\tOperation\022,\n\004type\030\001 \002(\0162\036.mesos.v"
    "1.Offer.Operation.Type\0220\n\006launch\030\002 \001(\0132 "
    ".mesos.v1.Offer.Operation.Launch\0222\n\007rese"
    "rve\030\003 \001(\0132!.mesos.v1.Offer.Operation.Res"
    "erve\0226\n\tunreserve\030\004 \001(\0132#.mesos.v1.Offer"
    ".Operation.Unreserve\0220\n\006create\030\005 \001(\0132 .m"
    "esos.v1.Offer.Operation.Create\0222\n\007destro"
    "y\030\006 \001(\0132!.mesos.v1.Offer.Operation.Destr"
    "oy\0320\n\006Launch\022&\n\ntask_infos\030\001 \003(\0132\022.mesos"
    ".v1.TaskInfo\0320\n\007Reserve\022%\n\tresources\030\001 \003"
    "(\0132\022.mesos.v1.Resource\0322\n\tUnreserve\022%\n\tr"
    "esources\030\001 \003(\0132\022.mesos.v1.Resource\032-\n\006Cr"
    "eate\022#\n\007volumes\030\001 \003(\0132\022.mesos.v1.Resourc"
    "e\032.\n\007Destroy\022#\n\007volumes\030\001 \003(\0132\022.mesos.v1"
    ".Resource\"G\n\004Type\022\n\n\006LAUNCH\020\001\022\013\n\007RESERVE"
    "\020\002\022\r\n\tUNRESERVE\020\003\022\n\n\006CREATE\020\004\022\013\n\007DESTROY"
    "\020\005\"\364\001\n\014InverseOffer\022\035\n\002id\030\001 \002(\0132\021.mesos."
    "v1.OfferID\022\032\n\003url\030\002 \001(\0132\r.mesos.v1.URL\022+"
    "\n\014framework_id\030\003 \002(\0132\025.mesos.v1.Framewor"
    "kID\022#\n\010agent_id\030\004 \001(\0132\021.mesos.v1.AgentID"
    "\0220\n\016unavailability\030\005 \002(\0132\030.mesos.v1.Unav"
    "ailability\022%\n\tresources\030\006 \003(\0132\022.mesos.v1"
    ".Resource\"\216\003\n\010TaskInfo\022\014\n\004name\030\001 \002(\t\022!\n\007"
    "task_id\030\002 \002(\0132\020.mesos.v1.TaskID\022#\n\010agent"
    "_id\030\003 \002(\0132\021.mesos.v1.AgentID\022%\n\tresource"
    "s\030\004 \003(\0132\022.mesos.v1.Resource\022(\n\010executor\030"
    "\005 \001(\0132\026.mesos.v1.ExecutorInfo\022&\n\007command"
    "\030\007 \001(\0132\025.mesos.v1.CommandInfo\022*\n\tcontain"
    "er\030\t \001(\0132\027.mesos.v1.ContainerInfo\022\014\n\004dat"
    "a\030\006 \001(\014\022+\n\014health_check\030\010 \001(\0132\025.mesos.v1"
    ".HealthCheck\022 \n\006labels\030\n \001(\0132\020.mesos.v1."
    "Labels\022*\n\tdiscovery\030\013 \001(\0132\027.mesos.v1.Dis"
    "coveryInfo\"\330\t\n\nTaskStatus\022!\n\007task_id\030\001 \002"
    "(\0132\020.mesos.v1.TaskID\022\"\n\005state\030\002 \002(\0162\023.me"
    "sos.v1.TaskState\022\017\n\007message\030\004 \001(\t\022+\n\006sou"
    "rce\030\t \001(\0162\033.mesos.v1.TaskStatus.Source\022+"
    "\n\006reason\030\n \001(\0162\033.mesos.v1.TaskStatus.Rea"
    "son\022\014\n\004data\030\003 \001(\014\022#\n\010agent_id\030\005 \001(\0132\021.me"
    "sos.v1.AgentID\022)\n\013executor_id\030\007 \001(\0132\024.me"
    "sos.v1.ExecutorID\022\021\n\ttimestamp\030\006 \001(\001\022\014\n\004"
    "uuid\030\013 \001(\014\022\017\n\007healthy\030\010 \001(\010\022 \n\006labels\030\014 "
    "\001(\0132\020.mesos.v1.Labels\"B\n\006Source\022\021\n\rSOURC"
    "E_MASTER\020\000\022\020\n\014SOURCE_AGENT\020\001\022\023\n\017SOURCE_E"
    "XECUTOR\020\002\"\241\006\n\006Reason\022\"\n\036REASON_COMMAND_E"
    "XECUTOR_FAILED\020\000\022\"\n\036REASON_CONTAINER_LAU"
    "NCH_FAILED\020\025\022\037\n\033REASON_CONTAINER_LIMITAT"
    "ION\020\023\022$\n REASON_CONTAINER_LIMITATION_DIS"
    "K\020\024\022&\n\"REASON_CONTAINER_LIMITATION_MEMOR"
    "Y\020\010\022\036\n\032REASON_CONTAINER_PREEMPTED\020\021\022\"\n\036R"
    "EASON_CONTAINER_UPDATE_FAILED\020\026\022(\n$REASO"
    "N_EXECUTOR_REGISTRATION_TIMEOUT\020\027\022*\n&REA"
    "SON_EXECUTOR_REREGISTRATION_TIMEOUT\020\030\022\036\n"
    "\032REASON_EXECUTOR_TERMINATED\020\001\022 \n\034REASON_"
    "EXECUTOR_UNREGISTERED\020\002\022\034\n\030REASON_FRAMEW"
    "ORK_REMOVED\020\003\022\023\n\017REASON_GC_ERROR\020\004\022\036\n\032RE"
    "ASON_INVALID_FRAMEWORKID\020\005\022\031\n\025REASON_INV"
    "ALID_OFFERS\020\006\022\036\n\032REASON_MASTER_DISCONNEC"
    "TED\020\007\022\031\n\025REASON_RECONCILIATION\020\t\022\034\n\030REAS"
    "ON_RESOURCES_UNKNOWN\020\022\022\035\n\031REASON_AGENT_D"
    "ISCONNECTED\020\n\022\030\n\024REASON_AGENT_REMOVED\020\013\022"
    "\032\n\026REASON_AGENT_RESTARTED\020\014\022\030\n\024REASON_AG"
    "ENT_UNKNOWN\020\r\022\027\n\023REASON_TASK_INVALID\020\016\022\034"
    "\n\030REASON_TASK_UNAUTHORIZED\020\017\022\027\n\023REASON_T"
    "ASK_UNKNOWN\020\020\"$\n\007Filters\022\031\n\016refuse_secon"
    "ds\030\001 \001(\001:\0015\"i\n\013Environment\0221\n\tvariables\030"
    "\001 \003(\0132\036.mesos.v1.Environment.Variable\032\'\n"
    "\010Variable\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\'"
    "\n\tParameter\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\""
    "4\n\nParameters\022&\n\tparameter\030\001 \003(\0132\023.mesos"
    ".v1.Parameter\"/\n\nCredential\022\021\n\tprincipal"
    "\030\001 \002(\t\022\016\n\006secret\030\002 \001(\t\"8\n\013Credentials\022)\n"
    "\013credentials\030\001 \003(\0132\024.mesos.v1.Credential"
    "\"=\n\tRateLimit\022\013\n\003qps\030\001 \001(\001\022\021\n\tprincipal\030"
    "\002 \002(\t\022\020\n\010capacity\030\003 \001(\004\"t\n\nRateLimits\022#\n"
    "\006limits\030\001 \003(\0132\023.mesos.v1.RateLimit\022\035\n\025ag"
    "gregate_default_qps\030\002 \001(\001\022\"\n\032aggregate_d"
    "efault_capacity\030\003 \001(\004\"\245\001\n\005Image\022\"\n\004type\030"
    "\001 \002(\0162\024.mesos.v1.Image.Type\022\"\n\004appc\030\002 \001("
    "\0132\024.mesos.v1.Image.AppC\032B\n\004AppC\022\014\n\004name\030"
    "\001 \002(\t\022\n\n\002id\030\002 \002(\t\022 \n\006labels\030\003 \001(\0132\020.meso"
    "s.v1.Labels\"\020\n\004Type\022\010\n\004APPC\020\001\"\220\001\n\006Volume"
    "\022#\n\004mode\030\003 \002(\0162\025.mesos.v1.Volume.Mode\022\026\n"
    "\016container_path\030\001 \002(\t\022\021\n\thost_path\030\002 \001(\t"
    "\022\036\n\005image\030\004 \001(\0132\017.mesos.v1.Image\"\026\n\004Mode"
    "\022\006\n\002RW\020\001\022\006\n\002RO\020\002\"\237\005\n\rContainerInfo\022*\n\004ty"
    "pe\030\001 \002(\0162\034.mesos.v1.ContainerInfo.Type\022!"
    "\n\007volumes\030\002 \003(\0132\020.mesos.v1.Volume\022\020\n\010hos"
    "tname\030\004 \001(\t\0222\n\006docker\030\003 \001(\0132\".mesos.v1.C"
    "ontainerInfo.DockerInfo\0220\n\005mesos\030\005 \001(\0132!"
    ".mesos.v1.ContainerInfo.MesosInfo\032\372\002\n\nDo"
    "ckerInfo\022\r\n\005image\030\001 \002(\t\022A\n\007network\030\002 \001(\016"
    "2*.mesos.v1.ContainerInfo.DockerInfo.Net"
    "work:\004HOST\022E\n\rport_mappings\030\003 \003(\0132..meso"
    "s.v1.ContainerInfo.DockerInfo.PortMappin"
    "g\022\031\n\nprivileged\030\004 \001(\010:\005false\022\'\n\nparamete"
    "rs\030\005 \003(\0132\023.mesos.v1.Parameter\022\030\n\020force_p"
    "ull_image\030\006 \001(\010\032J\n\013PortMapping\022\021\n\thost_p"
    "ort\030\001 \002(\r\022\026\n\016container_port\030\002 \002(\r\022\020\n\010pro"
    "tocol\030\003 \001(\t\")\n\007Network\022\010\n\004HOST\020\001\022\n\n\006BRID"
    "GE\020\002\022\010\n\004NONE\020\003\032+\n\tMesosInfo\022\036\n\005image\030\001 \001"
    "(\0132\017.mesos.v1.Image\"\035\n\004Type\022\n\n\006DOCKER\020\001\022"
    "\t\n\005MESOS\020\002\")\n\006Labels\022\037\n\006labels\030\001 \003(\0132\017.m"
    "esos.v1.Label\"#\n\005Label\022\013\n\003key\030\001 \002(\t\022\r\n\005v"
    "alue\030\002 \001(\t\"6\n\004Port\022\016\n\006number\030\001 \002(\r\022\014\n\004na"
    "me\030\002 \001(\t\022\020\n\010protocol\030\003 \001(\t\"&\n\005Ports\022\035\n\005p"
    "orts\030\001 \003(\0132\016.mesos.v1.Port\"\207\002\n\rDiscovery"
    "Info\0226\n\nvisibility\030\001 \002(\0162\".mesos.v1.Disc"
    "overyInfo.Visibility\022\014\n\004name\030\002 \001(\t\022\023\n\013en"
    "vironment\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\017\n\007ver"
    "sion\030\005 \001(\t\022\036\n\005ports\030\006 \001(\0132\017.mesos.v1.Por"
    "ts\022 \n\006labels\030\007 \001(\0132\020.mesos.v1.Labels\"6\n\n"
    "Visibility\022\r\n\tFRAMEWORK\020\000\022\013\n\007CLUSTER\020\001\022\014"
    "\n\010EXTERNAL\020\002*\\\n\006Status\022\026\n\022DRIVER_NOT_STA"
    "RTED\020\001\022\022\n\016DRIVER_RUNNING\020\002\022\022\n\016DRIVER_ABO"
    "RTED\020\003\022\022\n\016DRIVER_STOPPED\020\004*\226\001\n\tTaskState"
    "\022\020\n\014TASK_STAGING\020\006\022\021\n\rTASK_STARTING\020\000\022\020\n"
    "\014TASK_RUNNING\020\001\022\021\n\rTASK_FINISHED\020\002\022\017\n\013TA"
    "SK_FAILED\020\003\022\017\n\013TASK_KILLED\020\004\022\r\n\tTASK_LOS"
    "T\020\005\022\016\n\nTASK_ERROR\020\007B\035\n\023org.apache.mesos."
    "v1B\006Protos", 11770);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos/v1/mesos.proto", &protobuf_RegisterTypes);
  FrameworkID::default_instance_ = new FrameworkID();
  OfferID::default_instance_ = new OfferID();
  AgentID::default_instance_ = new AgentID();
  TaskID::default_instance_ = new TaskID();
  ExecutorID::default_instance_ = new ExecutorID();
  ContainerID::default_instance_ = new ContainerID();
  TimeInfo::default_instance_ = new TimeInfo();
  DurationInfo::default_instance_ = new DurationInfo();
  Address::default_instance_ = new Address();
  URL::default_instance_ = new URL();
  Unavailability::default_instance_ = new Unavailability();
  MachineID::default_instance_ = new MachineID();
  MachineInfo::default_instance_ = new MachineInfo();
  FrameworkInfo::_default_role_ =
      new ::std::string("*", 1);
  FrameworkInfo::default_instance_ = new FrameworkInfo();
  FrameworkInfo_Capability::default_instance_ = new FrameworkInfo_Capability();
  HealthCheck::default_instance_ = new HealthCheck();
  HealthCheck_HTTP::_default_path_ =
      new ::std::string("/", 1);
  HealthCheck_HTTP::default_instance_ = new HealthCheck_HTTP();
  CommandInfo::default_instance_ = new CommandInfo();
  CommandInfo_URI::default_instance_ = new CommandInfo_URI();
  CommandInfo_ContainerInfo::default_instance_ = new CommandInfo_ContainerInfo();
  ExecutorInfo::default_instance_ = new ExecutorInfo();
  MasterInfo::default_instance_ = new MasterInfo();
  AgentInfo::default_instance_ = new AgentInfo();
  Value::default_instance_ = new Value();
  Value_Scalar::default_instance_ = new Value_Scalar();
  Value_Range::default_instance_ = new Value_Range();
  Value_Ranges::default_instance_ = new Value_Ranges();
  Value_Set::default_instance_ = new Value_Set();
  Value_Text::default_instance_ = new Value_Text();
  Attribute::default_instance_ = new Attribute();
  Resource::_default_role_ =
      new ::std::string("*", 1);
  Resource::default_instance_ = new Resource();
  Resource_ReservationInfo::default_instance_ = new Resource_ReservationInfo();
  Resource_DiskInfo::default_instance_ = new Resource_DiskInfo();
  Resource_DiskInfo_Persistence::default_instance_ = new Resource_DiskInfo_Persistence();
  Resource_RevocableInfo::default_instance_ = new Resource_RevocableInfo();
  TrafficControlStatistics::default_instance_ = new TrafficControlStatistics();
  ResourceStatistics::default_instance_ = new ResourceStatistics();
  ResourceUsage::default_instance_ = new ResourceUsage();
  ResourceUsage_Executor::default_instance_ = new ResourceUsage_Executor();
  PerfStatistics::default_instance_ = new PerfStatistics();
  Request::default_instance_ = new Request();
  Offer::default_instance_ = new Offer();
  Offer_Operation::default_instance_ = new Offer_Operation();
  Offer_Operation_Launch::default_instance_ = new Offer_Operation_Launch();
  Offer_Operation_Reserve::default_instance_ = new Offer_Operation_Reserve();
  Offer_Operation_Unreserve::default_instance_ = new Offer_Operation_Unreserve();
  Offer_Operation_Create::default_instance_ = new Offer_Operation_Create();
  Offer_Operation_Destroy::default_instance_ = new Offer_Operation_Destroy();
  InverseOffer::default_instance_ = new InverseOffer();
  TaskInfo::default_instance_ = new TaskInfo();
  TaskStatus::default_instance_ = new TaskStatus();
  Filters::default_instance_ = new Filters();
  Environment::default_instance_ = new Environment();
  Environment_Variable::default_instance_ = new Environment_Variable();
  Parameter::default_instance_ = new Parameter();
  Parameters::default_instance_ = new Parameters();
  Credential::default_instance_ = new Credential();
  Credentials::default_instance_ = new Credentials();
  RateLimit::default_instance_ = new RateLimit();
  RateLimits::default_instance_ = new RateLimits();
  Image::default_instance_ = new Image();
  Image_AppC::default_instance_ = new Image_AppC();
  Volume::default_instance_ = new Volume();
  ContainerInfo::default_instance_ = new ContainerInfo();
  ContainerInfo_DockerInfo::default_instance_ = new ContainerInfo_DockerInfo();
  ContainerInfo_DockerInfo_PortMapping::default_instance_ = new ContainerInfo_DockerInfo_PortMapping();
  ContainerInfo_MesosInfo::default_instance_ = new ContainerInfo_MesosInfo();
  Labels::default_instance_ = new Labels();
  Label::default_instance_ = new Label();
  Port::default_instance_ = new Port();
  Ports::default_instance_ = new Ports();
  DiscoveryInfo::default_instance_ = new DiscoveryInfo();
  FrameworkID::default_instance_->InitAsDefaultInstance();
  OfferID::default_instance_->InitAsDefaultInstance();
  AgentID::default_instance_->InitAsDefaultInstance();
  TaskID::default_instance_->InitAsDefaultInstance();
  ExecutorID::default_instance_->InitAsDefaultInstance();
  ContainerID::default_instance_->InitAsDefaultInstance();
  TimeInfo::default_instance_->InitAsDefaultInstance();
  DurationInfo::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  URL::default_instance_->InitAsDefaultInstance();
  Unavailability::default_instance_->InitAsDefaultInstance();
  MachineID::default_instance_->InitAsDefaultInstance();
  MachineInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInfo_Capability::default_instance_->InitAsDefaultInstance();
  HealthCheck::default_instance_->InitAsDefaultInstance();
  HealthCheck_HTTP::default_instance_->InitAsDefaultInstance();
  CommandInfo::default_instance_->InitAsDefaultInstance();
  CommandInfo_URI::default_instance_->InitAsDefaultInstance();
  CommandInfo_ContainerInfo::default_instance_->InitAsDefaultInstance();
  ExecutorInfo::default_instance_->InitAsDefaultInstance();
  MasterInfo::default_instance_->InitAsDefaultInstance();
  AgentInfo::default_instance_->InitAsDefaultInstance();
  Value::default_instance_->InitAsDefaultInstance();
  Value_Scalar::default_instance_->InitAsDefaultInstance();
  Value_Range::default_instance_->InitAsDefaultInstance();
  Value_Ranges::default_instance_->InitAsDefaultInstance();
  Value_Set::default_instance_->InitAsDefaultInstance();
  Value_Text::default_instance_->InitAsDefaultInstance();
  Attribute::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  Resource_ReservationInfo::default_instance_->InitAsDefaultInstance();
  Resource_DiskInfo::default_instance_->InitAsDefaultInstance();
  Resource_DiskInfo_Persistence::default_instance_->InitAsDefaultInstance();
  Resource_RevocableInfo::default_instance_->InitAsDefaultInstance();
  TrafficControlStatistics::default_instance_->InitAsDefaultInstance();
  ResourceStatistics::default_instance_->InitAsDefaultInstance();
  ResourceUsage::default_instance_->InitAsDefaultInstance();
  ResourceUsage_Executor::default_instance_->InitAsDefaultInstance();
  PerfStatistics::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Offer::default_instance_->InitAsDefaultInstance();
  Offer_Operation::default_instance_->InitAsDefaultInstance();
  Offer_Operation_Launch::default_instance_->InitAsDefaultInstance();
  Offer_Operation_Reserve::default_instance_->InitAsDefaultInstance();
  Offer_Operation_Unreserve::default_instance_->InitAsDefaultInstance();
  Offer_Operation_Create::default_instance_->InitAsDefaultInstance();
  Offer_Operation_Destroy::default_instance_->InitAsDefaultInstance();
  InverseOffer::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  Filters::default_instance_->InitAsDefaultInstance();
  Environment::default_instance_->InitAsDefaultInstance();
  Environment_Variable::default_instance_->InitAsDefaultInstance();
  Parameter::default_instance_->InitAsDefaultInstance();
  Parameters::default_instance_->InitAsDefaultInstance();
  Credential::default_instance_->InitAsDefaultInstance();
  Credentials::default_instance_->InitAsDefaultInstance();
  RateLimit::default_instance_->InitAsDefaultInstance();
  RateLimits::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Image_AppC::default_instance_->InitAsDefaultInstance();
  Volume::default_instance_->InitAsDefaultInstance();
  ContainerInfo::default_instance_->InitAsDefaultInstance();
  ContainerInfo_DockerInfo::default_instance_->InitAsDefaultInstance();
  ContainerInfo_DockerInfo_PortMapping::default_instance_->InitAsDefaultInstance();
  ContainerInfo_MesosInfo::default_instance_->InitAsDefaultInstance();
  Labels::default_instance_->InitAsDefaultInstance();
  Label::default_instance_->InitAsDefaultInstance();
  Port::default_instance_->InitAsDefaultInstance();
  Ports::default_instance_->InitAsDefaultInstance();
  DiscoveryInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2fv1_2fmesos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2fv1_2fmesos_2eproto {
  StaticDescriptorInitializer_mesos_2fv1_2fmesos_2eproto() {
    protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  }
} static_descriptor_initializer_mesos_2fv1_2fmesos_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}
bool TaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkID::kValueFieldNumber;
#endif  // !_MSC_VER

FrameworkID::FrameworkID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkID::InitAsDefaultInstance() {
}

FrameworkID::FrameworkID(const FrameworkID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkID::~FrameworkID() {
  SharedDtor();
}

void FrameworkID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void FrameworkID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkID_descriptor_;
}

const FrameworkID& FrameworkID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

FrameworkID* FrameworkID::default_instance_ = NULL;

FrameworkID* FrameworkID::New() const {
  return new FrameworkID;
}

void FrameworkID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkID::MergeFrom(const FrameworkID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkID::CopyFrom(const FrameworkID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FrameworkID::Swap(FrameworkID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkID_descriptor_;
  metadata.reflection = FrameworkID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfferID::kValueFieldNumber;
#endif  // !_MSC_VER

OfferID::OfferID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfferID::InitAsDefaultInstance() {
}

OfferID::OfferID(const OfferID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfferID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfferID::~OfferID() {
  SharedDtor();
}

void OfferID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void OfferID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfferID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfferID_descriptor_;
}

const OfferID& OfferID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

OfferID* OfferID::default_instance_ = NULL;

OfferID* OfferID::New() const {
  return new OfferID;
}

void OfferID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfferID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfferID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfferID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfferID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfferID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfferID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfferID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfferID::MergeFrom(const OfferID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfferID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfferID::CopyFrom(const OfferID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfferID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OfferID::Swap(OfferID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfferID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfferID_descriptor_;
  metadata.reflection = OfferID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentID::kValueFieldNumber;
#endif  // !_MSC_VER

AgentID::AgentID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentID::InitAsDefaultInstance() {
}

AgentID::AgentID(const AgentID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentID::~AgentID() {
  SharedDtor();
}

void AgentID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AgentID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentID_descriptor_;
}

const AgentID& AgentID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

AgentID* AgentID::default_instance_ = NULL;

AgentID* AgentID::New() const {
  return new AgentID;
}

void AgentID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentID::MergeFrom(const AgentID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentID::CopyFrom(const AgentID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AgentID::Swap(AgentID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentID_descriptor_;
  metadata.reflection = AgentID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskID::kValueFieldNumber;
#endif  // !_MSC_VER

TaskID::TaskID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskID::InitAsDefaultInstance() {
}

TaskID::TaskID(const TaskID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskID::~TaskID() {
  SharedDtor();
}

void TaskID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TaskID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskID_descriptor_;
}

const TaskID& TaskID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

TaskID* TaskID::default_instance_ = NULL;

TaskID* TaskID::New() const {
  return new TaskID;
}

void TaskID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskID::MergeFrom(const TaskID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskID::CopyFrom(const TaskID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskID::Swap(TaskID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskID_descriptor_;
  metadata.reflection = TaskID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutorID::kValueFieldNumber;
#endif  // !_MSC_VER

ExecutorID::ExecutorID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutorID::InitAsDefaultInstance() {
}

ExecutorID::ExecutorID(const ExecutorID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutorID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutorID::~ExecutorID() {
  SharedDtor();
}

void ExecutorID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ExecutorID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorID_descriptor_;
}

const ExecutorID& ExecutorID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ExecutorID* ExecutorID::default_instance_ = NULL;

ExecutorID* ExecutorID::New() const {
  return new ExecutorID;
}

void ExecutorID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutorID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutorID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutorID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutorID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutorID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutorID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorID::MergeFrom(const ExecutorID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutorID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorID::CopyFrom(const ExecutorID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExecutorID::Swap(ExecutorID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutorID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorID_descriptor_;
  metadata.reflection = ExecutorID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerID::kValueFieldNumber;
#endif  // !_MSC_VER

ContainerID::ContainerID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerID::InitAsDefaultInstance() {
}

ContainerID::ContainerID(const ContainerID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerID::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerID::~ContainerID() {
  SharedDtor();
}

void ContainerID::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ContainerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerID_descriptor_;
}

const ContainerID& ContainerID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ContainerID* ContainerID::default_instance_ = NULL;

ContainerID* ContainerID::New() const {
  return new ContainerID;
}

void ContainerID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerID::MergeFrom(const ContainerID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerID::CopyFrom(const ContainerID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ContainerID::Swap(ContainerID* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerID_descriptor_;
  metadata.reflection = ContainerID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeInfo::kNanosecondsFieldNumber;
#endif  // !_MSC_VER

TimeInfo::TimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeInfo::InitAsDefaultInstance() {
}

TimeInfo::TimeInfo(const TimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeInfo::SharedCtor() {
  _cached_size_ = 0;
  nanoseconds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeInfo::~TimeInfo() {
  SharedDtor();
}

void TimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInfo_descriptor_;
}

const TimeInfo& TimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

TimeInfo* TimeInfo::default_instance_ = NULL;

TimeInfo* TimeInfo::New() const {
  return new TimeInfo;
}

void TimeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nanoseconds_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nanoseconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nanoseconds_)));
          set_has_nanoseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 nanoseconds = 1;
  if (has_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nanoseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 nanoseconds = 1;
  if (has_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nanoseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 nanoseconds = 1;
    if (has_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nanoseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeInfo::MergeFrom(const TimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nanoseconds()) {
      set_nanoseconds(from.nanoseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInfo::CopyFrom(const TimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimeInfo::Swap(TimeInfo* other) {
  if (other != this) {
    std::swap(nanoseconds_, other->nanoseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeInfo_descriptor_;
  metadata.reflection = TimeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DurationInfo::kNanosecondsFieldNumber;
#endif  // !_MSC_VER

DurationInfo::DurationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DurationInfo::InitAsDefaultInstance() {
}

DurationInfo::DurationInfo(const DurationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DurationInfo::SharedCtor() {
  _cached_size_ = 0;
  nanoseconds_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DurationInfo::~DurationInfo() {
  SharedDtor();
}

void DurationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DurationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DurationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DurationInfo_descriptor_;
}

const DurationInfo& DurationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

DurationInfo* DurationInfo::default_instance_ = NULL;

DurationInfo* DurationInfo::New() const {
  return new DurationInfo;
}

void DurationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nanoseconds_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DurationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 nanoseconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nanoseconds_)));
          set_has_nanoseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DurationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 nanoseconds = 1;
  if (has_nanoseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nanoseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DurationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 nanoseconds = 1;
  if (has_nanoseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nanoseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DurationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 nanoseconds = 1;
    if (has_nanoseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nanoseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DurationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DurationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DurationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DurationInfo::MergeFrom(const DurationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nanoseconds()) {
      set_nanoseconds(from.nanoseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DurationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DurationInfo::CopyFrom(const DurationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DurationInfo::Swap(DurationInfo* other) {
  if (other != this) {
    std::swap(nanoseconds_, other->nanoseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DurationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DurationInfo_descriptor_;
  metadata.reflection = DurationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kHostnameFieldNumber;
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int URL::kSchemeFieldNumber;
const int URL::kAddressFieldNumber;
const int URL::kPathFieldNumber;
const int URL::kQueryFieldNumber;
const int URL::kFragmentFieldNumber;
#endif  // !_MSC_VER

URL::URL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void URL::InitAsDefaultInstance() {
  address_ = const_cast< ::mesos::v1::Address*>(&::mesos::v1::Address::default_instance());
}

URL::URL(const URL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void URL::SharedCtor() {
  _cached_size_ = 0;
  scheme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = NULL;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fragment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

URL::~URL() {
  SharedDtor();
}

void URL::SharedDtor() {
  if (scheme_ != &::google::protobuf::internal::kEmptyString) {
    delete scheme_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (fragment_ != &::google::protobuf::internal::kEmptyString) {
    delete fragment_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void URL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URL_descriptor_;
}

const URL& URL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

URL* URL::default_instance_ = NULL;

URL* URL::New() const {
  return new URL;
}

void URL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_scheme()) {
      if (scheme_ != &::google::protobuf::internal::kEmptyString) {
        scheme_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::mesos::v1::Address::Clear();
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_fragment()) {
      if (fragment_ != &::google::protobuf::internal::kEmptyString) {
        fragment_->clear();
      }
    }
  }
  query_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool URL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string scheme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scheme().data(), this->scheme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // required .mesos.v1.Address address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        break;
      }

      // repeated .mesos.v1.Parameter query = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_query;
        if (input->ExpectTag(42)) goto parse_fragment;
        break;
      }

      // optional string fragment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fragment().data(), this->fragment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void URL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->scheme(), output);
  }

  // required .mesos.v1.Address address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->address(), output);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->path(), output);
  }

  // repeated .mesos.v1.Parameter query = 4;
  for (int i = 0; i < this->query_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->query(i), output);
  }

  // optional string fragment = 5;
  if (has_fragment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment().data(), this->fragment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->fragment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* URL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string scheme = 1;
  if (has_scheme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scheme().data(), this->scheme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scheme(), target);
  }

  // required .mesos.v1.Address address = 2;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->address(), target);
  }

  // optional string path = 3;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // repeated .mesos.v1.Parameter query = 4;
  for (int i = 0; i < this->query_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->query(i), target);
  }

  // optional string fragment = 5;
  if (has_fragment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fragment().data(), this->fragment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fragment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int URL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string scheme = 1;
    if (has_scheme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scheme());
    }

    // required .mesos.v1.Address address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

    // optional string path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string fragment = 5;
    if (has_fragment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fragment());
    }

  }
  // repeated .mesos.v1.Parameter query = 4;
  total_size += 1 * this->query_size();
  for (int i = 0; i < this->query_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const URL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const URL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void URL::MergeFrom(const URL& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_.MergeFrom(from.query_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scheme()) {
      set_scheme(from.scheme());
    }
    if (from.has_address()) {
      mutable_address()->::mesos::v1::Address::MergeFrom(from.address());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_fragment()) {
      set_fragment(from.fragment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void URL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URL::CopyFrom(const URL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  for (int i = 0; i < query_size(); i++) {
    if (!this->query(i).IsInitialized()) return false;
  }
  return true;
}

void URL::Swap(URL* other) {
  if (other != this) {
    std::swap(scheme_, other->scheme_);
    std::swap(address_, other->address_);
    std::swap(path_, other->path_);
    query_.Swap(&other->query_);
    std::swap(fragment_, other->fragment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata URL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URL_descriptor_;
  metadata.reflection = URL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unavailability::kStartFieldNumber;
const int Unavailability::kDurationFieldNumber;
#endif  // !_MSC_VER

Unavailability::Unavailability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Unavailability::InitAsDefaultInstance() {
  start_ = const_cast< ::mesos::v1::TimeInfo*>(&::mesos::v1::TimeInfo::default_instance());
  duration_ = const_cast< ::mesos::v1::DurationInfo*>(&::mesos::v1::DurationInfo::default_instance());
}

Unavailability::Unavailability(const Unavailability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Unavailability::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  duration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unavailability::~Unavailability() {
  SharedDtor();
}

void Unavailability::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete duration_;
  }
}

void Unavailability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unavailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unavailability_descriptor_;
}

const Unavailability& Unavailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Unavailability* Unavailability::default_instance_ = NULL;

Unavailability* Unavailability::New() const {
  return new Unavailability;
}

void Unavailability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start()) {
      if (start_ != NULL) start_->::mesos::v1::TimeInfo::Clear();
    }
    if (has_duration()) {
      if (duration_ != NULL) duration_->::mesos::v1::DurationInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unavailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TimeInfo start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_duration;
        break;
      }

      // optional .mesos.v1.DurationInfo duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Unavailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TimeInfo start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // optional .mesos.v1.DurationInfo duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Unavailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TimeInfo start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // optional .mesos.v1.DurationInfo duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Unavailability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TimeInfo start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // optional .mesos.v1.DurationInfo duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unavailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unavailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unavailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unavailability::MergeFrom(const Unavailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::mesos::v1::TimeInfo::MergeFrom(from.start());
    }
    if (from.has_duration()) {
      mutable_duration()->::mesos::v1::DurationInfo::MergeFrom(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unavailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unavailability::CopyFrom(const Unavailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unavailability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_duration()) {
    if (!this->duration().IsInitialized()) return false;
  }
  return true;
}

void Unavailability::Swap(Unavailability* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unavailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unavailability_descriptor_;
  metadata.reflection = Unavailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineID::kHostnameFieldNumber;
const int MachineID::kIpFieldNumber;
#endif  // !_MSC_VER

MachineID::MachineID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineID::InitAsDefaultInstance() {
}

MachineID::MachineID(const MachineID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineID::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineID::~MachineID() {
  SharedDtor();
}

void MachineID::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void MachineID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineID_descriptor_;
}

const MachineID& MachineID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

MachineID* MachineID::default_instance_ = NULL;

MachineID* MachineID::New() const {
  return new MachineID;
}

void MachineID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineID::MergeFrom(const MachineID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineID::CopyFrom(const MachineID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineID::IsInitialized() const {

  return true;
}

void MachineID::Swap(MachineID* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineID_descriptor_;
  metadata.reflection = MachineID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MachineInfo_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfo_Mode_descriptor_;
}
bool MachineInfo_Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MachineInfo_Mode MachineInfo::UP;
const MachineInfo_Mode MachineInfo::DRAINING;
const MachineInfo_Mode MachineInfo::DOWN;
const MachineInfo_Mode MachineInfo::Mode_MIN;
const MachineInfo_Mode MachineInfo::Mode_MAX;
const int MachineInfo::Mode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MachineInfo::kIdFieldNumber;
const int MachineInfo::kModeFieldNumber;
const int MachineInfo::kUnavailabilityFieldNumber;
#endif  // !_MSC_VER

MachineInfo::MachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::v1::MachineID*>(&::mesos::v1::MachineID::default_instance());
  unavailability_ = const_cast< ::mesos::v1::Unavailability*>(&::mesos::v1::Unavailability::default_instance());
}

MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  mode_ = 1;
  unavailability_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineInfo::~MachineInfo() {
  SharedDtor();
}

void MachineInfo::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete unavailability_;
  }
}

void MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfo_descriptor_;
}

const MachineInfo& MachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

MachineInfo* MachineInfo::default_instance_ = NULL;

MachineInfo* MachineInfo::New() const {
  return new MachineInfo;
}

void MachineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::mesos::v1::MachineID::Clear();
    }
    mode_ = 1;
    if (has_unavailability()) {
      if (unavailability_ != NULL) unavailability_->::mesos::v1::Unavailability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.MachineID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .mesos.v1.MachineInfo.Mode mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::MachineInfo_Mode_IsValid(value)) {
            set_mode(static_cast< ::mesos::v1::MachineInfo_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unavailability;
        break;
      }

      // optional .mesos.v1.Unavailability unavailability = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unavailability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unavailability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.MachineID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .mesos.v1.MachineInfo.Mode mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional .mesos.v1.Unavailability unavailability = 3;
  if (has_unavailability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unavailability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.MachineID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .mesos.v1.MachineInfo.Mode mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional .mesos.v1.Unavailability unavailability = 3;
  if (has_unavailability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unavailability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.MachineID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .mesos.v1.MachineInfo.Mode mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional .mesos.v1.Unavailability unavailability = 3;
    if (has_unavailability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unavailability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::mesos::v1::MachineID::MergeFrom(from.id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_unavailability()) {
      mutable_unavailability()->::mesos::v1::Unavailability::MergeFrom(from.unavailability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_unavailability()) {
    if (!this->unavailability().IsInitialized()) return false;
  }
  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mode_, other->mode_);
    std::swap(unavailability_, other->unavailability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineInfo_descriptor_;
  metadata.reflection = MachineInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FrameworkInfo_Capability_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInfo_Capability_Type_descriptor_;
}
bool FrameworkInfo_Capability_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FrameworkInfo_Capability_Type FrameworkInfo_Capability::REVOCABLE_RESOURCES;
const FrameworkInfo_Capability_Type FrameworkInfo_Capability::Type_MIN;
const FrameworkInfo_Capability_Type FrameworkInfo_Capability::Type_MAX;
const int FrameworkInfo_Capability::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FrameworkInfo_Capability::kTypeFieldNumber;
#endif  // !_MSC_VER

FrameworkInfo_Capability::FrameworkInfo_Capability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInfo_Capability::InitAsDefaultInstance() {
}

FrameworkInfo_Capability::FrameworkInfo_Capability(const FrameworkInfo_Capability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInfo_Capability::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInfo_Capability::~FrameworkInfo_Capability() {
  SharedDtor();
}

void FrameworkInfo_Capability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkInfo_Capability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInfo_Capability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInfo_Capability_descriptor_;
}

const FrameworkInfo_Capability& FrameworkInfo_Capability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

FrameworkInfo_Capability* FrameworkInfo_Capability::default_instance_ = NULL;

FrameworkInfo_Capability* FrameworkInfo_Capability::New() const {
  return new FrameworkInfo_Capability;
}

void FrameworkInfo_Capability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInfo_Capability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.FrameworkInfo.Capability.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::FrameworkInfo_Capability_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::FrameworkInfo_Capability_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInfo_Capability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.FrameworkInfo.Capability.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInfo_Capability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.FrameworkInfo.Capability.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInfo_Capability::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.FrameworkInfo.Capability.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInfo_Capability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInfo_Capability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInfo_Capability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInfo_Capability::MergeFrom(const FrameworkInfo_Capability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInfo_Capability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInfo_Capability::CopyFrom(const FrameworkInfo_Capability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInfo_Capability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FrameworkInfo_Capability::Swap(FrameworkInfo_Capability* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInfo_Capability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInfo_Capability_descriptor_;
  metadata.reflection = FrameworkInfo_Capability_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* FrameworkInfo::_default_role_ = NULL;
#ifndef _MSC_VER
const int FrameworkInfo::kUserFieldNumber;
const int FrameworkInfo::kNameFieldNumber;
const int FrameworkInfo::kIdFieldNumber;
const int FrameworkInfo::kFailoverTimeoutFieldNumber;
const int FrameworkInfo::kCheckpointFieldNumber;
const int FrameworkInfo::kRoleFieldNumber;
const int FrameworkInfo::kHostnameFieldNumber;
const int FrameworkInfo::kPrincipalFieldNumber;
const int FrameworkInfo::kWebuiUrlFieldNumber;
const int FrameworkInfo::kCapabilitiesFieldNumber;
const int FrameworkInfo::kLabelsFieldNumber;
#endif  // !_MSC_VER

FrameworkInfo::FrameworkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::v1::FrameworkID*>(&::mesos::v1::FrameworkID::default_instance());
  labels_ = const_cast< ::mesos::v1::Labels*>(&::mesos::v1::Labels::default_instance());
}

FrameworkInfo::FrameworkInfo(const FrameworkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInfo::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = NULL;
  failover_timeout_ = 0;
  checkpoint_ = false;
  role_ = const_cast< ::std::string*>(_default_role_);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  principal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webui_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  labels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInfo::~FrameworkInfo() {
  SharedDtor();
}

void FrameworkInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (role_ != _default_role_) {
    delete role_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (principal_ != &::google::protobuf::internal::kEmptyString) {
    delete principal_;
  }
  if (webui_url_ != &::google::protobuf::internal::kEmptyString) {
    delete webui_url_;
  }
  if (this != default_instance_) {
    delete id_;
    delete labels_;
  }
}

void FrameworkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInfo_descriptor_;
}

const FrameworkInfo& FrameworkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

FrameworkInfo* FrameworkInfo::default_instance_ = NULL;

FrameworkInfo* FrameworkInfo::New() const {
  return new FrameworkInfo;
}

void FrameworkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != NULL) id_->::mesos::v1::FrameworkID::Clear();
    }
    failover_timeout_ = 0;
    checkpoint_ = false;
    if (has_role()) {
      if (role_ != _default_role_) {
        role_->assign(*_default_role_);
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_principal()) {
      if (principal_ != &::google::protobuf::internal::kEmptyString) {
        principal_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_webui_url()) {
      if (webui_url_ != &::google::protobuf::internal::kEmptyString) {
        webui_url_->clear();
      }
    }
    if (has_labels()) {
      if (labels_ != NULL) labels_->::mesos::v1::Labels::Clear();
    }
  }
  capabilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional .mesos.v1.FrameworkID id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_failover_timeout;
        break;
      }

      // optional double failover_timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_failover_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &failover_timeout_)));
          set_has_failover_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_checkpoint;
        break;
      }

      // optional bool checkpoint = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_)));
          set_has_checkpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role;
        break;
      }

      // optional string role = 6 [default = "*"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_hostname;
        break;
      }

      // optional string hostname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_principal;
        break;
      }

      // optional string principal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_principal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->principal().data(), this->principal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_webui_url;
        break;
      }

      // optional string webui_url = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webui_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webui_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webui_url().data(), this->webui_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capabilities;
        break;
      }

      // repeated .mesos.v1.FrameworkInfo.Capability capabilities = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capabilities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_capabilities;
        if (input->ExpectTag(90)) goto parse_labels;
        break;
      }

      // optional .mesos.v1.Labels labels = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .mesos.v1.FrameworkID id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->id(), output);
  }

  // optional double failover_timeout = 4 [default = 0];
  if (has_failover_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->failover_timeout(), output);
  }

  // optional bool checkpoint = 5 [default = false];
  if (has_checkpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->checkpoint(), output);
  }

  // optional string role = 6 [default = "*"];
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role(), output);
  }

  // optional string hostname = 7;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->hostname(), output);
  }

  // optional string principal = 8;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->principal(), output);
  }

  // optional string webui_url = 9;
  if (has_webui_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webui_url().data(), this->webui_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->webui_url(), output);
  }

  // repeated .mesos.v1.FrameworkInfo.Capability capabilities = 10;
  for (int i = 0; i < this->capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->capabilities(i), output);
  }

  // optional .mesos.v1.Labels labels = 11;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->labels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .mesos.v1.FrameworkID id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->id(), target);
  }

  // optional double failover_timeout = 4 [default = 0];
  if (has_failover_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->failover_timeout(), target);
  }

  // optional bool checkpoint = 5 [default = false];
  if (has_checkpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->checkpoint(), target);
  }

  // optional string role = 6 [default = "*"];
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role(), target);
  }

  // optional string hostname = 7;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->hostname(), target);
  }

  // optional string principal = 8;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->principal(), target);
  }

  // optional string webui_url = 9;
  if (has_webui_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webui_url().data(), this->webui_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->webui_url(), target);
  }

  // repeated .mesos.v1.FrameworkInfo.Capability capabilities = 10;
  for (int i = 0; i < this->capabilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->capabilities(i), target);
  }

  // optional .mesos.v1.Labels labels = 11;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->labels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .mesos.v1.FrameworkID id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional double failover_timeout = 4 [default = 0];
    if (has_failover_timeout()) {
      total_size += 1 + 8;
    }

    // optional bool checkpoint = 5 [default = false];
    if (has_checkpoint()) {
      total_size += 1 + 1;
    }

    // optional string role = 6 [default = "*"];
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

    // optional string hostname = 7;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string principal = 8;
    if (has_principal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->principal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string webui_url = 9;
    if (has_webui_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webui_url());
    }

    // optional .mesos.v1.Labels labels = 11;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels());
    }

  }
  // repeated .mesos.v1.FrameworkInfo.Capability capabilities = 10;
  total_size += 1 * this->capabilities_size();
  for (int i = 0; i < this->capabilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capabilities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInfo::MergeFrom(const FrameworkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  capabilities_.MergeFrom(from.capabilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      mutable_id()->::mesos::v1::FrameworkID::MergeFrom(from.id());
    }
    if (from.has_failover_timeout()) {
      set_failover_timeout(from.failover_timeout());
    }
    if (from.has_checkpoint()) {
      set_checkpoint(from.checkpoint());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_principal()) {
      set_principal(from.principal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_webui_url()) {
      set_webui_url(from.webui_url());
    }
    if (from.has_labels()) {
      mutable_labels()->::mesos::v1::Labels::MergeFrom(from.labels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInfo::CopyFrom(const FrameworkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < capabilities_size(); i++) {
    if (!this->capabilities(i).IsInitialized()) return false;
  }
  if (has_labels()) {
    if (!this->labels().IsInitialized()) return false;
  }
  return true;
}

void FrameworkInfo::Swap(FrameworkInfo* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(failover_timeout_, other->failover_timeout_);
    std::swap(checkpoint_, other->checkpoint_);
    std::swap(role_, other->role_);
    std::swap(hostname_, other->hostname_);
    std::swap(principal_, other->principal_);
    std::swap(webui_url_, other->webui_url_);
    capabilities_.Swap(&other->capabilities_);
    std::swap(labels_, other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInfo_descriptor_;
  metadata.reflection = FrameworkInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* HealthCheck_HTTP::_default_path_ = NULL;
#ifndef _MSC_VER
const int HealthCheck_HTTP::kPortFieldNumber;
const int HealthCheck_HTTP::kPathFieldNumber;
const int HealthCheck_HTTP::kStatusesFieldNumber;
#endif  // !_MSC_VER

HealthCheck_HTTP::HealthCheck_HTTP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthCheck_HTTP::InitAsDefaultInstance() {
}

HealthCheck_HTTP::HealthCheck_HTTP(const HealthCheck_HTTP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthCheck_HTTP::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  path_ = const_cast< ::std::string*>(_default_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthCheck_HTTP::~HealthCheck_HTTP() {
  SharedDtor();
}

void HealthCheck_HTTP::SharedDtor() {
  if (path_ != _default_path_) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void HealthCheck_HTTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck_HTTP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthCheck_HTTP_descriptor_;
}

const HealthCheck_HTTP& HealthCheck_HTTP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

HealthCheck_HTTP* HealthCheck_HTTP::default_instance_ = NULL;

HealthCheck_HTTP* HealthCheck_HTTP::New() const {
  return new HealthCheck_HTTP;
}

void HealthCheck_HTTP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    if (has_path()) {
      if (path_ != _default_path_) {
        path_->assign(*_default_path_);
      }
    }
  }
  statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthCheck_HTTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2 [default = "/"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statuses;
        break;
      }

      // repeated uint32 statuses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statuses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_statuses())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_statuses())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statuses;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthCheck_HTTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional string path = 2 [default = "/"];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // repeated uint32 statuses = 4;
  for (int i = 0; i < this->statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->statuses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthCheck_HTTP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // optional string path = 2 [default = "/"];
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // repeated uint32 statuses = 4;
  for (int i = 0; i < this->statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->statuses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthCheck_HTTP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string path = 2 [default = "/"];
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  // repeated uint32 statuses = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->statuses_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->statuses(i));
    }
    total_size += 1 * this->statuses_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck_HTTP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthCheck_HTTP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthCheck_HTTP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthCheck_HTTP::MergeFrom(const HealthCheck_HTTP& from) {
  GOOGLE_CHECK_NE(&from, this);
  statuses_.MergeFrom(from.statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthCheck_HTTP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck_HTTP::CopyFrom(const HealthCheck_HTTP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck_HTTP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HealthCheck_HTTP::Swap(HealthCheck_HTTP* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(path_, other->path_);
    statuses_.Swap(&other->statuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthCheck_HTTP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthCheck_HTTP_descriptor_;
  metadata.reflection = HealthCheck_HTTP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HealthCheck::kHttpFieldNumber;
const int HealthCheck::kDelaySecondsFieldNumber;
const int HealthCheck::kIntervalSecondsFieldNumber;
const int HealthCheck::kTimeoutSecondsFieldNumber;
const int HealthCheck::kConsecutiveFailuresFieldNumber;
const int HealthCheck::kGracePeriodSecondsFieldNumber;
const int HealthCheck::kCommandFieldNumber;
#endif  // !_MSC_VER

HealthCheck::HealthCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HealthCheck::InitAsDefaultInstance() {
  http_ = const_cast< ::mesos::v1::HealthCheck_HTTP*>(&::mesos::v1::HealthCheck_HTTP::default_instance());
  command_ = const_cast< ::mesos::v1::CommandInfo*>(&::mesos::v1::CommandInfo::default_instance());
}

HealthCheck::HealthCheck(const HealthCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HealthCheck::SharedCtor() {
  _cached_size_ = 0;
  http_ = NULL;
  delay_seconds_ = 15;
  interval_seconds_ = 10;
  timeout_seconds_ = 20;
  consecutive_failures_ = 3u;
  grace_period_seconds_ = 10;
  command_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HealthCheck::~HealthCheck() {
  SharedDtor();
}

void HealthCheck::SharedDtor() {
  if (this != default_instance_) {
    delete http_;
    delete command_;
  }
}

void HealthCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HealthCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthCheck_descriptor_;
}

const HealthCheck& HealthCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

HealthCheck* HealthCheck::default_instance_ = NULL;

HealthCheck* HealthCheck::New() const {
  return new HealthCheck;
}

void HealthCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_http()) {
      if (http_ != NULL) http_->::mesos::v1::HealthCheck_HTTP::Clear();
    }
    delay_seconds_ = 15;
    interval_seconds_ = 10;
    timeout_seconds_ = 20;
    consecutive_failures_ = 3u;
    grace_period_seconds_ = 10;
    if (has_command()) {
      if (command_ != NULL) command_->::mesos::v1::CommandInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HealthCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.v1.HealthCheck.HTTP http = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_http()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_delay_seconds;
        break;
      }

      // optional double delay_seconds = 2 [default = 15];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delay_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_seconds_)));
          set_has_delay_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_interval_seconds;
        break;
      }

      // optional double interval_seconds = 3 [default = 10];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_interval_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interval_seconds_)));
          set_has_interval_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_timeout_seconds;
        break;
      }

      // optional double timeout_seconds = 4 [default = 20];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timeout_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeout_seconds_)));
          set_has_timeout_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_consecutive_failures;
        break;
      }

      // optional uint32 consecutive_failures = 5 [default = 3];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consecutive_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consecutive_failures_)));
          set_has_consecutive_failures();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_grace_period_seconds;
        break;
      }

      // optional double grace_period_seconds = 6 [default = 10];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_grace_period_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grace_period_seconds_)));
          set_has_grace_period_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_command;
        break;
      }

      // optional .mesos.v1.CommandInfo command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HealthCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.v1.HealthCheck.HTTP http = 1;
  if (has_http()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->http(), output);
  }

  // optional double delay_seconds = 2 [default = 15];
  if (has_delay_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->delay_seconds(), output);
  }

  // optional double interval_seconds = 3 [default = 10];
  if (has_interval_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->interval_seconds(), output);
  }

  // optional double timeout_seconds = 4 [default = 20];
  if (has_timeout_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timeout_seconds(), output);
  }

  // optional uint32 consecutive_failures = 5 [default = 3];
  if (has_consecutive_failures()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consecutive_failures(), output);
  }

  // optional double grace_period_seconds = 6 [default = 10];
  if (has_grace_period_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->grace_period_seconds(), output);
  }

  // optional .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HealthCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.v1.HealthCheck.HTTP http = 1;
  if (has_http()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->http(), target);
  }

  // optional double delay_seconds = 2 [default = 15];
  if (has_delay_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->delay_seconds(), target);
  }

  // optional double interval_seconds = 3 [default = 10];
  if (has_interval_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->interval_seconds(), target);
  }

  // optional double timeout_seconds = 4 [default = 20];
  if (has_timeout_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timeout_seconds(), target);
  }

  // optional uint32 consecutive_failures = 5 [default = 3];
  if (has_consecutive_failures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consecutive_failures(), target);
  }

  // optional double grace_period_seconds = 6 [default = 10];
  if (has_grace_period_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->grace_period_seconds(), target);
  }

  // optional .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HealthCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.v1.HealthCheck.HTTP http = 1;
    if (has_http()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->http());
    }

    // optional double delay_seconds = 2 [default = 15];
    if (has_delay_seconds()) {
      total_size += 1 + 8;
    }

    // optional double interval_seconds = 3 [default = 10];
    if (has_interval_seconds()) {
      total_size += 1 + 8;
    }

    // optional double timeout_seconds = 4 [default = 20];
    if (has_timeout_seconds()) {
      total_size += 1 + 8;
    }

    // optional uint32 consecutive_failures = 5 [default = 3];
    if (has_consecutive_failures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consecutive_failures());
    }

    // optional double grace_period_seconds = 6 [default = 10];
    if (has_grace_period_seconds()) {
      total_size += 1 + 8;
    }

    // optional .mesos.v1.CommandInfo command = 7;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HealthCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HealthCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HealthCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HealthCheck::MergeFrom(const HealthCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_http()) {
      mutable_http()->::mesos::v1::HealthCheck_HTTP::MergeFrom(from.http());
    }
    if (from.has_delay_seconds()) {
      set_delay_seconds(from.delay_seconds());
    }
    if (from.has_interval_seconds()) {
      set_interval_seconds(from.interval_seconds());
    }
    if (from.has_timeout_seconds()) {
      set_timeout_seconds(from.timeout_seconds());
    }
    if (from.has_consecutive_failures()) {
      set_consecutive_failures(from.consecutive_failures());
    }
    if (from.has_grace_period_seconds()) {
      set_grace_period_seconds(from.grace_period_seconds());
    }
    if (from.has_command()) {
      mutable_command()->::mesos::v1::CommandInfo::MergeFrom(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HealthCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthCheck::CopyFrom(const HealthCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthCheck::IsInitialized() const {

  if (has_http()) {
    if (!this->http().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void HealthCheck::Swap(HealthCheck* other) {
  if (other != this) {
    std::swap(http_, other->http_);
    std::swap(delay_seconds_, other->delay_seconds_);
    std::swap(interval_seconds_, other->interval_seconds_);
    std::swap(timeout_seconds_, other->timeout_seconds_);
    std::swap(consecutive_failures_, other->consecutive_failures_);
    std::swap(grace_period_seconds_, other->grace_period_seconds_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HealthCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HealthCheck_descriptor_;
  metadata.reflection = HealthCheck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandInfo_URI::kValueFieldNumber;
const int CommandInfo_URI::kExecutableFieldNumber;
const int CommandInfo_URI::kExtractFieldNumber;
const int CommandInfo_URI::kCacheFieldNumber;
#endif  // !_MSC_VER

CommandInfo_URI::CommandInfo_URI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInfo_URI::InitAsDefaultInstance() {
}

CommandInfo_URI::CommandInfo_URI(const CommandInfo_URI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInfo_URI::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  executable_ = false;
  extract_ = true;
  cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInfo_URI::~CommandInfo_URI() {
  SharedDtor();
}

void CommandInfo_URI::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CommandInfo_URI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInfo_URI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInfo_URI_descriptor_;
}

const CommandInfo_URI& CommandInfo_URI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

CommandInfo_URI* CommandInfo_URI::default_instance_ = NULL;

CommandInfo_URI* CommandInfo_URI::New() const {
  return new CommandInfo_URI;
}

void CommandInfo_URI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    executable_ = false;
    extract_ = true;
    cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInfo_URI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_executable;
        break;
      }

      // optional bool executable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_executable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &executable_)));
          set_has_executable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extract;
        break;
      }

      // optional bool extract = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extract:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_)));
          set_has_extract();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cache;
        break;
      }

      // optional bool cache = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_)));
          set_has_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInfo_URI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // optional bool executable = 2;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->executable(), output);
  }

  // optional bool extract = 3 [default = true];
  if (has_extract()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extract(), output);
  }

  // optional bool cache = 4;
  if (has_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cache(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInfo_URI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional bool executable = 2;
  if (has_executable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->executable(), target);
  }

  // optional bool extract = 3 [default = true];
  if (has_extract()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extract(), target);
  }

  // optional bool cache = 4;
  if (has_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cache(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInfo_URI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bool executable = 2;
    if (has_executable()) {
      total_size += 1 + 1;
    }

    // optional bool extract = 3 [default = true];
    if (has_extract()) {
      total_size += 1 + 1;
    }

    // optional bool cache = 4;
    if (has_cache()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInfo_URI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInfo_URI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInfo_URI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInfo_URI::MergeFrom(const CommandInfo_URI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_executable()) {
      set_executable(from.executable());
    }
    if (from.has_extract()) {
      set_extract(from.extract());
    }
    if (from.has_cache()) {
      set_cache(from.cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInfo_URI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInfo_URI::CopyFrom(const CommandInfo_URI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInfo_URI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommandInfo_URI::Swap(CommandInfo_URI* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(executable_, other->executable_);
    std::swap(extract_, other->extract_);
    std::swap(cache_, other->cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInfo_URI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInfo_URI_descriptor_;
  metadata.reflection = CommandInfo_URI_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandInfo_ContainerInfo::kImageFieldNumber;
const int CommandInfo_ContainerInfo::kOptionsFieldNumber;
#endif  // !_MSC_VER

CommandInfo_ContainerInfo::CommandInfo_ContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInfo_ContainerInfo::InitAsDefaultInstance() {
}

CommandInfo_ContainerInfo::CommandInfo_ContainerInfo(const CommandInfo_ContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInfo_ContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInfo_ContainerInfo::~CommandInfo_ContainerInfo() {
  SharedDtor();
}

void CommandInfo_ContainerInfo::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void CommandInfo_ContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInfo_ContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInfo_ContainerInfo_descriptor_;
}

const CommandInfo_ContainerInfo& CommandInfo_ContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

CommandInfo_ContainerInfo* CommandInfo_ContainerInfo::default_instance_ = NULL;

CommandInfo_ContainerInfo* CommandInfo_ContainerInfo::New() const {
  return new CommandInfo_ContainerInfo;
}

void CommandInfo_ContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInfo_ContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // repeated string options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInfo_ContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image(), output);
  }

  // repeated string options = 2;
  for (int i = 0; i < this->options_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->options(i).data(), this->options(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->options(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInfo_ContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // repeated string options = 2;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->options(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInfo_ContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

  }
  // repeated string options = 2;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInfo_ContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInfo_ContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInfo_ContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInfo_ContainerInfo::MergeFrom(const CommandInfo_ContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInfo_ContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInfo_ContainerInfo::CopyFrom(const CommandInfo_ContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInfo_ContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommandInfo_ContainerInfo::Swap(CommandInfo_ContainerInfo* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInfo_ContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInfo_ContainerInfo_descriptor_;
  metadata.reflection = CommandInfo_ContainerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommandInfo::kContainerFieldNumber;
const int CommandInfo::kUrisFieldNumber;
const int CommandInfo::kEnvironmentFieldNumber;
const int CommandInfo::kShellFieldNumber;
const int CommandInfo::kValueFieldNumber;
const int CommandInfo::kArgumentsFieldNumber;
const int CommandInfo::kUserFieldNumber;
#endif  // !_MSC_VER

CommandInfo::CommandInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandInfo::InitAsDefaultInstance() {
  container_ = const_cast< ::mesos::v1::CommandInfo_ContainerInfo*>(&::mesos::v1::CommandInfo_ContainerInfo::default_instance());
  environment_ = const_cast< ::mesos::v1::Environment*>(&::mesos::v1::Environment::default_instance());
}

CommandInfo::CommandInfo(const CommandInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandInfo::SharedCtor() {
  _cached_size_ = 0;
  container_ = NULL;
  environment_ = NULL;
  shell_ = true;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandInfo::~CommandInfo() {
  SharedDtor();
}

void CommandInfo::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
    delete container_;
    delete environment_;
  }
}

void CommandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandInfo_descriptor_;
}

const CommandInfo& CommandInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

CommandInfo* CommandInfo::default_instance_ = NULL;

CommandInfo* CommandInfo::New() const {
  return new CommandInfo;
}

void CommandInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container()) {
      if (container_ != NULL) container_->::mesos::v1::CommandInfo_ContainerInfo::Clear();
    }
    if (has_environment()) {
      if (environment_ != NULL) environment_->::mesos::v1::Environment::Clear();
    }
    shell_ = true;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  uris_.Clear();
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.CommandInfo.URI uris = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uris:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_uris()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_uris;
        if (input->ExpectTag(18)) goto parse_environment;
        break;
      }

      // optional .mesos.v1.Environment environment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_container;
        break;
      }

      // optional .mesos.v1.CommandInfo.ContainerInfo container = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shell;
        break;
      }

      // optional bool shell = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shell_)));
          set_has_shell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_arguments;
        break;
      }

      // repeated string arguments = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arguments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arguments(this->arguments_size() - 1).data(),
            this->arguments(this->arguments_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.CommandInfo.URI uris = 1;
  for (int i = 0; i < this->uris_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uris(i), output);
  }

  // optional .mesos.v1.Environment environment = 2;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->environment(), output);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }

  // optional .mesos.v1.CommandInfo.ContainerInfo container = 4;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->container(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional bool shell = 6 [default = true];
  if (has_shell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->shell(), output);
  }

  // repeated string arguments = 7;
  for (int i = 0; i < this->arguments_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->arguments(i).data(), this->arguments(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->arguments(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.CommandInfo.URI uris = 1;
  for (int i = 0; i < this->uris_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uris(i), target);
  }

  // optional .mesos.v1.Environment environment = 2;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->environment(), target);
  }

  // optional string value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  // optional .mesos.v1.CommandInfo.ContainerInfo container = 4;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->container(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional bool shell = 6 [default = true];
  if (has_shell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->shell(), target);
  }

  // repeated string arguments = 7;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arguments(i).data(), this->arguments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->arguments(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.v1.CommandInfo.ContainerInfo container = 4;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional .mesos.v1.Environment environment = 2;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }

    // optional bool shell = 6 [default = true];
    if (has_shell()) {
      total_size += 1 + 1;
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  // repeated .mesos.v1.CommandInfo.URI uris = 1;
  total_size += 1 * this->uris_size();
  for (int i = 0; i < this->uris_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uris(i));
  }

  // repeated string arguments = 7;
  total_size += 1 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arguments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandInfo::MergeFrom(const CommandInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  uris_.MergeFrom(from.uris_);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      mutable_container()->::mesos::v1::CommandInfo_ContainerInfo::MergeFrom(from.container());
    }
    if (from.has_environment()) {
      mutable_environment()->::mesos::v1::Environment::MergeFrom(from.environment());
    }
    if (from.has_shell()) {
      set_shell(from.shell());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandInfo::CopyFrom(const CommandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInfo::IsInitialized() const {

  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  for (int i = 0; i < uris_size(); i++) {
    if (!this->uris(i).IsInitialized()) return false;
  }
  if (has_environment()) {
    if (!this->environment().IsInitialized()) return false;
  }
  return true;
}

void CommandInfo::Swap(CommandInfo* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    uris_.Swap(&other->uris_);
    std::swap(environment_, other->environment_);
    std::swap(shell_, other->shell_);
    std::swap(value_, other->value_);
    arguments_.Swap(&other->arguments_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandInfo_descriptor_;
  metadata.reflection = CommandInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutorInfo::kExecutorIdFieldNumber;
const int ExecutorInfo::kFrameworkIdFieldNumber;
const int ExecutorInfo::kCommandFieldNumber;
const int ExecutorInfo::kContainerFieldNumber;
const int ExecutorInfo::kResourcesFieldNumber;
const int ExecutorInfo::kNameFieldNumber;
const int ExecutorInfo::kSourceFieldNumber;
const int ExecutorInfo::kDataFieldNumber;
const int ExecutorInfo::kDiscoveryFieldNumber;
#endif  // !_MSC_VER

ExecutorInfo::ExecutorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutorInfo::InitAsDefaultInstance() {
  executor_id_ = const_cast< ::mesos::v1::ExecutorID*>(&::mesos::v1::ExecutorID::default_instance());
  framework_id_ = const_cast< ::mesos::v1::FrameworkID*>(&::mesos::v1::FrameworkID::default_instance());
  command_ = const_cast< ::mesos::v1::CommandInfo*>(&::mesos::v1::CommandInfo::default_instance());
  container_ = const_cast< ::mesos::v1::ContainerInfo*>(&::mesos::v1::ContainerInfo::default_instance());
  discovery_ = const_cast< ::mesos::v1::DiscoveryInfo*>(&::mesos::v1::DiscoveryInfo::default_instance());
}

ExecutorInfo::ExecutorInfo(const ExecutorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutorInfo::SharedCtor() {
  _cached_size_ = 0;
  executor_id_ = NULL;
  framework_id_ = NULL;
  command_ = NULL;
  container_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discovery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutorInfo::~ExecutorInfo() {
  SharedDtor();
}

void ExecutorInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete executor_id_;
    delete framework_id_;
    delete command_;
    delete container_;
    delete discovery_;
  }
}

void ExecutorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutorInfo_descriptor_;
}

const ExecutorInfo& ExecutorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ExecutorInfo* ExecutorInfo::default_instance_ = NULL;

ExecutorInfo* ExecutorInfo::New() const {
  return new ExecutorInfo;
}

void ExecutorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executor_id()) {
      if (executor_id_ != NULL) executor_id_->::mesos::v1::ExecutorID::Clear();
    }
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::v1::FrameworkID::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::mesos::v1::CommandInfo::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::mesos::v1::ContainerInfo::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_discovery()) {
      if (discovery_ != NULL) discovery_->::mesos::v1::DiscoveryInfo::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.ExecutorID executor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        if (input->ExpectTag(58)) goto parse_command;
        break;
      }

      // required .mesos.v1.CommandInfo command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_framework_id;
        break;
      }

      // optional .mesos.v1.FrameworkID framework_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_source;
        break;
      }

      // optional string source = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_container;
        break;
      }

      // optional .mesos.v1.ContainerInfo container = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_discovery;
        break;
      }

      // optional .mesos.v1.DiscoveryInfo discovery = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discovery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discovery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.ExecutorID executor_id = 1;
  if (has_executor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_id(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // repeated .mesos.v1.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resources(i), output);
  }

  // required .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->command(), output);
  }

  // optional .mesos.v1.FrameworkID framework_id = 8;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->framework_id(), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }

  // optional string source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->source(), output);
  }

  // optional .mesos.v1.ContainerInfo container = 11;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->container(), output);
  }

  // optional .mesos.v1.DiscoveryInfo discovery = 12;
  if (has_discovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->discovery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.ExecutorID executor_id = 1;
  if (has_executor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_id(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // repeated .mesos.v1.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resources(i), target);
  }

  // required .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->command(), target);
  }

  // optional .mesos.v1.FrameworkID framework_id = 8;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->framework_id(), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  // optional string source = 10;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->source(), target);
  }

  // optional .mesos.v1.ContainerInfo container = 11;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->container(), target);
  }

  // optional .mesos.v1.DiscoveryInfo discovery = 12;
  if (has_discovery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->discovery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.ExecutorID executor_id = 1;
    if (has_executor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_id());
    }

    // optional .mesos.v1.FrameworkID framework_id = 8;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // required .mesos.v1.CommandInfo command = 7;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .mesos.v1.ContainerInfo container = 11;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 10;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.v1.DiscoveryInfo discovery = 12;
    if (has_discovery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discovery());
    }

  }
  // repeated .mesos.v1.Resource resources = 5;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutorInfo::MergeFrom(const ExecutorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_id()) {
      mutable_executor_id()->::mesos::v1::ExecutorID::MergeFrom(from.executor_id());
    }
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::v1::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_command()) {
      mutable_command()->::mesos::v1::CommandInfo::MergeFrom(from.command());
    }
    if (from.has_container()) {
      mutable_container()->::mesos::v1::ContainerInfo::MergeFrom(from.container());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_discovery()) {
      mutable_discovery()->::mesos::v1::DiscoveryInfo::MergeFrom(from.discovery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutorInfo::CopyFrom(const ExecutorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_executor_id()) {
    if (!this->executor_id().IsInitialized()) return false;
  }
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  if (has_discovery()) {
    if (!this->discovery().IsInitialized()) return false;
  }
  return true;
}

void ExecutorInfo::Swap(ExecutorInfo* other) {
  if (other != this) {
    std::swap(executor_id_, other->executor_id_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(command_, other->command_);
    std::swap(container_, other->container_);
    resources_.Swap(&other->resources_);
    std::swap(name_, other->name_);
    std::swap(source_, other->source_);
    std::swap(data_, other->data_);
    std::swap(discovery_, other->discovery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutorInfo_descriptor_;
  metadata.reflection = ExecutorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterInfo::kIdFieldNumber;
const int MasterInfo::kIpFieldNumber;
const int MasterInfo::kPortFieldNumber;
const int MasterInfo::kPidFieldNumber;
const int MasterInfo::kHostnameFieldNumber;
const int MasterInfo::kVersionFieldNumber;
const int MasterInfo::kAddressFieldNumber;
#endif  // !_MSC_VER

MasterInfo::MasterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MasterInfo::InitAsDefaultInstance() {
  address_ = const_cast< ::mesos::v1::Address*>(&::mesos::v1::Address::default_instance());
}

MasterInfo::MasterInfo(const MasterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MasterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = 0u;
  port_ = 5050u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterInfo::~MasterInfo() {
  SharedDtor();
}

void MasterInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (pid_ != &::google::protobuf::internal::kEmptyString) {
    delete pid_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void MasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterInfo_descriptor_;
}

const MasterInfo& MasterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

MasterInfo* MasterInfo::default_instance_ = NULL;

MasterInfo* MasterInfo::New() const {
  return new MasterInfo;
}

void MasterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    ip_ = 0u;
    port_ = 5050u;
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::kEmptyString) {
        pid_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::mesos::v1::Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // required uint32 ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3 [default = 5050];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pid;
        break;
      }

      // optional string pid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hostname;
        break;
      }

      // optional string hostname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // optional .mesos.v1.Address address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // required uint32 port = 3 [default = 5050];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pid(), output);
  }

  // optional string hostname = 5;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hostname(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // optional .mesos.v1.Address address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MasterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }

  // required uint32 port = 3 [default = 5050];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pid(), target);
  }

  // optional string hostname = 5;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hostname(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // optional .mesos.v1.Address address = 7;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MasterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 3 [default = 5050];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string hostname = 5;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .mesos.v1.Address address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterInfo::MergeFrom(const MasterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_address()) {
      mutable_address()->::mesos::v1::Address::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterInfo::CopyFrom(const MasterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  return true;
}

void MasterInfo::Swap(MasterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(pid_, other->pid_);
    std::swap(hostname_, other->hostname_);
    std::swap(version_, other->version_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterInfo_descriptor_;
  metadata.reflection = MasterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfo::kHostnameFieldNumber;
const int AgentInfo::kPortFieldNumber;
const int AgentInfo::kResourcesFieldNumber;
const int AgentInfo::kAttributesFieldNumber;
const int AgentInfo::kIdFieldNumber;
#endif  // !_MSC_VER

AgentInfo::AgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
}

AgentInfo::AgentInfo(const AgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInfo::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 5051;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfo::~AgentInfo() {
  SharedDtor();
}

void AgentInfo::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void AgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInfo_descriptor_;
}

const AgentInfo& AgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

AgentInfo* AgentInfo::default_instance_ = NULL;

AgentInfo* AgentInfo::New() const {
  return new AgentInfo;
}

void AgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    port_ = 5051;
    if (has_id()) {
      if (id_ != NULL) id_->::mesos::v1::AgentID::Clear();
    }
  }
  resources_.Clear();
  attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resources;
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }

      // repeated .mesos.v1.Attribute attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional .mesos.v1.AgentID id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }

      // optional int32 port = 8 [default = 5051];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }

  // repeated .mesos.v1.Resource resources = 3;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resources(i), output);
  }

  // repeated .mesos.v1.Attribute attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attributes(i), output);
  }

  // optional .mesos.v1.AgentID id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->id(), output);
  }

  // optional int32 port = 8 [default = 5051];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // repeated .mesos.v1.Resource resources = 3;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resources(i), target);
  }

  // repeated .mesos.v1.Attribute attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attributes(i), target);
  }

  // optional .mesos.v1.AgentID id = 6;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->id(), target);
  }

  // optional int32 port = 8 [default = 5051];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 port = 8 [default = 5051];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional .mesos.v1.AgentID id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated .mesos.v1.Resource resources = 3;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  // repeated .mesos.v1.Attribute attributes = 5;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  attributes_.MergeFrom(from.attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_id()) {
      mutable_id()->::mesos::v1::AgentID::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void AgentInfo::Swap(AgentInfo* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(port_, other->port_);
    resources_.Swap(&other->resources_);
    attributes_.Swap(&other->attributes_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInfo_descriptor_;
  metadata.reflection = AgentInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Value_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Type_descriptor_;
}
bool Value_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Value_Type Value::SCALAR;
const Value_Type Value::RANGES;
const Value_Type Value::SET;
const Value_Type Value::TEXT;
const Value_Type Value::Type_MIN;
const Value_Type Value::Type_MAX;
const int Value::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Value_Scalar::kValueFieldNumber;
#endif  // !_MSC_VER

Value_Scalar::Value_Scalar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value_Scalar::InitAsDefaultInstance() {
}

Value_Scalar::Value_Scalar(const Value_Scalar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value_Scalar::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value_Scalar::~Value_Scalar() {
  SharedDtor();
}

void Value_Scalar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Value_Scalar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value_Scalar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Scalar_descriptor_;
}

const Value_Scalar& Value_Scalar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value_Scalar* Value_Scalar::default_instance_ = NULL;

Value_Scalar* Value_Scalar::New() const {
  return new Value_Scalar;
}

void Value_Scalar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value_Scalar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value_Scalar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value_Scalar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value_Scalar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value = 1;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_Scalar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value_Scalar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value_Scalar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value_Scalar::MergeFrom(const Value_Scalar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value_Scalar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Scalar::CopyFrom(const Value_Scalar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Scalar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Value_Scalar::Swap(Value_Scalar* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value_Scalar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_Scalar_descriptor_;
  metadata.reflection = Value_Scalar_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Value_Range::kBeginFieldNumber;
const int Value_Range::kEndFieldNumber;
#endif  // !_MSC_VER

Value_Range::Value_Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value_Range::InitAsDefaultInstance() {
}

Value_Range::Value_Range(const Value_Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value_Range::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value_Range::~Value_Range() {
  SharedDtor();
}

void Value_Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Value_Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value_Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Range_descriptor_;
}

const Value_Range& Value_Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value_Range* Value_Range::default_instance_ = NULL;

Value_Range* Value_Range::New() const {
  return new Value_Range;
}

void Value_Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value_Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required uint64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value_Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->begin(), output);
  }

  // required uint64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value_Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->begin(), target);
  }

  // required uint64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value_Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }

    // required uint64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value_Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value_Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value_Range::MergeFrom(const Value_Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value_Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Range::CopyFrom(const Value_Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Range::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Value_Range::Swap(Value_Range* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value_Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_Range_descriptor_;
  metadata.reflection = Value_Range_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Value_Ranges::kRangeFieldNumber;
#endif  // !_MSC_VER

Value_Ranges::Value_Ranges()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value_Ranges::InitAsDefaultInstance() {
}

Value_Ranges::Value_Ranges(const Value_Ranges& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value_Ranges::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value_Ranges::~Value_Ranges() {
  SharedDtor();
}

void Value_Ranges::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Value_Ranges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value_Ranges::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Ranges_descriptor_;
}

const Value_Ranges& Value_Ranges::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value_Ranges* Value_Ranges::default_instance_ = NULL;

Value_Ranges* Value_Ranges::New() const {
  return new Value_Ranges;
}

void Value_Ranges::Clear() {
  range_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value_Ranges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Value.Range range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_range;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value_Ranges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Value.Range range = 1;
  for (int i = 0; i < this->range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value_Ranges::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Value.Range range = 1;
  for (int i = 0; i < this->range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value_Ranges::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Value.Range range = 1;
  total_size += 1 * this->range_size();
  for (int i = 0; i < this->range_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->range(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_Ranges::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value_Ranges* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value_Ranges*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value_Ranges::MergeFrom(const Value_Ranges& from) {
  GOOGLE_CHECK_NE(&from, this);
  range_.MergeFrom(from.range_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value_Ranges::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Ranges::CopyFrom(const Value_Ranges& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Ranges::IsInitialized() const {

  for (int i = 0; i < range_size(); i++) {
    if (!this->range(i).IsInitialized()) return false;
  }
  return true;
}

void Value_Ranges::Swap(Value_Ranges* other) {
  if (other != this) {
    range_.Swap(&other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value_Ranges::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_Ranges_descriptor_;
  metadata.reflection = Value_Ranges_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Value_Set::kItemFieldNumber;
#endif  // !_MSC_VER

Value_Set::Value_Set()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value_Set::InitAsDefaultInstance() {
}

Value_Set::Value_Set(const Value_Set& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value_Set::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value_Set::~Value_Set() {
  SharedDtor();
}

void Value_Set::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Value_Set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value_Set::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Set_descriptor_;
}

const Value_Set& Value_Set::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value_Set* Value_Set::default_instance_ = NULL;

Value_Set* Value_Set::New() const {
  return new Value_Set;
}

void Value_Set::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value_Set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item(this->item_size() - 1).data(),
            this->item(this->item_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value_Set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string item = 1;
  for (int i = 0; i < this->item_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item(i).data(), this->item(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value_Set::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item(i).data(), this->item(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value_Set::ByteSize() const {
  int total_size = 0;

  // repeated string item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_Set::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value_Set* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value_Set*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value_Set::MergeFrom(const Value_Set& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value_Set::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Set::CopyFrom(const Value_Set& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Set::IsInitialized() const {

  return true;
}

void Value_Set::Swap(Value_Set* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value_Set::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_Set_descriptor_;
  metadata.reflection = Value_Set_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Value_Text::kValueFieldNumber;
#endif  // !_MSC_VER

Value_Text::Value_Text()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value_Text::InitAsDefaultInstance() {
}

Value_Text::Value_Text(const Value_Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value_Text::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value_Text::~Value_Text() {
  SharedDtor();
}

void Value_Text::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Value_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value_Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_Text_descriptor_;
}

const Value_Text& Value_Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value_Text* Value_Text::default_instance_ = NULL;

Value_Text* Value_Text::New() const {
  return new Value_Text;
}

void Value_Text::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value_Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value_Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value_Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value_Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value_Text::MergeFrom(const Value_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value_Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value_Text::CopyFrom(const Value_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Value_Text::Swap(Value_Text* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value_Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_Text_descriptor_;
  metadata.reflection = Value_Text_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Value::kTypeFieldNumber;
const int Value::kScalarFieldNumber;
const int Value::kRangesFieldNumber;
const int Value::kSetFieldNumber;
const int Value::kTextFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
  scalar_ = const_cast< ::mesos::v1::Value_Scalar*>(&::mesos::v1::Value_Scalar::default_instance());
  ranges_ = const_cast< ::mesos::v1::Value_Ranges*>(&::mesos::v1::Value_Ranges::default_instance());
  set_ = const_cast< ::mesos::v1::Value_Set*>(&::mesos::v1::Value_Set::default_instance());
  text_ = const_cast< ::mesos::v1::Value_Text*>(&::mesos::v1::Value_Text::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  scalar_ = NULL;
  ranges_ = NULL;
  set_ = NULL;
  text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (this != default_instance_) {
    delete scalar_;
    delete ranges_;
    delete set_;
    delete text_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_scalar()) {
      if (scalar_ != NULL) scalar_->::mesos::v1::Value_Scalar::Clear();
    }
    if (has_ranges()) {
      if (ranges_ != NULL) ranges_->::mesos::v1::Value_Ranges::Clear();
    }
    if (has_set()) {
      if (set_ != NULL) set_->::mesos::v1::Value_Set::Clear();
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mesos::v1::Value_Text::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.Value.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Value_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scalar;
        break;
      }

      // optional .mesos.v1.Value.Scalar scalar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ranges;
        break;
      }

      // optional .mesos.v1.Value.Ranges ranges = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_set;
        break;
      }

      // optional .mesos.v1.Value.Set set = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .mesos.v1.Value.Text text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.Value.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.v1.Value.Scalar scalar = 2;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scalar(), output);
  }

  // optional .mesos.v1.Value.Ranges ranges = 3;
  if (has_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ranges(), output);
  }

  // optional .mesos.v1.Value.Set set = 4;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->set(), output);
  }

  // optional .mesos.v1.Value.Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.Value.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.v1.Value.Scalar scalar = 2;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scalar(), target);
  }

  // optional .mesos.v1.Value.Ranges ranges = 3;
  if (has_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ranges(), target);
  }

  // optional .mesos.v1.Value.Set set = 4;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->set(), target);
  }

  // optional .mesos.v1.Value.Text text = 5;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.Value.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.Value.Scalar scalar = 2;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }

    // optional .mesos.v1.Value.Ranges ranges = 3;
    if (has_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges());
    }

    // optional .mesos.v1.Value.Set set = 4;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set());
    }

    // optional .mesos.v1.Value.Text text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      mutable_scalar()->::mesos::v1::Value_Scalar::MergeFrom(from.scalar());
    }
    if (from.has_ranges()) {
      mutable_ranges()->::mesos::v1::Value_Ranges::MergeFrom(from.ranges());
    }
    if (from.has_set()) {
      mutable_set()->::mesos::v1::Value_Set::MergeFrom(from.set());
    }
    if (from.has_text()) {
      mutable_text()->::mesos::v1::Value_Text::MergeFrom(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_ranges()) {
    if (!this->ranges().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(ranges_, other->ranges_);
    std::swap(set_, other->set_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attribute::kNameFieldNumber;
const int Attribute::kTypeFieldNumber;
const int Attribute::kScalarFieldNumber;
const int Attribute::kRangesFieldNumber;
const int Attribute::kSetFieldNumber;
const int Attribute::kTextFieldNumber;
#endif  // !_MSC_VER

Attribute::Attribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attribute::InitAsDefaultInstance() {
  scalar_ = const_cast< ::mesos::v1::Value_Scalar*>(&::mesos::v1::Value_Scalar::default_instance());
  ranges_ = const_cast< ::mesos::v1::Value_Ranges*>(&::mesos::v1::Value_Ranges::default_instance());
  set_ = const_cast< ::mesos::v1::Value_Set*>(&::mesos::v1::Value_Set::default_instance());
  text_ = const_cast< ::mesos::v1::Value_Text*>(&::mesos::v1::Value_Text::default_instance());
}

Attribute::Attribute(const Attribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attribute::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  scalar_ = NULL;
  ranges_ = NULL;
  set_ = NULL;
  text_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attribute::~Attribute() {
  SharedDtor();
}

void Attribute::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete scalar_;
    delete ranges_;
    delete set_;
    delete text_;
  }
}

void Attribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_descriptor_;
}

const Attribute& Attribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Attribute* Attribute::default_instance_ = NULL;

Attribute* Attribute::New() const {
  return new Attribute;
}

void Attribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_scalar()) {
      if (scalar_ != NULL) scalar_->::mesos::v1::Value_Scalar::Clear();
    }
    if (has_ranges()) {
      if (ranges_ != NULL) ranges_->::mesos::v1::Value_Ranges::Clear();
    }
    if (has_set()) {
      if (set_ != NULL) set_->::mesos::v1::Value_Set::Clear();
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mesos::v1::Value_Text::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .mesos.v1.Value.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Value_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scalar;
        break;
      }

      // optional .mesos.v1.Value.Scalar scalar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ranges;
        break;
      }

      // optional .mesos.v1.Value.Ranges ranges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .mesos.v1.Value.Text text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_set;
        break;
      }

      // optional .mesos.v1.Value.Set set = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .mesos.v1.Value.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .mesos.v1.Value.Scalar scalar = 3;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scalar(), output);
  }

  // optional .mesos.v1.Value.Ranges ranges = 4;
  if (has_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranges(), output);
  }

  // optional .mesos.v1.Value.Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->text(), output);
  }

  // optional .mesos.v1.Value.Set set = 6;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mesos.v1.Value.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .mesos.v1.Value.Scalar scalar = 3;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scalar(), target);
  }

  // optional .mesos.v1.Value.Ranges ranges = 4;
  if (has_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranges(), target);
  }

  // optional .mesos.v1.Value.Text text = 5;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->text(), target);
  }

  // optional .mesos.v1.Value.Set set = 6;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .mesos.v1.Value.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.Value.Scalar scalar = 3;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }

    // optional .mesos.v1.Value.Ranges ranges = 4;
    if (has_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges());
    }

    // optional .mesos.v1.Value.Set set = 6;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set());
    }

    // optional .mesos.v1.Value.Text text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attribute::MergeFrom(const Attribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      mutable_scalar()->::mesos::v1::Value_Scalar::MergeFrom(from.scalar());
    }
    if (from.has_ranges()) {
      mutable_ranges()->::mesos::v1::Value_Ranges::MergeFrom(from.ranges());
    }
    if (from.has_set()) {
      mutable_set()->::mesos::v1::Value_Set::MergeFrom(from.set());
    }
    if (from.has_text()) {
      mutable_text()->::mesos::v1::Value_Text::MergeFrom(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attribute::CopyFrom(const Attribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_ranges()) {
    if (!this->ranges().IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text().IsInitialized()) return false;
  }
  return true;
}

void Attribute::Swap(Attribute* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(ranges_, other->ranges_);
    std::swap(set_, other->set_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attribute_descriptor_;
  metadata.reflection = Attribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resource_ReservationInfo::kPrincipalFieldNumber;
#endif  // !_MSC_VER

Resource_ReservationInfo::Resource_ReservationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_ReservationInfo::InitAsDefaultInstance() {
}

Resource_ReservationInfo::Resource_ReservationInfo(const Resource_ReservationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_ReservationInfo::SharedCtor() {
  _cached_size_ = 0;
  principal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_ReservationInfo::~Resource_ReservationInfo() {
  SharedDtor();
}

void Resource_ReservationInfo::SharedDtor() {
  if (principal_ != &::google::protobuf::internal::kEmptyString) {
    delete principal_;
  }
  if (this != default_instance_) {
  }
}

void Resource_ReservationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_ReservationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_ReservationInfo_descriptor_;
}

const Resource_ReservationInfo& Resource_ReservationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Resource_ReservationInfo* Resource_ReservationInfo::default_instance_ = NULL;

Resource_ReservationInfo* Resource_ReservationInfo::New() const {
  return new Resource_ReservationInfo;
}

void Resource_ReservationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_principal()) {
      if (principal_ != &::google::protobuf::internal::kEmptyString) {
        principal_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_ReservationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string principal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->principal().data(), this->principal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_ReservationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string principal = 1;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->principal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_ReservationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string principal = 1;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->principal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_ReservationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string principal = 1;
    if (has_principal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->principal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_ReservationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_ReservationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_ReservationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_ReservationInfo::MergeFrom(const Resource_ReservationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_principal()) {
      set_principal(from.principal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_ReservationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_ReservationInfo::CopyFrom(const Resource_ReservationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_ReservationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Resource_ReservationInfo::Swap(Resource_ReservationInfo* other) {
  if (other != this) {
    std::swap(principal_, other->principal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_ReservationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_ReservationInfo_descriptor_;
  metadata.reflection = Resource_ReservationInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Resource_DiskInfo_Persistence::kIdFieldNumber;
#endif  // !_MSC_VER

Resource_DiskInfo_Persistence::Resource_DiskInfo_Persistence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_DiskInfo_Persistence::InitAsDefaultInstance() {
}

Resource_DiskInfo_Persistence::Resource_DiskInfo_Persistence(const Resource_DiskInfo_Persistence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_DiskInfo_Persistence::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_DiskInfo_Persistence::~Resource_DiskInfo_Persistence() {
  SharedDtor();
}

void Resource_DiskInfo_Persistence::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Resource_DiskInfo_Persistence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_DiskInfo_Persistence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_DiskInfo_Persistence_descriptor_;
}

const Resource_DiskInfo_Persistence& Resource_DiskInfo_Persistence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Resource_DiskInfo_Persistence* Resource_DiskInfo_Persistence::default_instance_ = NULL;

Resource_DiskInfo_Persistence* Resource_DiskInfo_Persistence::New() const {
  return new Resource_DiskInfo_Persistence;
}

void Resource_DiskInfo_Persistence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_DiskInfo_Persistence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_DiskInfo_Persistence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_DiskInfo_Persistence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_DiskInfo_Persistence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_DiskInfo_Persistence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_DiskInfo_Persistence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_DiskInfo_Persistence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_DiskInfo_Persistence::MergeFrom(const Resource_DiskInfo_Persistence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_DiskInfo_Persistence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_DiskInfo_Persistence::CopyFrom(const Resource_DiskInfo_Persistence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_DiskInfo_Persistence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Resource_DiskInfo_Persistence::Swap(Resource_DiskInfo_Persistence* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_DiskInfo_Persistence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_DiskInfo_Persistence_descriptor_;
  metadata.reflection = Resource_DiskInfo_Persistence_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Resource_DiskInfo::kPersistenceFieldNumber;
const int Resource_DiskInfo::kVolumeFieldNumber;
#endif  // !_MSC_VER

Resource_DiskInfo::Resource_DiskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_DiskInfo::InitAsDefaultInstance() {
  persistence_ = const_cast< ::mesos::v1::Resource_DiskInfo_Persistence*>(&::mesos::v1::Resource_DiskInfo_Persistence::default_instance());
  volume_ = const_cast< ::mesos::v1::Volume*>(&::mesos::v1::Volume::default_instance());
}

Resource_DiskInfo::Resource_DiskInfo(const Resource_DiskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_DiskInfo::SharedCtor() {
  _cached_size_ = 0;
  persistence_ = NULL;
  volume_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_DiskInfo::~Resource_DiskInfo() {
  SharedDtor();
}

void Resource_DiskInfo::SharedDtor() {
  if (this != default_instance_) {
    delete persistence_;
    delete volume_;
  }
}

void Resource_DiskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_DiskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_DiskInfo_descriptor_;
}

const Resource_DiskInfo& Resource_DiskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Resource_DiskInfo* Resource_DiskInfo::default_instance_ = NULL;

Resource_DiskInfo* Resource_DiskInfo::New() const {
  return new Resource_DiskInfo;
}

void Resource_DiskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_persistence()) {
      if (persistence_ != NULL) persistence_->::mesos::v1::Resource_DiskInfo_Persistence::Clear();
    }
    if (has_volume()) {
      if (volume_ != NULL) volume_->::mesos::v1::Volume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_DiskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.v1.Resource.DiskInfo.Persistence persistence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_persistence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_volume;
        break;
      }

      // optional .mesos.v1.Volume volume = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_volume()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource_DiskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.v1.Resource.DiskInfo.Persistence persistence = 1;
  if (has_persistence()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->persistence(), output);
  }

  // optional .mesos.v1.Volume volume = 2;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_DiskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.v1.Resource.DiskInfo.Persistence persistence = 1;
  if (has_persistence()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->persistence(), target);
  }

  // optional .mesos.v1.Volume volume = 2;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_DiskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.v1.Resource.DiskInfo.Persistence persistence = 1;
    if (has_persistence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persistence());
    }

    // optional .mesos.v1.Volume volume = 2;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_DiskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_DiskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_DiskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_DiskInfo::MergeFrom(const Resource_DiskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_persistence()) {
      mutable_persistence()->::mesos::v1::Resource_DiskInfo_Persistence::MergeFrom(from.persistence());
    }
    if (from.has_volume()) {
      mutable_volume()->::mesos::v1::Volume::MergeFrom(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_DiskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_DiskInfo::CopyFrom(const Resource_DiskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_DiskInfo::IsInitialized() const {

  if (has_persistence()) {
    if (!this->persistence().IsInitialized()) return false;
  }
  if (has_volume()) {
    if (!this->volume().IsInitialized()) return false;
  }
  return true;
}

void Resource_DiskInfo::Swap(Resource_DiskInfo* other) {
  if (other != this) {
    std::swap(persistence_, other->persistence_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_DiskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_DiskInfo_descriptor_;
  metadata.reflection = Resource_DiskInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Resource_RevocableInfo::Resource_RevocableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource_RevocableInfo::InitAsDefaultInstance() {
}

Resource_RevocableInfo::Resource_RevocableInfo(const Resource_RevocableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource_RevocableInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource_RevocableInfo::~Resource_RevocableInfo() {
  SharedDtor();
}

void Resource_RevocableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource_RevocableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource_RevocableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_RevocableInfo_descriptor_;
}

const Resource_RevocableInfo& Resource_RevocableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Resource_RevocableInfo* Resource_RevocableInfo::default_instance_ = NULL;

Resource_RevocableInfo* Resource_RevocableInfo::New() const {
  return new Resource_RevocableInfo;
}

void Resource_RevocableInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource_RevocableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Resource_RevocableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource_RevocableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource_RevocableInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource_RevocableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource_RevocableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource_RevocableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource_RevocableInfo::MergeFrom(const Resource_RevocableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource_RevocableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource_RevocableInfo::CopyFrom(const Resource_RevocableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource_RevocableInfo::IsInitialized() const {

  return true;
}

void Resource_RevocableInfo::Swap(Resource_RevocableInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource_RevocableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_RevocableInfo_descriptor_;
  metadata.reflection = Resource_RevocableInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

::std::string* Resource::_default_role_ = NULL;
#ifndef _MSC_VER
const int Resource::kNameFieldNumber;
const int Resource::kTypeFieldNumber;
const int Resource::kScalarFieldNumber;
const int Resource::kRangesFieldNumber;
const int Resource::kSetFieldNumber;
const int Resource::kRoleFieldNumber;
const int Resource::kReservationFieldNumber;
const int Resource::kDiskFieldNumber;
const int Resource::kRevocableFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
  scalar_ = const_cast< ::mesos::v1::Value_Scalar*>(&::mesos::v1::Value_Scalar::default_instance());
  ranges_ = const_cast< ::mesos::v1::Value_Ranges*>(&::mesos::v1::Value_Ranges::default_instance());
  set_ = const_cast< ::mesos::v1::Value_Set*>(&::mesos::v1::Value_Set::default_instance());
  reservation_ = const_cast< ::mesos::v1::Resource_ReservationInfo*>(&::mesos::v1::Resource_ReservationInfo::default_instance());
  disk_ = const_cast< ::mesos::v1::Resource_DiskInfo*>(&::mesos::v1::Resource_DiskInfo::default_instance());
  revocable_ = const_cast< ::mesos::v1::Resource_RevocableInfo*>(&::mesos::v1::Resource_RevocableInfo::default_instance());
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  scalar_ = NULL;
  ranges_ = NULL;
  set_ = NULL;
  role_ = const_cast< ::std::string*>(_default_role_);
  reservation_ = NULL;
  disk_ = NULL;
  revocable_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (role_ != _default_role_) {
    delete role_;
  }
  if (this != default_instance_) {
    delete scalar_;
    delete ranges_;
    delete set_;
    delete reservation_;
    delete disk_;
    delete revocable_;
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    if (has_scalar()) {
      if (scalar_ != NULL) scalar_->::mesos::v1::Value_Scalar::Clear();
    }
    if (has_ranges()) {
      if (ranges_ != NULL) ranges_->::mesos::v1::Value_Ranges::Clear();
    }
    if (has_set()) {
      if (set_ != NULL) set_->::mesos::v1::Value_Set::Clear();
    }
    if (has_role()) {
      if (role_ != _default_role_) {
        role_->assign(*_default_role_);
      }
    }
    if (has_reservation()) {
      if (reservation_ != NULL) reservation_->::mesos::v1::Resource_ReservationInfo::Clear();
    }
    if (has_disk()) {
      if (disk_ != NULL) disk_->::mesos::v1::Resource_DiskInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_revocable()) {
      if (revocable_ != NULL) revocable_->::mesos::v1::Resource_RevocableInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .mesos.v1.Value.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Value_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::Value_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scalar;
        break;
      }

      // optional .mesos.v1.Value.Scalar scalar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scalar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scalar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ranges;
        break;
      }

      // optional .mesos.v1.Value.Ranges ranges = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ranges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_set;
        break;
      }

      // optional .mesos.v1.Value.Set set = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role;
        break;
      }

      // optional string role = 6 [default = "*"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_disk;
        break;
      }

      // optional .mesos.v1.Resource.DiskInfo disk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reservation;
        break;
      }

      // optional .mesos.v1.Resource.ReservationInfo reservation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_revocable;
        break;
      }

      // optional .mesos.v1.Resource.RevocableInfo revocable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_revocable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .mesos.v1.Value.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .mesos.v1.Value.Scalar scalar = 3;
  if (has_scalar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scalar(), output);
  }

  // optional .mesos.v1.Value.Ranges ranges = 4;
  if (has_ranges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ranges(), output);
  }

  // optional .mesos.v1.Value.Set set = 5;
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->set(), output);
  }

  // optional string role = 6 [default = "*"];
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role(), output);
  }

  // optional .mesos.v1.Resource.DiskInfo disk = 7;
  if (has_disk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->disk(), output);
  }

  // optional .mesos.v1.Resource.ReservationInfo reservation = 8;
  if (has_reservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reservation(), output);
  }

  // optional .mesos.v1.Resource.RevocableInfo revocable = 9;
  if (has_revocable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->revocable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mesos.v1.Value.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .mesos.v1.Value.Scalar scalar = 3;
  if (has_scalar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scalar(), target);
  }

  // optional .mesos.v1.Value.Ranges ranges = 4;
  if (has_ranges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ranges(), target);
  }

  // optional .mesos.v1.Value.Set set = 5;
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set(), target);
  }

  // optional string role = 6 [default = "*"];
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role(), target);
  }

  // optional .mesos.v1.Resource.DiskInfo disk = 7;
  if (has_disk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disk(), target);
  }

  // optional .mesos.v1.Resource.ReservationInfo reservation = 8;
  if (has_reservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reservation(), target);
  }

  // optional .mesos.v1.Resource.RevocableInfo revocable = 9;
  if (has_revocable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->revocable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .mesos.v1.Value.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.Value.Scalar scalar = 3;
    if (has_scalar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scalar());
    }

    // optional .mesos.v1.Value.Ranges ranges = 4;
    if (has_ranges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ranges());
    }

    // optional .mesos.v1.Value.Set set = 5;
    if (has_set()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set());
    }

    // optional string role = 6 [default = "*"];
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

    // optional .mesos.v1.Resource.ReservationInfo reservation = 8;
    if (has_reservation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reservation());
    }

    // optional .mesos.v1.Resource.DiskInfo disk = 7;
    if (has_disk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.v1.Resource.RevocableInfo revocable = 9;
    if (has_revocable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->revocable());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scalar()) {
      mutable_scalar()->::mesos::v1::Value_Scalar::MergeFrom(from.scalar());
    }
    if (from.has_ranges()) {
      mutable_ranges()->::mesos::v1::Value_Ranges::MergeFrom(from.ranges());
    }
    if (from.has_set()) {
      mutable_set()->::mesos::v1::Value_Set::MergeFrom(from.set());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_reservation()) {
      mutable_reservation()->::mesos::v1::Resource_ReservationInfo::MergeFrom(from.reservation());
    }
    if (from.has_disk()) {
      mutable_disk()->::mesos::v1::Resource_DiskInfo::MergeFrom(from.disk());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_revocable()) {
      mutable_revocable()->::mesos::v1::Resource_RevocableInfo::MergeFrom(from.revocable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_scalar()) {
    if (!this->scalar().IsInitialized()) return false;
  }
  if (has_ranges()) {
    if (!this->ranges().IsInitialized()) return false;
  }
  if (has_reservation()) {
    if (!this->reservation().IsInitialized()) return false;
  }
  if (has_disk()) {
    if (!this->disk().IsInitialized()) return false;
  }
  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(scalar_, other->scalar_);
    std::swap(ranges_, other->ranges_);
    std::swap(set_, other->set_);
    std::swap(role_, other->role_);
    std::swap(reservation_, other->reservation_);
    std::swap(disk_, other->disk_);
    std::swap(revocable_, other->revocable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficControlStatistics::kIdFieldNumber;
const int TrafficControlStatistics::kBacklogFieldNumber;
const int TrafficControlStatistics::kBytesFieldNumber;
const int TrafficControlStatistics::kDropsFieldNumber;
const int TrafficControlStatistics::kOverlimitsFieldNumber;
const int TrafficControlStatistics::kPacketsFieldNumber;
const int TrafficControlStatistics::kQlenFieldNumber;
const int TrafficControlStatistics::kRatebpsFieldNumber;
const int TrafficControlStatistics::kRateppsFieldNumber;
const int TrafficControlStatistics::kRequeuesFieldNumber;
#endif  // !_MSC_VER

TrafficControlStatistics::TrafficControlStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficControlStatistics::InitAsDefaultInstance() {
}

TrafficControlStatistics::TrafficControlStatistics(const TrafficControlStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficControlStatistics::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backlog_ = GOOGLE_ULONGLONG(0);
  bytes_ = GOOGLE_ULONGLONG(0);
  drops_ = GOOGLE_ULONGLONG(0);
  overlimits_ = GOOGLE_ULONGLONG(0);
  packets_ = GOOGLE_ULONGLONG(0);
  qlen_ = GOOGLE_ULONGLONG(0);
  ratebps_ = GOOGLE_ULONGLONG(0);
  ratepps_ = GOOGLE_ULONGLONG(0);
  requeues_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficControlStatistics::~TrafficControlStatistics() {
  SharedDtor();
}

void TrafficControlStatistics::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void TrafficControlStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficControlStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficControlStatistics_descriptor_;
}

const TrafficControlStatistics& TrafficControlStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

TrafficControlStatistics* TrafficControlStatistics::default_instance_ = NULL;

TrafficControlStatistics* TrafficControlStatistics::New() const {
  return new TrafficControlStatistics;
}

void TrafficControlStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    backlog_ = GOOGLE_ULONGLONG(0);
    bytes_ = GOOGLE_ULONGLONG(0);
    drops_ = GOOGLE_ULONGLONG(0);
    overlimits_ = GOOGLE_ULONGLONG(0);
    packets_ = GOOGLE_ULONGLONG(0);
    qlen_ = GOOGLE_ULONGLONG(0);
    ratebps_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ratepps_ = GOOGLE_ULONGLONG(0);
    requeues_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficControlStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_backlog;
        break;
      }

      // optional uint64 backlog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backlog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &backlog_)));
          set_has_backlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bytes;
        break;
      }

      // optional uint64 bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
          set_has_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drops;
        break;
      }

      // optional uint64 drops = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &drops_)));
          set_has_drops();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_overlimits;
        break;
      }

      // optional uint64 overlimits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlimits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &overlimits_)));
          set_has_overlimits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_packets;
        break;
      }

      // optional uint64 packets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_)));
          set_has_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_qlen;
        break;
      }

      // optional uint64 qlen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qlen_)));
          set_has_qlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ratebps;
        break;
      }

      // optional uint64 ratebps = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratebps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ratebps_)));
          set_has_ratebps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ratepps;
        break;
      }

      // optional uint64 ratepps = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ratepps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ratepps_)));
          set_has_ratepps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_requeues;
        break;
      }

      // optional uint64 requeues = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requeues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requeues_)));
          set_has_requeues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficControlStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional uint64 backlog = 2;
  if (has_backlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->backlog(), output);
  }

  // optional uint64 bytes = 3;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes(), output);
  }

  // optional uint64 drops = 4;
  if (has_drops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->drops(), output);
  }

  // optional uint64 overlimits = 5;
  if (has_overlimits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->overlimits(), output);
  }

  // optional uint64 packets = 6;
  if (has_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->packets(), output);
  }

  // optional uint64 qlen = 7;
  if (has_qlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->qlen(), output);
  }

  // optional uint64 ratebps = 8;
  if (has_ratebps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->ratebps(), output);
  }

  // optional uint64 ratepps = 9;
  if (has_ratepps()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->ratepps(), output);
  }

  // optional uint64 requeues = 10;
  if (has_requeues()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->requeues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficControlStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional uint64 backlog = 2;
  if (has_backlog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->backlog(), target);
  }

  // optional uint64 bytes = 3;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes(), target);
  }

  // optional uint64 drops = 4;
  if (has_drops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->drops(), target);
  }

  // optional uint64 overlimits = 5;
  if (has_overlimits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->overlimits(), target);
  }

  // optional uint64 packets = 6;
  if (has_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->packets(), target);
  }

  // optional uint64 qlen = 7;
  if (has_qlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->qlen(), target);
  }

  // optional uint64 ratebps = 8;
  if (has_ratebps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->ratebps(), target);
  }

  // optional uint64 ratepps = 9;
  if (has_ratepps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->ratepps(), target);
  }

  // optional uint64 requeues = 10;
  if (has_requeues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->requeues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficControlStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional uint64 backlog = 2;
    if (has_backlog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->backlog());
    }

    // optional uint64 bytes = 3;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes());
    }

    // optional uint64 drops = 4;
    if (has_drops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->drops());
    }

    // optional uint64 overlimits = 5;
    if (has_overlimits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->overlimits());
    }

    // optional uint64 packets = 6;
    if (has_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets());
    }

    // optional uint64 qlen = 7;
    if (has_qlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qlen());
    }

    // optional uint64 ratebps = 8;
    if (has_ratebps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ratebps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 ratepps = 9;
    if (has_ratepps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ratepps());
    }

    // optional uint64 requeues = 10;
    if (has_requeues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->requeues());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficControlStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficControlStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficControlStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficControlStatistics::MergeFrom(const TrafficControlStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_backlog()) {
      set_backlog(from.backlog());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_drops()) {
      set_drops(from.drops());
    }
    if (from.has_overlimits()) {
      set_overlimits(from.overlimits());
    }
    if (from.has_packets()) {
      set_packets(from.packets());
    }
    if (from.has_qlen()) {
      set_qlen(from.qlen());
    }
    if (from.has_ratebps()) {
      set_ratebps(from.ratebps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ratepps()) {
      set_ratepps(from.ratepps());
    }
    if (from.has_requeues()) {
      set_requeues(from.requeues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficControlStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficControlStatistics::CopyFrom(const TrafficControlStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficControlStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TrafficControlStatistics::Swap(TrafficControlStatistics* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(backlog_, other->backlog_);
    std::swap(bytes_, other->bytes_);
    std::swap(drops_, other->drops_);
    std::swap(overlimits_, other->overlimits_);
    std::swap(packets_, other->packets_);
    std::swap(qlen_, other->qlen_);
    std::swap(ratebps_, other->ratebps_);
    std::swap(ratepps_, other->ratepps_);
    std::swap(requeues_, other->requeues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficControlStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficControlStatistics_descriptor_;
  metadata.reflection = TrafficControlStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceStatistics::kTimestampFieldNumber;
const int ResourceStatistics::kProcessesFieldNumber;
const int ResourceStatistics::kThreadsFieldNumber;
const int ResourceStatistics::kCpusUserTimeSecsFieldNumber;
const int ResourceStatistics::kCpusSystemTimeSecsFieldNumber;
const int ResourceStatistics::kCpusLimitFieldNumber;
const int ResourceStatistics::kCpusNrPeriodsFieldNumber;
const int ResourceStatistics::kCpusNrThrottledFieldNumber;
const int ResourceStatistics::kCpusThrottledTimeSecsFieldNumber;
const int ResourceStatistics::kMemTotalBytesFieldNumber;
const int ResourceStatistics::kMemTotalMemswBytesFieldNumber;
const int ResourceStatistics::kMemLimitBytesFieldNumber;
const int ResourceStatistics::kMemSoftLimitBytesFieldNumber;
const int ResourceStatistics::kMemFileBytesFieldNumber;
const int ResourceStatistics::kMemAnonBytesFieldNumber;
const int ResourceStatistics::kMemCacheBytesFieldNumber;
const int ResourceStatistics::kMemRssBytesFieldNumber;
const int ResourceStatistics::kMemMappedFileBytesFieldNumber;
const int ResourceStatistics::kMemSwapBytesFieldNumber;
const int ResourceStatistics::kMemLowPressureCounterFieldNumber;
const int ResourceStatistics::kMemMediumPressureCounterFieldNumber;
const int ResourceStatistics::kMemCriticalPressureCounterFieldNumber;
const int ResourceStatistics::kDiskLimitBytesFieldNumber;
const int ResourceStatistics::kDiskUsedBytesFieldNumber;
const int ResourceStatistics::kPerfFieldNumber;
const int ResourceStatistics::kNetRxPacketsFieldNumber;
const int ResourceStatistics::kNetRxBytesFieldNumber;
const int ResourceStatistics::kNetRxErrorsFieldNumber;
const int ResourceStatistics::kNetRxDroppedFieldNumber;
const int ResourceStatistics::kNetTxPacketsFieldNumber;
const int ResourceStatistics::kNetTxBytesFieldNumber;
const int ResourceStatistics::kNetTxErrorsFieldNumber;
const int ResourceStatistics::kNetTxDroppedFieldNumber;
const int ResourceStatistics::kNetTcpRttMicrosecsP50FieldNumber;
const int ResourceStatistics::kNetTcpRttMicrosecsP90FieldNumber;
const int ResourceStatistics::kNetTcpRttMicrosecsP95FieldNumber;
const int ResourceStatistics::kNetTcpRttMicrosecsP99FieldNumber;
const int ResourceStatistics::kNetTcpActiveConnectionsFieldNumber;
const int ResourceStatistics::kNetTcpTimeWaitConnectionsFieldNumber;
const int ResourceStatistics::kNetTrafficControlStatisticsFieldNumber;
#endif  // !_MSC_VER

ResourceStatistics::ResourceStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceStatistics::InitAsDefaultInstance() {
  perf_ = const_cast< ::mesos::v1::PerfStatistics*>(&::mesos::v1::PerfStatistics::default_instance());
}

ResourceStatistics::ResourceStatistics(const ResourceStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceStatistics::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  processes_ = 0u;
  threads_ = 0u;
  cpus_user_time_secs_ = 0;
  cpus_system_time_secs_ = 0;
  cpus_limit_ = 0;
  cpus_nr_periods_ = 0u;
  cpus_nr_throttled_ = 0u;
  cpus_throttled_time_secs_ = 0;
  mem_total_bytes_ = GOOGLE_ULONGLONG(0);
  mem_total_memsw_bytes_ = GOOGLE_ULONGLONG(0);
  mem_limit_bytes_ = GOOGLE_ULONGLONG(0);
  mem_soft_limit_bytes_ = GOOGLE_ULONGLONG(0);
  mem_file_bytes_ = GOOGLE_ULONGLONG(0);
  mem_anon_bytes_ = GOOGLE_ULONGLONG(0);
  mem_cache_bytes_ = GOOGLE_ULONGLONG(0);
  mem_rss_bytes_ = GOOGLE_ULONGLONG(0);
  mem_mapped_file_bytes_ = GOOGLE_ULONGLONG(0);
  mem_swap_bytes_ = GOOGLE_ULONGLONG(0);
  mem_low_pressure_counter_ = GOOGLE_ULONGLONG(0);
  mem_medium_pressure_counter_ = GOOGLE_ULONGLONG(0);
  mem_critical_pressure_counter_ = GOOGLE_ULONGLONG(0);
  disk_limit_bytes_ = GOOGLE_ULONGLONG(0);
  disk_used_bytes_ = GOOGLE_ULONGLONG(0);
  perf_ = NULL;
  net_rx_packets_ = GOOGLE_ULONGLONG(0);
  net_rx_bytes_ = GOOGLE_ULONGLONG(0);
  net_rx_errors_ = GOOGLE_ULONGLONG(0);
  net_rx_dropped_ = GOOGLE_ULONGLONG(0);
  net_tx_packets_ = GOOGLE_ULONGLONG(0);
  net_tx_bytes_ = GOOGLE_ULONGLONG(0);
  net_tx_errors_ = GOOGLE_ULONGLONG(0);
  net_tx_dropped_ = GOOGLE_ULONGLONG(0);
  net_tcp_rtt_microsecs_p50_ = 0;
  net_tcp_rtt_microsecs_p90_ = 0;
  net_tcp_rtt_microsecs_p95_ = 0;
  net_tcp_rtt_microsecs_p99_ = 0;
  net_tcp_active_connections_ = 0;
  net_tcp_time_wait_connections_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceStatistics::~ResourceStatistics() {
  SharedDtor();
}

void ResourceStatistics::SharedDtor() {
  if (this != default_instance_) {
    delete perf_;
  }
}

void ResourceStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceStatistics_descriptor_;
}

const ResourceStatistics& ResourceStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ResourceStatistics* ResourceStatistics::default_instance_ = NULL;

ResourceStatistics* ResourceStatistics::New() const {
  return new ResourceStatistics;
}

void ResourceStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    processes_ = 0u;
    threads_ = 0u;
    cpus_user_time_secs_ = 0;
    cpus_system_time_secs_ = 0;
    cpus_limit_ = 0;
    cpus_nr_periods_ = 0u;
    cpus_nr_throttled_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cpus_throttled_time_secs_ = 0;
    mem_total_bytes_ = GOOGLE_ULONGLONG(0);
    mem_total_memsw_bytes_ = GOOGLE_ULONGLONG(0);
    mem_limit_bytes_ = GOOGLE_ULONGLONG(0);
    mem_soft_limit_bytes_ = GOOGLE_ULONGLONG(0);
    mem_file_bytes_ = GOOGLE_ULONGLONG(0);
    mem_anon_bytes_ = GOOGLE_ULONGLONG(0);
    mem_cache_bytes_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mem_rss_bytes_ = GOOGLE_ULONGLONG(0);
    mem_mapped_file_bytes_ = GOOGLE_ULONGLONG(0);
    mem_swap_bytes_ = GOOGLE_ULONGLONG(0);
    mem_low_pressure_counter_ = GOOGLE_ULONGLONG(0);
    mem_medium_pressure_counter_ = GOOGLE_ULONGLONG(0);
    mem_critical_pressure_counter_ = GOOGLE_ULONGLONG(0);
    disk_limit_bytes_ = GOOGLE_ULONGLONG(0);
    disk_used_bytes_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_perf()) {
      if (perf_ != NULL) perf_->::mesos::v1::PerfStatistics::Clear();
    }
    net_rx_packets_ = GOOGLE_ULONGLONG(0);
    net_rx_bytes_ = GOOGLE_ULONGLONG(0);
    net_rx_errors_ = GOOGLE_ULONGLONG(0);
    net_rx_dropped_ = GOOGLE_ULONGLONG(0);
    net_tx_packets_ = GOOGLE_ULONGLONG(0);
    net_tx_bytes_ = GOOGLE_ULONGLONG(0);
    net_tx_errors_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    net_tx_dropped_ = GOOGLE_ULONGLONG(0);
    net_tcp_rtt_microsecs_p50_ = 0;
    net_tcp_rtt_microsecs_p90_ = 0;
    net_tcp_rtt_microsecs_p95_ = 0;
    net_tcp_rtt_microsecs_p99_ = 0;
    net_tcp_active_connections_ = 0;
    net_tcp_time_wait_connections_ = 0;
  }
  net_traffic_control_statistics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cpus_user_time_secs;
        break;
      }

      // optional double cpus_user_time_secs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpus_user_time_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpus_user_time_secs_)));
          set_has_cpus_user_time_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_cpus_system_time_secs;
        break;
      }

      // optional double cpus_system_time_secs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpus_system_time_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpus_system_time_secs_)));
          set_has_cpus_system_time_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_cpus_limit;
        break;
      }

      // optional double cpus_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpus_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpus_limit_)));
          set_has_cpus_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mem_rss_bytes;
        break;
      }

      // optional uint64 mem_rss_bytes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_rss_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_rss_bytes_)));
          set_has_mem_rss_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mem_limit_bytes;
        break;
      }

      // optional uint64 mem_limit_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_limit_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_limit_bytes_)));
          set_has_mem_limit_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cpus_nr_periods;
        break;
      }

      // optional uint32 cpus_nr_periods = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpus_nr_periods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpus_nr_periods_)));
          set_has_cpus_nr_periods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cpus_nr_throttled;
        break;
      }

      // optional uint32 cpus_nr_throttled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpus_nr_throttled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpus_nr_throttled_)));
          set_has_cpus_nr_throttled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_cpus_throttled_time_secs;
        break;
      }

      // optional double cpus_throttled_time_secs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpus_throttled_time_secs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpus_throttled_time_secs_)));
          set_has_cpus_throttled_time_secs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mem_file_bytes;
        break;
      }

      // optional uint64 mem_file_bytes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_file_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_file_bytes_)));
          set_has_mem_file_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mem_anon_bytes;
        break;
      }

      // optional uint64 mem_anon_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_anon_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_anon_bytes_)));
          set_has_mem_anon_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mem_mapped_file_bytes;
        break;
      }

      // optional uint64 mem_mapped_file_bytes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_mapped_file_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_mapped_file_bytes_)));
          set_has_mem_mapped_file_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_perf;
        break;
      }

      // optional .mesos.v1.PerfStatistics perf = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_perf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_perf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_net_rx_packets;
        break;
      }

      // optional uint64 net_rx_packets = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_rx_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_rx_packets_)));
          set_has_net_rx_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_net_rx_bytes;
        break;
      }

      // optional uint64 net_rx_bytes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_rx_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_rx_bytes_)));
          set_has_net_rx_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_net_rx_errors;
        break;
      }

      // optional uint64 net_rx_errors = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_rx_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_rx_errors_)));
          set_has_net_rx_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_net_rx_dropped;
        break;
      }

      // optional uint64 net_rx_dropped = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_rx_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_rx_dropped_)));
          set_has_net_rx_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_net_tx_packets;
        break;
      }

      // optional uint64 net_tx_packets = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_tx_packets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tx_packets_)));
          set_has_net_tx_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_net_tx_bytes;
        break;
      }

      // optional uint64 net_tx_bytes = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_tx_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tx_bytes_)));
          set_has_net_tx_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_net_tx_errors;
        break;
      }

      // optional uint64 net_tx_errors = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_tx_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tx_errors_)));
          set_has_net_tx_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_net_tx_dropped;
        break;
      }

      // optional uint64 net_tx_dropped = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_tx_dropped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &net_tx_dropped_)));
          set_has_net_tx_dropped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_net_tcp_rtt_microsecs_p50;
        break;
      }

      // optional double net_tcp_rtt_microsecs_p50 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_rtt_microsecs_p50:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_rtt_microsecs_p50_)));
          set_has_net_tcp_rtt_microsecs_p50();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_net_tcp_rtt_microsecs_p90;
        break;
      }

      // optional double net_tcp_rtt_microsecs_p90 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_rtt_microsecs_p90:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_rtt_microsecs_p90_)));
          set_has_net_tcp_rtt_microsecs_p90();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_net_tcp_rtt_microsecs_p95;
        break;
      }

      // optional double net_tcp_rtt_microsecs_p95 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_rtt_microsecs_p95:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_rtt_microsecs_p95_)));
          set_has_net_tcp_rtt_microsecs_p95();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_net_tcp_rtt_microsecs_p99;
        break;
      }

      // optional double net_tcp_rtt_microsecs_p99 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_rtt_microsecs_p99:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_rtt_microsecs_p99_)));
          set_has_net_tcp_rtt_microsecs_p99();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_disk_limit_bytes;
        break;
      }

      // optional uint64 disk_limit_bytes = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_limit_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_limit_bytes_)));
          set_has_disk_limit_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_disk_used_bytes;
        break;
      }

      // optional uint64 disk_used_bytes = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_used_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &disk_used_bytes_)));
          set_has_disk_used_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_net_tcp_active_connections;
        break;
      }

      // optional double net_tcp_active_connections = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_active_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_active_connections_)));
          set_has_net_tcp_active_connections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_net_tcp_time_wait_connections;
        break;
      }

      // optional double net_tcp_time_wait_connections = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_net_tcp_time_wait_connections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tcp_time_wait_connections_)));
          set_has_net_tcp_time_wait_connections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_processes;
        break;
      }

      // optional uint32 processes = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processes_)));
          set_has_processes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_threads;
        break;
      }

      // optional uint32 threads = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
          set_has_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_mem_low_pressure_counter;
        break;
      }

      // optional uint64 mem_low_pressure_counter = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_low_pressure_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_low_pressure_counter_)));
          set_has_mem_low_pressure_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_mem_medium_pressure_counter;
        break;
      }

      // optional uint64 mem_medium_pressure_counter = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_medium_pressure_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_medium_pressure_counter_)));
          set_has_mem_medium_pressure_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_mem_critical_pressure_counter;
        break;
      }

      // optional uint64 mem_critical_pressure_counter = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_critical_pressure_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_critical_pressure_counter_)));
          set_has_mem_critical_pressure_counter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_net_traffic_control_statistics;
        break;
      }

      // repeated .mesos.v1.TrafficControlStatistics net_traffic_control_statistics = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_traffic_control_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_net_traffic_control_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_net_traffic_control_statistics;
        if (input->ExpectTag(288)) goto parse_mem_total_bytes;
        break;
      }

      // optional uint64 mem_total_bytes = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_total_bytes_)));
          set_has_mem_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_mem_total_memsw_bytes;
        break;
      }

      // optional uint64 mem_total_memsw_bytes = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_total_memsw_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_total_memsw_bytes_)));
          set_has_mem_total_memsw_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_mem_soft_limit_bytes;
        break;
      }

      // optional uint64 mem_soft_limit_bytes = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_soft_limit_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_soft_limit_bytes_)));
          set_has_mem_soft_limit_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_mem_cache_bytes;
        break;
      }

      // optional uint64 mem_cache_bytes = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_cache_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_cache_bytes_)));
          set_has_mem_cache_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_mem_swap_bytes;
        break;
      }

      // optional uint64 mem_swap_bytes = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_swap_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mem_swap_bytes_)));
          set_has_mem_swap_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional double cpus_user_time_secs = 2;
  if (has_cpus_user_time_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cpus_user_time_secs(), output);
  }

  // optional double cpus_system_time_secs = 3;
  if (has_cpus_system_time_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cpus_system_time_secs(), output);
  }

  // optional double cpus_limit = 4;
  if (has_cpus_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cpus_limit(), output);
  }

  // optional uint64 mem_rss_bytes = 5;
  if (has_mem_rss_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mem_rss_bytes(), output);
  }

  // optional uint64 mem_limit_bytes = 6;
  if (has_mem_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->mem_limit_bytes(), output);
  }

  // optional uint32 cpus_nr_periods = 7;
  if (has_cpus_nr_periods()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cpus_nr_periods(), output);
  }

  // optional uint32 cpus_nr_throttled = 8;
  if (has_cpus_nr_throttled()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cpus_nr_throttled(), output);
  }

  // optional double cpus_throttled_time_secs = 9;
  if (has_cpus_throttled_time_secs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cpus_throttled_time_secs(), output);
  }

  // optional uint64 mem_file_bytes = 10;
  if (has_mem_file_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->mem_file_bytes(), output);
  }

  // optional uint64 mem_anon_bytes = 11;
  if (has_mem_anon_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mem_anon_bytes(), output);
  }

  // optional uint64 mem_mapped_file_bytes = 12;
  if (has_mem_mapped_file_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->mem_mapped_file_bytes(), output);
  }

  // optional .mesos.v1.PerfStatistics perf = 13;
  if (has_perf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->perf(), output);
  }

  // optional uint64 net_rx_packets = 14;
  if (has_net_rx_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->net_rx_packets(), output);
  }

  // optional uint64 net_rx_bytes = 15;
  if (has_net_rx_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->net_rx_bytes(), output);
  }

  // optional uint64 net_rx_errors = 16;
  if (has_net_rx_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->net_rx_errors(), output);
  }

  // optional uint64 net_rx_dropped = 17;
  if (has_net_rx_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->net_rx_dropped(), output);
  }

  // optional uint64 net_tx_packets = 18;
  if (has_net_tx_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->net_tx_packets(), output);
  }

  // optional uint64 net_tx_bytes = 19;
  if (has_net_tx_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->net_tx_bytes(), output);
  }

  // optional uint64 net_tx_errors = 20;
  if (has_net_tx_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->net_tx_errors(), output);
  }

  // optional uint64 net_tx_dropped = 21;
  if (has_net_tx_dropped()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->net_tx_dropped(), output);
  }

  // optional double net_tcp_rtt_microsecs_p50 = 22;
  if (has_net_tcp_rtt_microsecs_p50()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->net_tcp_rtt_microsecs_p50(), output);
  }

  // optional double net_tcp_rtt_microsecs_p90 = 23;
  if (has_net_tcp_rtt_microsecs_p90()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->net_tcp_rtt_microsecs_p90(), output);
  }

  // optional double net_tcp_rtt_microsecs_p95 = 24;
  if (has_net_tcp_rtt_microsecs_p95()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->net_tcp_rtt_microsecs_p95(), output);
  }

  // optional double net_tcp_rtt_microsecs_p99 = 25;
  if (has_net_tcp_rtt_microsecs_p99()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->net_tcp_rtt_microsecs_p99(), output);
  }

  // optional uint64 disk_limit_bytes = 26;
  if (has_disk_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->disk_limit_bytes(), output);
  }

  // optional uint64 disk_used_bytes = 27;
  if (has_disk_used_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->disk_used_bytes(), output);
  }

  // optional double net_tcp_active_connections = 28;
  if (has_net_tcp_active_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->net_tcp_active_connections(), output);
  }

  // optional double net_tcp_time_wait_connections = 29;
  if (has_net_tcp_time_wait_connections()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->net_tcp_time_wait_connections(), output);
  }

  // optional uint32 processes = 30;
  if (has_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->processes(), output);
  }

  // optional uint32 threads = 31;
  if (has_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->threads(), output);
  }

  // optional uint64 mem_low_pressure_counter = 32;
  if (has_mem_low_pressure_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->mem_low_pressure_counter(), output);
  }

  // optional uint64 mem_medium_pressure_counter = 33;
  if (has_mem_medium_pressure_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->mem_medium_pressure_counter(), output);
  }

  // optional uint64 mem_critical_pressure_counter = 34;
  if (has_mem_critical_pressure_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->mem_critical_pressure_counter(), output);
  }

  // repeated .mesos.v1.TrafficControlStatistics net_traffic_control_statistics = 35;
  for (int i = 0; i < this->net_traffic_control_statistics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->net_traffic_control_statistics(i), output);
  }

  // optional uint64 mem_total_bytes = 36;
  if (has_mem_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->mem_total_bytes(), output);
  }

  // optional uint64 mem_total_memsw_bytes = 37;
  if (has_mem_total_memsw_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->mem_total_memsw_bytes(), output);
  }

  // optional uint64 mem_soft_limit_bytes = 38;
  if (has_mem_soft_limit_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->mem_soft_limit_bytes(), output);
  }

  // optional uint64 mem_cache_bytes = 39;
  if (has_mem_cache_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->mem_cache_bytes(), output);
  }

  // optional uint64 mem_swap_bytes = 40;
  if (has_mem_swap_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->mem_swap_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional double cpus_user_time_secs = 2;
  if (has_cpus_user_time_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cpus_user_time_secs(), target);
  }

  // optional double cpus_system_time_secs = 3;
  if (has_cpus_system_time_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cpus_system_time_secs(), target);
  }

  // optional double cpus_limit = 4;
  if (has_cpus_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cpus_limit(), target);
  }

  // optional uint64 mem_rss_bytes = 5;
  if (has_mem_rss_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mem_rss_bytes(), target);
  }

  // optional uint64 mem_limit_bytes = 6;
  if (has_mem_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->mem_limit_bytes(), target);
  }

  // optional uint32 cpus_nr_periods = 7;
  if (has_cpus_nr_periods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cpus_nr_periods(), target);
  }

  // optional uint32 cpus_nr_throttled = 8;
  if (has_cpus_nr_throttled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cpus_nr_throttled(), target);
  }

  // optional double cpus_throttled_time_secs = 9;
  if (has_cpus_throttled_time_secs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cpus_throttled_time_secs(), target);
  }

  // optional uint64 mem_file_bytes = 10;
  if (has_mem_file_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->mem_file_bytes(), target);
  }

  // optional uint64 mem_anon_bytes = 11;
  if (has_mem_anon_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mem_anon_bytes(), target);
  }

  // optional uint64 mem_mapped_file_bytes = 12;
  if (has_mem_mapped_file_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->mem_mapped_file_bytes(), target);
  }

  // optional .mesos.v1.PerfStatistics perf = 13;
  if (has_perf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->perf(), target);
  }

  // optional uint64 net_rx_packets = 14;
  if (has_net_rx_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->net_rx_packets(), target);
  }

  // optional uint64 net_rx_bytes = 15;
  if (has_net_rx_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->net_rx_bytes(), target);
  }

  // optional uint64 net_rx_errors = 16;
  if (has_net_rx_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->net_rx_errors(), target);
  }

  // optional uint64 net_rx_dropped = 17;
  if (has_net_rx_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->net_rx_dropped(), target);
  }

  // optional uint64 net_tx_packets = 18;
  if (has_net_tx_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->net_tx_packets(), target);
  }

  // optional uint64 net_tx_bytes = 19;
  if (has_net_tx_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->net_tx_bytes(), target);
  }

  // optional uint64 net_tx_errors = 20;
  if (has_net_tx_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->net_tx_errors(), target);
  }

  // optional uint64 net_tx_dropped = 21;
  if (has_net_tx_dropped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->net_tx_dropped(), target);
  }

  // optional double net_tcp_rtt_microsecs_p50 = 22;
  if (has_net_tcp_rtt_microsecs_p50()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->net_tcp_rtt_microsecs_p50(), target);
  }

  // optional double net_tcp_rtt_microsecs_p90 = 23;
  if (has_net_tcp_rtt_microsecs_p90()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->net_tcp_rtt_microsecs_p90(), target);
  }

  // optional double net_tcp_rtt_microsecs_p95 = 24;
  if (has_net_tcp_rtt_microsecs_p95()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->net_tcp_rtt_microsecs_p95(), target);
  }

  // optional double net_tcp_rtt_microsecs_p99 = 25;
  if (has_net_tcp_rtt_microsecs_p99()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->net_tcp_rtt_microsecs_p99(), target);
  }

  // optional uint64 disk_limit_bytes = 26;
  if (has_disk_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->disk_limit_bytes(), target);
  }

  // optional uint64 disk_used_bytes = 27;
  if (has_disk_used_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->disk_used_bytes(), target);
  }

  // optional double net_tcp_active_connections = 28;
  if (has_net_tcp_active_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->net_tcp_active_connections(), target);
  }

  // optional double net_tcp_time_wait_connections = 29;
  if (has_net_tcp_time_wait_connections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->net_tcp_time_wait_connections(), target);
  }

  // optional uint32 processes = 30;
  if (has_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->processes(), target);
  }

  // optional uint32 threads = 31;
  if (has_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->threads(), target);
  }

  // optional uint64 mem_low_pressure_counter = 32;
  if (has_mem_low_pressure_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->mem_low_pressure_counter(), target);
  }

  // optional uint64 mem_medium_pressure_counter = 33;
  if (has_mem_medium_pressure_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->mem_medium_pressure_counter(), target);
  }

  // optional uint64 mem_critical_pressure_counter = 34;
  if (has_mem_critical_pressure_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->mem_critical_pressure_counter(), target);
  }

  // repeated .mesos.v1.TrafficControlStatistics net_traffic_control_statistics = 35;
  for (int i = 0; i < this->net_traffic_control_statistics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->net_traffic_control_statistics(i), target);
  }

  // optional uint64 mem_total_bytes = 36;
  if (has_mem_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->mem_total_bytes(), target);
  }

  // optional uint64 mem_total_memsw_bytes = 37;
  if (has_mem_total_memsw_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->mem_total_memsw_bytes(), target);
  }

  // optional uint64 mem_soft_limit_bytes = 38;
  if (has_mem_soft_limit_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->mem_soft_limit_bytes(), target);
  }

  // optional uint64 mem_cache_bytes = 39;
  if (has_mem_cache_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->mem_cache_bytes(), target);
  }

  // optional uint64 mem_swap_bytes = 40;
  if (has_mem_swap_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->mem_swap_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 processes = 30;
    if (has_processes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processes());
    }

    // optional uint32 threads = 31;
    if (has_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->threads());
    }

    // optional double cpus_user_time_secs = 2;
    if (has_cpus_user_time_secs()) {
      total_size += 1 + 8;
    }

    // optional double cpus_system_time_secs = 3;
    if (has_cpus_system_time_secs()) {
      total_size += 1 + 8;
    }

    // optional double cpus_limit = 4;
    if (has_cpus_limit()) {
      total_size += 1 + 8;
    }

    // optional uint32 cpus_nr_periods = 7;
    if (has_cpus_nr_periods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpus_nr_periods());
    }

    // optional uint32 cpus_nr_throttled = 8;
    if (has_cpus_nr_throttled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpus_nr_throttled());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double cpus_throttled_time_secs = 9;
    if (has_cpus_throttled_time_secs()) {
      total_size += 1 + 8;
    }

    // optional uint64 mem_total_bytes = 36;
    if (has_mem_total_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_total_bytes());
    }

    // optional uint64 mem_total_memsw_bytes = 37;
    if (has_mem_total_memsw_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_total_memsw_bytes());
    }

    // optional uint64 mem_limit_bytes = 6;
    if (has_mem_limit_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_limit_bytes());
    }

    // optional uint64 mem_soft_limit_bytes = 38;
    if (has_mem_soft_limit_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_soft_limit_bytes());
    }

    // optional uint64 mem_file_bytes = 10;
    if (has_mem_file_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_file_bytes());
    }

    // optional uint64 mem_anon_bytes = 11;
    if (has_mem_anon_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_anon_bytes());
    }

    // optional uint64 mem_cache_bytes = 39;
    if (has_mem_cache_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_cache_bytes());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 mem_rss_bytes = 5;
    if (has_mem_rss_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_rss_bytes());
    }

    // optional uint64 mem_mapped_file_bytes = 12;
    if (has_mem_mapped_file_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_mapped_file_bytes());
    }

    // optional uint64 mem_swap_bytes = 40;
    if (has_mem_swap_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_swap_bytes());
    }

    // optional uint64 mem_low_pressure_counter = 32;
    if (has_mem_low_pressure_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_low_pressure_counter());
    }

    // optional uint64 mem_medium_pressure_counter = 33;
    if (has_mem_medium_pressure_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_medium_pressure_counter());
    }

    // optional uint64 mem_critical_pressure_counter = 34;
    if (has_mem_critical_pressure_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mem_critical_pressure_counter());
    }

    // optional uint64 disk_limit_bytes = 26;
    if (has_disk_limit_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->disk_limit_bytes());
    }

    // optional uint64 disk_used_bytes = 27;
    if (has_disk_used_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->disk_used_bytes());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .mesos.v1.PerfStatistics perf = 13;
    if (has_perf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perf());
    }

    // optional uint64 net_rx_packets = 14;
    if (has_net_rx_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_rx_packets());
    }

    // optional uint64 net_rx_bytes = 15;
    if (has_net_rx_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_rx_bytes());
    }

    // optional uint64 net_rx_errors = 16;
    if (has_net_rx_errors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_rx_errors());
    }

    // optional uint64 net_rx_dropped = 17;
    if (has_net_rx_dropped()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_rx_dropped());
    }

    // optional uint64 net_tx_packets = 18;
    if (has_net_tx_packets()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_tx_packets());
    }

    // optional uint64 net_tx_bytes = 19;
    if (has_net_tx_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_tx_bytes());
    }

    // optional uint64 net_tx_errors = 20;
    if (has_net_tx_errors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_tx_errors());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 net_tx_dropped = 21;
    if (has_net_tx_dropped()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->net_tx_dropped());
    }

    // optional double net_tcp_rtt_microsecs_p50 = 22;
    if (has_net_tcp_rtt_microsecs_p50()) {
      total_size += 2 + 8;
    }

    // optional double net_tcp_rtt_microsecs_p90 = 23;
    if (has_net_tcp_rtt_microsecs_p90()) {
      total_size += 2 + 8;
    }

    // optional double net_tcp_rtt_microsecs_p95 = 24;
    if (has_net_tcp_rtt_microsecs_p95()) {
      total_size += 2 + 8;
    }

    // optional double net_tcp_rtt_microsecs_p99 = 25;
    if (has_net_tcp_rtt_microsecs_p99()) {
      total_size += 2 + 8;
    }

    // optional double net_tcp_active_connections = 28;
    if (has_net_tcp_active_connections()) {
      total_size += 2 + 8;
    }

    // optional double net_tcp_time_wait_connections = 29;
    if (has_net_tcp_time_wait_connections()) {
      total_size += 2 + 8;
    }

  }
  // repeated .mesos.v1.TrafficControlStatistics net_traffic_control_statistics = 35;
  total_size += 2 * this->net_traffic_control_statistics_size();
  for (int i = 0; i < this->net_traffic_control_statistics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->net_traffic_control_statistics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceStatistics::MergeFrom(const ResourceStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  net_traffic_control_statistics_.MergeFrom(from.net_traffic_control_statistics_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_processes()) {
      set_processes(from.processes());
    }
    if (from.has_threads()) {
      set_threads(from.threads());
    }
    if (from.has_cpus_user_time_secs()) {
      set_cpus_user_time_secs(from.cpus_user_time_secs());
    }
    if (from.has_cpus_system_time_secs()) {
      set_cpus_system_time_secs(from.cpus_system_time_secs());
    }
    if (from.has_cpus_limit()) {
      set_cpus_limit(from.cpus_limit());
    }
    if (from.has_cpus_nr_periods()) {
      set_cpus_nr_periods(from.cpus_nr_periods());
    }
    if (from.has_cpus_nr_throttled()) {
      set_cpus_nr_throttled(from.cpus_nr_throttled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cpus_throttled_time_secs()) {
      set_cpus_throttled_time_secs(from.cpus_throttled_time_secs());
    }
    if (from.has_mem_total_bytes()) {
      set_mem_total_bytes(from.mem_total_bytes());
    }
    if (from.has_mem_total_memsw_bytes()) {
      set_mem_total_memsw_bytes(from.mem_total_memsw_bytes());
    }
    if (from.has_mem_limit_bytes()) {
      set_mem_limit_bytes(from.mem_limit_bytes());
    }
    if (from.has_mem_soft_limit_bytes()) {
      set_mem_soft_limit_bytes(from.mem_soft_limit_bytes());
    }
    if (from.has_mem_file_bytes()) {
      set_mem_file_bytes(from.mem_file_bytes());
    }
    if (from.has_mem_anon_bytes()) {
      set_mem_anon_bytes(from.mem_anon_bytes());
    }
    if (from.has_mem_cache_bytes()) {
      set_mem_cache_bytes(from.mem_cache_bytes());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mem_rss_bytes()) {
      set_mem_rss_bytes(from.mem_rss_bytes());
    }
    if (from.has_mem_mapped_file_bytes()) {
      set_mem_mapped_file_bytes(from.mem_mapped_file_bytes());
    }
    if (from.has_mem_swap_bytes()) {
      set_mem_swap_bytes(from.mem_swap_bytes());
    }
    if (from.has_mem_low_pressure_counter()) {
      set_mem_low_pressure_counter(from.mem_low_pressure_counter());
    }
    if (from.has_mem_medium_pressure_counter()) {
      set_mem_medium_pressure_counter(from.mem_medium_pressure_counter());
    }
    if (from.has_mem_critical_pressure_counter()) {
      set_mem_critical_pressure_counter(from.mem_critical_pressure_counter());
    }
    if (from.has_disk_limit_bytes()) {
      set_disk_limit_bytes(from.disk_limit_bytes());
    }
    if (from.has_disk_used_bytes()) {
      set_disk_used_bytes(from.disk_used_bytes());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_perf()) {
      mutable_perf()->::mesos::v1::PerfStatistics::MergeFrom(from.perf());
    }
    if (from.has_net_rx_packets()) {
      set_net_rx_packets(from.net_rx_packets());
    }
    if (from.has_net_rx_bytes()) {
      set_net_rx_bytes(from.net_rx_bytes());
    }
    if (from.has_net_rx_errors()) {
      set_net_rx_errors(from.net_rx_errors());
    }
    if (from.has_net_rx_dropped()) {
      set_net_rx_dropped(from.net_rx_dropped());
    }
    if (from.has_net_tx_packets()) {
      set_net_tx_packets(from.net_tx_packets());
    }
    if (from.has_net_tx_bytes()) {
      set_net_tx_bytes(from.net_tx_bytes());
    }
    if (from.has_net_tx_errors()) {
      set_net_tx_errors(from.net_tx_errors());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_net_tx_dropped()) {
      set_net_tx_dropped(from.net_tx_dropped());
    }
    if (from.has_net_tcp_rtt_microsecs_p50()) {
      set_net_tcp_rtt_microsecs_p50(from.net_tcp_rtt_microsecs_p50());
    }
    if (from.has_net_tcp_rtt_microsecs_p90()) {
      set_net_tcp_rtt_microsecs_p90(from.net_tcp_rtt_microsecs_p90());
    }
    if (from.has_net_tcp_rtt_microsecs_p95()) {
      set_net_tcp_rtt_microsecs_p95(from.net_tcp_rtt_microsecs_p95());
    }
    if (from.has_net_tcp_rtt_microsecs_p99()) {
      set_net_tcp_rtt_microsecs_p99(from.net_tcp_rtt_microsecs_p99());
    }
    if (from.has_net_tcp_active_connections()) {
      set_net_tcp_active_connections(from.net_tcp_active_connections());
    }
    if (from.has_net_tcp_time_wait_connections()) {
      set_net_tcp_time_wait_connections(from.net_tcp_time_wait_connections());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceStatistics::CopyFrom(const ResourceStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_perf()) {
    if (!this->perf().IsInitialized()) return false;
  }
  for (int i = 0; i < net_traffic_control_statistics_size(); i++) {
    if (!this->net_traffic_control_statistics(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceStatistics::Swap(ResourceStatistics* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(processes_, other->processes_);
    std::swap(threads_, other->threads_);
    std::swap(cpus_user_time_secs_, other->cpus_user_time_secs_);
    std::swap(cpus_system_time_secs_, other->cpus_system_time_secs_);
    std::swap(cpus_limit_, other->cpus_limit_);
    std::swap(cpus_nr_periods_, other->cpus_nr_periods_);
    std::swap(cpus_nr_throttled_, other->cpus_nr_throttled_);
    std::swap(cpus_throttled_time_secs_, other->cpus_throttled_time_secs_);
    std::swap(mem_total_bytes_, other->mem_total_bytes_);
    std::swap(mem_total_memsw_bytes_, other->mem_total_memsw_bytes_);
    std::swap(mem_limit_bytes_, other->mem_limit_bytes_);
    std::swap(mem_soft_limit_bytes_, other->mem_soft_limit_bytes_);
    std::swap(mem_file_bytes_, other->mem_file_bytes_);
    std::swap(mem_anon_bytes_, other->mem_anon_bytes_);
    std::swap(mem_cache_bytes_, other->mem_cache_bytes_);
    std::swap(mem_rss_bytes_, other->mem_rss_bytes_);
    std::swap(mem_mapped_file_bytes_, other->mem_mapped_file_bytes_);
    std::swap(mem_swap_bytes_, other->mem_swap_bytes_);
    std::swap(mem_low_pressure_counter_, other->mem_low_pressure_counter_);
    std::swap(mem_medium_pressure_counter_, other->mem_medium_pressure_counter_);
    std::swap(mem_critical_pressure_counter_, other->mem_critical_pressure_counter_);
    std::swap(disk_limit_bytes_, other->disk_limit_bytes_);
    std::swap(disk_used_bytes_, other->disk_used_bytes_);
    std::swap(perf_, other->perf_);
    std::swap(net_rx_packets_, other->net_rx_packets_);
    std::swap(net_rx_bytes_, other->net_rx_bytes_);
    std::swap(net_rx_errors_, other->net_rx_errors_);
    std::swap(net_rx_dropped_, other->net_rx_dropped_);
    std::swap(net_tx_packets_, other->net_tx_packets_);
    std::swap(net_tx_bytes_, other->net_tx_bytes_);
    std::swap(net_tx_errors_, other->net_tx_errors_);
    std::swap(net_tx_dropped_, other->net_tx_dropped_);
    std::swap(net_tcp_rtt_microsecs_p50_, other->net_tcp_rtt_microsecs_p50_);
    std::swap(net_tcp_rtt_microsecs_p90_, other->net_tcp_rtt_microsecs_p90_);
    std::swap(net_tcp_rtt_microsecs_p95_, other->net_tcp_rtt_microsecs_p95_);
    std::swap(net_tcp_rtt_microsecs_p99_, other->net_tcp_rtt_microsecs_p99_);
    std::swap(net_tcp_active_connections_, other->net_tcp_active_connections_);
    std::swap(net_tcp_time_wait_connections_, other->net_tcp_time_wait_connections_);
    net_traffic_control_statistics_.Swap(&other->net_traffic_control_statistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceStatistics_descriptor_;
  metadata.reflection = ResourceStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceUsage_Executor::kExecutorInfoFieldNumber;
const int ResourceUsage_Executor::kAllocatedFieldNumber;
const int ResourceUsage_Executor::kStatisticsFieldNumber;
#endif  // !_MSC_VER

ResourceUsage_Executor::ResourceUsage_Executor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceUsage_Executor::InitAsDefaultInstance() {
  executor_info_ = const_cast< ::mesos::v1::ExecutorInfo*>(&::mesos::v1::ExecutorInfo::default_instance());
  statistics_ = const_cast< ::mesos::v1::ResourceStatistics*>(&::mesos::v1::ResourceStatistics::default_instance());
}

ResourceUsage_Executor::ResourceUsage_Executor(const ResourceUsage_Executor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceUsage_Executor::SharedCtor() {
  _cached_size_ = 0;
  executor_info_ = NULL;
  statistics_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceUsage_Executor::~ResourceUsage_Executor() {
  SharedDtor();
}

void ResourceUsage_Executor::SharedDtor() {
  if (this != default_instance_) {
    delete executor_info_;
    delete statistics_;
  }
}

void ResourceUsage_Executor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceUsage_Executor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceUsage_Executor_descriptor_;
}

const ResourceUsage_Executor& ResourceUsage_Executor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ResourceUsage_Executor* ResourceUsage_Executor::default_instance_ = NULL;

ResourceUsage_Executor* ResourceUsage_Executor::New() const {
  return new ResourceUsage_Executor;
}

void ResourceUsage_Executor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executor_info()) {
      if (executor_info_ != NULL) executor_info_->::mesos::v1::ExecutorInfo::Clear();
    }
    if (has_statistics()) {
      if (statistics_ != NULL) statistics_->::mesos::v1::ResourceStatistics::Clear();
    }
  }
  allocated_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceUsage_Executor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.ExecutorInfo executor_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allocated;
        break;
      }

      // repeated .mesos.v1.Resource allocated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allocated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_allocated;
        if (input->ExpectTag(26)) goto parse_statistics;
        break;
      }

      // optional .mesos.v1.ResourceStatistics statistics = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statistics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceUsage_Executor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_info(), output);
  }

  // repeated .mesos.v1.Resource allocated = 2;
  for (int i = 0; i < this->allocated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allocated(i), output);
  }

  // optional .mesos.v1.ResourceStatistics statistics = 3;
  if (has_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->statistics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceUsage_Executor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_info(), target);
  }

  // repeated .mesos.v1.Resource allocated = 2;
  for (int i = 0; i < this->allocated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allocated(i), target);
  }

  // optional .mesos.v1.ResourceStatistics statistics = 3;
  if (has_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->statistics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceUsage_Executor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.ExecutorInfo executor_info = 1;
    if (has_executor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_info());
    }

    // optional .mesos.v1.ResourceStatistics statistics = 3;
    if (has_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->statistics());
    }

  }
  // repeated .mesos.v1.Resource allocated = 2;
  total_size += 1 * this->allocated_size();
  for (int i = 0; i < this->allocated_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocated(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceUsage_Executor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceUsage_Executor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceUsage_Executor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceUsage_Executor::MergeFrom(const ResourceUsage_Executor& from) {
  GOOGLE_CHECK_NE(&from, this);
  allocated_.MergeFrom(from.allocated_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_info()) {
      mutable_executor_info()->::mesos::v1::ExecutorInfo::MergeFrom(from.executor_info());
    }
    if (from.has_statistics()) {
      mutable_statistics()->::mesos::v1::ResourceStatistics::MergeFrom(from.statistics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceUsage_Executor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceUsage_Executor::CopyFrom(const ResourceUsage_Executor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsage_Executor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_executor_info()) {
    if (!this->executor_info().IsInitialized()) return false;
  }
  for (int i = 0; i < allocated_size(); i++) {
    if (!this->allocated(i).IsInitialized()) return false;
  }
  if (has_statistics()) {
    if (!this->statistics().IsInitialized()) return false;
  }
  return true;
}

void ResourceUsage_Executor::Swap(ResourceUsage_Executor* other) {
  if (other != this) {
    std::swap(executor_info_, other->executor_info_);
    allocated_.Swap(&other->allocated_);
    std::swap(statistics_, other->statistics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceUsage_Executor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceUsage_Executor_descriptor_;
  metadata.reflection = ResourceUsage_Executor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResourceUsage::kExecutorsFieldNumber;
const int ResourceUsage::kTotalFieldNumber;
#endif  // !_MSC_VER

ResourceUsage::ResourceUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceUsage::InitAsDefaultInstance() {
}

ResourceUsage::ResourceUsage(const ResourceUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceUsage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceUsage::~ResourceUsage() {
  SharedDtor();
}

void ResourceUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceUsage_descriptor_;
}

const ResourceUsage& ResourceUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ResourceUsage* ResourceUsage::default_instance_ = NULL;

ResourceUsage* ResourceUsage::New() const {
  return new ResourceUsage;
}

void ResourceUsage::Clear() {
  executors_.Clear();
  total_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.ResourceUsage.Executor executors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_executors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_executors;
        if (input->ExpectTag(18)) goto parse_total;
        break;
      }

      // repeated .mesos.v1.Resource total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_total;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.ResourceUsage.Executor executors = 1;
  for (int i = 0; i < this->executors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executors(i), output);
  }

  // repeated .mesos.v1.Resource total = 2;
  for (int i = 0; i < this->total_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->total(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.ResourceUsage.Executor executors = 1;
  for (int i = 0; i < this->executors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executors(i), target);
  }

  // repeated .mesos.v1.Resource total = 2;
  for (int i = 0; i < this->total_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->total(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceUsage::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.ResourceUsage.Executor executors = 1;
  total_size += 1 * this->executors_size();
  for (int i = 0; i < this->executors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->executors(i));
  }

  // repeated .mesos.v1.Resource total = 2;
  total_size += 1 * this->total_size();
  for (int i = 0; i < this->total_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceUsage::MergeFrom(const ResourceUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  executors_.MergeFrom(from.executors_);
  total_.MergeFrom(from.total_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceUsage::CopyFrom(const ResourceUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsage::IsInitialized() const {

  for (int i = 0; i < executors_size(); i++) {
    if (!this->executors(i).IsInitialized()) return false;
  }
  for (int i = 0; i < total_size(); i++) {
    if (!this->total(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceUsage::Swap(ResourceUsage* other) {
  if (other != this) {
    executors_.Swap(&other->executors_);
    total_.Swap(&other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceUsage_descriptor_;
  metadata.reflection = ResourceUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerfStatistics::kTimestampFieldNumber;
const int PerfStatistics::kDurationFieldNumber;
const int PerfStatistics::kCyclesFieldNumber;
const int PerfStatistics::kStalledCyclesFrontendFieldNumber;
const int PerfStatistics::kStalledCyclesBackendFieldNumber;
const int PerfStatistics::kInstructionsFieldNumber;
const int PerfStatistics::kCacheReferencesFieldNumber;
const int PerfStatistics::kCacheMissesFieldNumber;
const int PerfStatistics::kBranchesFieldNumber;
const int PerfStatistics::kBranchMissesFieldNumber;
const int PerfStatistics::kBusCyclesFieldNumber;
const int PerfStatistics::kRefCyclesFieldNumber;
const int PerfStatistics::kCpuClockFieldNumber;
const int PerfStatistics::kTaskClockFieldNumber;
const int PerfStatistics::kPageFaultsFieldNumber;
const int PerfStatistics::kMinorFaultsFieldNumber;
const int PerfStatistics::kMajorFaultsFieldNumber;
const int PerfStatistics::kContextSwitchesFieldNumber;
const int PerfStatistics::kCpuMigrationsFieldNumber;
const int PerfStatistics::kAlignmentFaultsFieldNumber;
const int PerfStatistics::kEmulationFaultsFieldNumber;
const int PerfStatistics::kL1DcacheLoadsFieldNumber;
const int PerfStatistics::kL1DcacheLoadMissesFieldNumber;
const int PerfStatistics::kL1DcacheStoresFieldNumber;
const int PerfStatistics::kL1DcacheStoreMissesFieldNumber;
const int PerfStatistics::kL1DcachePrefetchesFieldNumber;
const int PerfStatistics::kL1DcachePrefetchMissesFieldNumber;
const int PerfStatistics::kL1IcacheLoadsFieldNumber;
const int PerfStatistics::kL1IcacheLoadMissesFieldNumber;
const int PerfStatistics::kL1IcachePrefetchesFieldNumber;
const int PerfStatistics::kL1IcachePrefetchMissesFieldNumber;
const int PerfStatistics::kLlcLoadsFieldNumber;
const int PerfStatistics::kLlcLoadMissesFieldNumber;
const int PerfStatistics::kLlcStoresFieldNumber;
const int PerfStatistics::kLlcStoreMissesFieldNumber;
const int PerfStatistics::kLlcPrefetchesFieldNumber;
const int PerfStatistics::kLlcPrefetchMissesFieldNumber;
const int PerfStatistics::kDtlbLoadsFieldNumber;
const int PerfStatistics::kDtlbLoadMissesFieldNumber;
const int PerfStatistics::kDtlbStoresFieldNumber;
const int PerfStatistics::kDtlbStoreMissesFieldNumber;
const int PerfStatistics::kDtlbPrefetchesFieldNumber;
const int PerfStatistics::kDtlbPrefetchMissesFieldNumber;
const int PerfStatistics::kItlbLoadsFieldNumber;
const int PerfStatistics::kItlbLoadMissesFieldNumber;
const int PerfStatistics::kBranchLoadsFieldNumber;
const int PerfStatistics::kBranchLoadMissesFieldNumber;
const int PerfStatistics::kNodeLoadsFieldNumber;
const int PerfStatistics::kNodeLoadMissesFieldNumber;
const int PerfStatistics::kNodeStoresFieldNumber;
const int PerfStatistics::kNodeStoreMissesFieldNumber;
const int PerfStatistics::kNodePrefetchesFieldNumber;
const int PerfStatistics::kNodePrefetchMissesFieldNumber;
#endif  // !_MSC_VER

PerfStatistics::PerfStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PerfStatistics::InitAsDefaultInstance() {
}

PerfStatistics::PerfStatistics(const PerfStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PerfStatistics::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  duration_ = 0;
  cycles_ = GOOGLE_ULONGLONG(0);
  stalled_cycles_frontend_ = GOOGLE_ULONGLONG(0);
  stalled_cycles_backend_ = GOOGLE_ULONGLONG(0);
  instructions_ = GOOGLE_ULONGLONG(0);
  cache_references_ = GOOGLE_ULONGLONG(0);
  cache_misses_ = GOOGLE_ULONGLONG(0);
  branches_ = GOOGLE_ULONGLONG(0);
  branch_misses_ = GOOGLE_ULONGLONG(0);
  bus_cycles_ = GOOGLE_ULONGLONG(0);
  ref_cycles_ = GOOGLE_ULONGLONG(0);
  cpu_clock_ = 0;
  task_clock_ = 0;
  page_faults_ = GOOGLE_ULONGLONG(0);
  minor_faults_ = GOOGLE_ULONGLONG(0);
  major_faults_ = GOOGLE_ULONGLONG(0);
  context_switches_ = GOOGLE_ULONGLONG(0);
  cpu_migrations_ = GOOGLE_ULONGLONG(0);
  alignment_faults_ = GOOGLE_ULONGLONG(0);
  emulation_faults_ = GOOGLE_ULONGLONG(0);
  l1_dcache_loads_ = GOOGLE_ULONGLONG(0);
  l1_dcache_load_misses_ = GOOGLE_ULONGLONG(0);
  l1_dcache_stores_ = GOOGLE_ULONGLONG(0);
  l1_dcache_store_misses_ = GOOGLE_ULONGLONG(0);
  l1_dcache_prefetches_ = GOOGLE_ULONGLONG(0);
  l1_dcache_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  l1_icache_loads_ = GOOGLE_ULONGLONG(0);
  l1_icache_load_misses_ = GOOGLE_ULONGLONG(0);
  l1_icache_prefetches_ = GOOGLE_ULONGLONG(0);
  l1_icache_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  llc_loads_ = GOOGLE_ULONGLONG(0);
  llc_load_misses_ = GOOGLE_ULONGLONG(0);
  llc_stores_ = GOOGLE_ULONGLONG(0);
  llc_store_misses_ = GOOGLE_ULONGLONG(0);
  llc_prefetches_ = GOOGLE_ULONGLONG(0);
  llc_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  dtlb_loads_ = GOOGLE_ULONGLONG(0);
  dtlb_load_misses_ = GOOGLE_ULONGLONG(0);
  dtlb_stores_ = GOOGLE_ULONGLONG(0);
  dtlb_store_misses_ = GOOGLE_ULONGLONG(0);
  dtlb_prefetches_ = GOOGLE_ULONGLONG(0);
  dtlb_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  itlb_loads_ = GOOGLE_ULONGLONG(0);
  itlb_load_misses_ = GOOGLE_ULONGLONG(0);
  branch_loads_ = GOOGLE_ULONGLONG(0);
  branch_load_misses_ = GOOGLE_ULONGLONG(0);
  node_loads_ = GOOGLE_ULONGLONG(0);
  node_load_misses_ = GOOGLE_ULONGLONG(0);
  node_stores_ = GOOGLE_ULONGLONG(0);
  node_store_misses_ = GOOGLE_ULONGLONG(0);
  node_prefetches_ = GOOGLE_ULONGLONG(0);
  node_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerfStatistics::~PerfStatistics() {
  SharedDtor();
}

void PerfStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerfStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PerfStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerfStatistics_descriptor_;
}

const PerfStatistics& PerfStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

PerfStatistics* PerfStatistics::default_instance_ = NULL;

PerfStatistics* PerfStatistics::New() const {
  return new PerfStatistics;
}

void PerfStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    duration_ = 0;
    cycles_ = GOOGLE_ULONGLONG(0);
    stalled_cycles_frontend_ = GOOGLE_ULONGLONG(0);
    stalled_cycles_backend_ = GOOGLE_ULONGLONG(0);
    instructions_ = GOOGLE_ULONGLONG(0);
    cache_references_ = GOOGLE_ULONGLONG(0);
    cache_misses_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    branches_ = GOOGLE_ULONGLONG(0);
    branch_misses_ = GOOGLE_ULONGLONG(0);
    bus_cycles_ = GOOGLE_ULONGLONG(0);
    ref_cycles_ = GOOGLE_ULONGLONG(0);
    cpu_clock_ = 0;
    task_clock_ = 0;
    page_faults_ = GOOGLE_ULONGLONG(0);
    minor_faults_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    major_faults_ = GOOGLE_ULONGLONG(0);
    context_switches_ = GOOGLE_ULONGLONG(0);
    cpu_migrations_ = GOOGLE_ULONGLONG(0);
    alignment_faults_ = GOOGLE_ULONGLONG(0);
    emulation_faults_ = GOOGLE_ULONGLONG(0);
    l1_dcache_loads_ = GOOGLE_ULONGLONG(0);
    l1_dcache_load_misses_ = GOOGLE_ULONGLONG(0);
    l1_dcache_stores_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    l1_dcache_store_misses_ = GOOGLE_ULONGLONG(0);
    l1_dcache_prefetches_ = GOOGLE_ULONGLONG(0);
    l1_dcache_prefetch_misses_ = GOOGLE_ULONGLONG(0);
    l1_icache_loads_ = GOOGLE_ULONGLONG(0);
    l1_icache_load_misses_ = GOOGLE_ULONGLONG(0);
    l1_icache_prefetches_ = GOOGLE_ULONGLONG(0);
    l1_icache_prefetch_misses_ = GOOGLE_ULONGLONG(0);
    llc_loads_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    llc_load_misses_ = GOOGLE_ULONGLONG(0);
    llc_stores_ = GOOGLE_ULONGLONG(0);
    llc_store_misses_ = GOOGLE_ULONGLONG(0);
    llc_prefetches_ = GOOGLE_ULONGLONG(0);
    llc_prefetch_misses_ = GOOGLE_ULONGLONG(0);
    dtlb_loads_ = GOOGLE_ULONGLONG(0);
    dtlb_load_misses_ = GOOGLE_ULONGLONG(0);
    dtlb_stores_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    dtlb_store_misses_ = GOOGLE_ULONGLONG(0);
    dtlb_prefetches_ = GOOGLE_ULONGLONG(0);
    dtlb_prefetch_misses_ = GOOGLE_ULONGLONG(0);
    itlb_loads_ = GOOGLE_ULONGLONG(0);
    itlb_load_misses_ = GOOGLE_ULONGLONG(0);
    branch_loads_ = GOOGLE_ULONGLONG(0);
    branch_load_misses_ = GOOGLE_ULONGLONG(0);
    node_loads_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    node_load_misses_ = GOOGLE_ULONGLONG(0);
    node_stores_ = GOOGLE_ULONGLONG(0);
    node_store_misses_ = GOOGLE_ULONGLONG(0);
    node_prefetches_ = GOOGLE_ULONGLONG(0);
    node_prefetch_misses_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerfStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_duration;
        break;
      }

      // required double duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cycles;
        break;
      }

      // optional uint64 cycles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycles_)));
          set_has_cycles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stalled_cycles_frontend;
        break;
      }

      // optional uint64 stalled_cycles_frontend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stalled_cycles_frontend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stalled_cycles_frontend_)));
          set_has_stalled_cycles_frontend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stalled_cycles_backend;
        break;
      }

      // optional uint64 stalled_cycles_backend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stalled_cycles_backend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stalled_cycles_backend_)));
          set_has_stalled_cycles_backend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_instructions;
        break;
      }

      // optional uint64 instructions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instructions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instructions_)));
          set_has_instructions();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cache_references;
        break;
      }

      // optional uint64 cache_references = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_references:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cache_references_)));
          set_has_cache_references();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cache_misses;
        break;
      }

      // optional uint64 cache_misses = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cache_misses_)));
          set_has_cache_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_branches;
        break;
      }

      // optional uint64 branches = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branches_)));
          set_has_branches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_branch_misses;
        break;
      }

      // optional uint64 branch_misses = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_misses_)));
          set_has_branch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bus_cycles;
        break;
      }

      // optional uint64 bus_cycles = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bus_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bus_cycles_)));
          set_has_bus_cycles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ref_cycles;
        break;
      }

      // optional uint64 ref_cycles = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref_cycles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ref_cycles_)));
          set_has_ref_cycles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_cpu_clock;
        break;
      }

      // optional double cpu_clock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpu_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_clock_)));
          set_has_cpu_clock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_task_clock;
        break;
      }

      // optional double task_clock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_task_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &task_clock_)));
          set_has_task_clock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_page_faults;
        break;
      }

      // optional uint64 page_faults = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &page_faults_)));
          set_has_page_faults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_minor_faults;
        break;
      }

      // optional uint64 minor_faults = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &minor_faults_)));
          set_has_minor_faults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_major_faults;
        break;
      }

      // optional uint64 major_faults = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_major_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &major_faults_)));
          set_has_major_faults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_context_switches;
        break;
      }

      // optional uint64 context_switches = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context_switches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &context_switches_)));
          set_has_context_switches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cpu_migrations;
        break;
      }

      // optional uint64 cpu_migrations = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_migrations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cpu_migrations_)));
          set_has_cpu_migrations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_alignment_faults;
        break;
      }

      // optional uint64 alignment_faults = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alignment_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alignment_faults_)));
          set_has_alignment_faults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_emulation_faults;
        break;
      }

      // optional uint64 emulation_faults = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emulation_faults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emulation_faults_)));
          set_has_emulation_faults();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_l1_dcache_loads;
        break;
      }

      // optional uint64 l1_dcache_loads = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_loads_)));
          set_has_l1_dcache_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_l1_dcache_load_misses;
        break;
      }

      // optional uint64 l1_dcache_load_misses = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_load_misses_)));
          set_has_l1_dcache_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_l1_dcache_stores;
        break;
      }

      // optional uint64 l1_dcache_stores = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_stores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_stores_)));
          set_has_l1_dcache_stores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_l1_dcache_store_misses;
        break;
      }

      // optional uint64 l1_dcache_store_misses = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_store_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_store_misses_)));
          set_has_l1_dcache_store_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_l1_dcache_prefetches;
        break;
      }

      // optional uint64 l1_dcache_prefetches = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_prefetches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_prefetches_)));
          set_has_l1_dcache_prefetches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_l1_dcache_prefetch_misses;
        break;
      }

      // optional uint64 l1_dcache_prefetch_misses = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_dcache_prefetch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_dcache_prefetch_misses_)));
          set_has_l1_dcache_prefetch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_l1_icache_loads;
        break;
      }

      // optional uint64 l1_icache_loads = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_icache_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_icache_loads_)));
          set_has_l1_icache_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_l1_icache_load_misses;
        break;
      }

      // optional uint64 l1_icache_load_misses = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_icache_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_icache_load_misses_)));
          set_has_l1_icache_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_l1_icache_prefetches;
        break;
      }

      // optional uint64 l1_icache_prefetches = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_icache_prefetches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_icache_prefetches_)));
          set_has_l1_icache_prefetches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_l1_icache_prefetch_misses;
        break;
      }

      // optional uint64 l1_icache_prefetch_misses = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_l1_icache_prefetch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &l1_icache_prefetch_misses_)));
          set_has_l1_icache_prefetch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_llc_loads;
        break;
      }

      // optional uint64 llc_loads = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_loads_)));
          set_has_llc_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_llc_load_misses;
        break;
      }

      // optional uint64 llc_load_misses = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_load_misses_)));
          set_has_llc_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_llc_stores;
        break;
      }

      // optional uint64 llc_stores = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_stores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_stores_)));
          set_has_llc_stores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_llc_store_misses;
        break;
      }

      // optional uint64 llc_store_misses = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_store_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_store_misses_)));
          set_has_llc_store_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_llc_prefetches;
        break;
      }

      // optional uint64 llc_prefetches = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_prefetches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_prefetches_)));
          set_has_llc_prefetches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_llc_prefetch_misses;
        break;
      }

      // optional uint64 llc_prefetch_misses = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_llc_prefetch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &llc_prefetch_misses_)));
          set_has_llc_prefetch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_dtlb_loads;
        break;
      }

      // optional uint64 dtlb_loads = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_loads_)));
          set_has_dtlb_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_dtlb_load_misses;
        break;
      }

      // optional uint64 dtlb_load_misses = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_load_misses_)));
          set_has_dtlb_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_dtlb_stores;
        break;
      }

      // optional uint64 dtlb_stores = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_stores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_stores_)));
          set_has_dtlb_stores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_dtlb_store_misses;
        break;
      }

      // optional uint64 dtlb_store_misses = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_store_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_store_misses_)));
          set_has_dtlb_store_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_dtlb_prefetches;
        break;
      }

      // optional uint64 dtlb_prefetches = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_prefetches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_prefetches_)));
          set_has_dtlb_prefetches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_dtlb_prefetch_misses;
        break;
      }

      // optional uint64 dtlb_prefetch_misses = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dtlb_prefetch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dtlb_prefetch_misses_)));
          set_has_dtlb_prefetch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_itlb_loads;
        break;
      }

      // optional uint64 itlb_loads = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itlb_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itlb_loads_)));
          set_has_itlb_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_itlb_load_misses;
        break;
      }

      // optional uint64 itlb_load_misses = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itlb_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itlb_load_misses_)));
          set_has_itlb_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_branch_loads;
        break;
      }

      // optional uint64 branch_loads = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_loads_)));
          set_has_branch_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_branch_load_misses;
        break;
      }

      // optional uint64 branch_load_misses = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &branch_load_misses_)));
          set_has_branch_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_node_loads;
        break;
      }

      // optional uint64 node_loads = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_loads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_loads_)));
          set_has_node_loads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_node_load_misses;
        break;
      }

      // optional uint64 node_load_misses = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_load_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_load_misses_)));
          set_has_node_load_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_node_stores;
        break;
      }

      // optional uint64 node_stores = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_stores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_stores_)));
          set_has_node_stores();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_node_store_misses;
        break;
      }

      // optional uint64 node_store_misses = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_store_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_store_misses_)));
          set_has_node_store_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_node_prefetches;
        break;
      }

      // optional uint64 node_prefetches = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_prefetches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_prefetches_)));
          set_has_node_prefetches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_node_prefetch_misses;
        break;
      }

      // optional uint64 node_prefetch_misses = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node_prefetch_misses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_prefetch_misses_)));
          set_has_node_prefetch_misses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PerfStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // required double duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // optional uint64 cycles = 3;
  if (has_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cycles(), output);
  }

  // optional uint64 stalled_cycles_frontend = 4;
  if (has_stalled_cycles_frontend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->stalled_cycles_frontend(), output);
  }

  // optional uint64 stalled_cycles_backend = 5;
  if (has_stalled_cycles_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->stalled_cycles_backend(), output);
  }

  // optional uint64 instructions = 6;
  if (has_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->instructions(), output);
  }

  // optional uint64 cache_references = 7;
  if (has_cache_references()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->cache_references(), output);
  }

  // optional uint64 cache_misses = 8;
  if (has_cache_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->cache_misses(), output);
  }

  // optional uint64 branches = 9;
  if (has_branches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->branches(), output);
  }

  // optional uint64 branch_misses = 10;
  if (has_branch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->branch_misses(), output);
  }

  // optional uint64 bus_cycles = 11;
  if (has_bus_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->bus_cycles(), output);
  }

  // optional uint64 ref_cycles = 12;
  if (has_ref_cycles()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->ref_cycles(), output);
  }

  // optional double cpu_clock = 13;
  if (has_cpu_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->cpu_clock(), output);
  }

  // optional double task_clock = 14;
  if (has_task_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->task_clock(), output);
  }

  // optional uint64 page_faults = 15;
  if (has_page_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->page_faults(), output);
  }

  // optional uint64 minor_faults = 16;
  if (has_minor_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->minor_faults(), output);
  }

  // optional uint64 major_faults = 17;
  if (has_major_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->major_faults(), output);
  }

  // optional uint64 context_switches = 18;
  if (has_context_switches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->context_switches(), output);
  }

  // optional uint64 cpu_migrations = 19;
  if (has_cpu_migrations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->cpu_migrations(), output);
  }

  // optional uint64 alignment_faults = 20;
  if (has_alignment_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->alignment_faults(), output);
  }

  // optional uint64 emulation_faults = 21;
  if (has_emulation_faults()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->emulation_faults(), output);
  }

  // optional uint64 l1_dcache_loads = 22;
  if (has_l1_dcache_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->l1_dcache_loads(), output);
  }

  // optional uint64 l1_dcache_load_misses = 23;
  if (has_l1_dcache_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->l1_dcache_load_misses(), output);
  }

  // optional uint64 l1_dcache_stores = 24;
  if (has_l1_dcache_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->l1_dcache_stores(), output);
  }

  // optional uint64 l1_dcache_store_misses = 25;
  if (has_l1_dcache_store_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->l1_dcache_store_misses(), output);
  }

  // optional uint64 l1_dcache_prefetches = 26;
  if (has_l1_dcache_prefetches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->l1_dcache_prefetches(), output);
  }

  // optional uint64 l1_dcache_prefetch_misses = 27;
  if (has_l1_dcache_prefetch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->l1_dcache_prefetch_misses(), output);
  }

  // optional uint64 l1_icache_loads = 28;
  if (has_l1_icache_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->l1_icache_loads(), output);
  }

  // optional uint64 l1_icache_load_misses = 29;
  if (has_l1_icache_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->l1_icache_load_misses(), output);
  }

  // optional uint64 l1_icache_prefetches = 30;
  if (has_l1_icache_prefetches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->l1_icache_prefetches(), output);
  }

  // optional uint64 l1_icache_prefetch_misses = 31;
  if (has_l1_icache_prefetch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->l1_icache_prefetch_misses(), output);
  }

  // optional uint64 llc_loads = 32;
  if (has_llc_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(32, this->llc_loads(), output);
  }

  // optional uint64 llc_load_misses = 33;
  if (has_llc_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->llc_load_misses(), output);
  }

  // optional uint64 llc_stores = 34;
  if (has_llc_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->llc_stores(), output);
  }

  // optional uint64 llc_store_misses = 35;
  if (has_llc_store_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->llc_store_misses(), output);
  }

  // optional uint64 llc_prefetches = 36;
  if (has_llc_prefetches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(36, this->llc_prefetches(), output);
  }

  // optional uint64 llc_prefetch_misses = 37;
  if (has_llc_prefetch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(37, this->llc_prefetch_misses(), output);
  }

  // optional uint64 dtlb_loads = 38;
  if (has_dtlb_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->dtlb_loads(), output);
  }

  // optional uint64 dtlb_load_misses = 39;
  if (has_dtlb_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->dtlb_load_misses(), output);
  }

  // optional uint64 dtlb_stores = 40;
  if (has_dtlb_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(40, this->dtlb_stores(), output);
  }

  // optional uint64 dtlb_store_misses = 41;
  if (has_dtlb_store_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(41, this->dtlb_store_misses(), output);
  }

  // optional uint64 dtlb_prefetches = 42;
  if (has_dtlb_prefetches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(42, this->dtlb_prefetches(), output);
  }

  // optional uint64 dtlb_prefetch_misses = 43;
  if (has_dtlb_prefetch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(43, this->dtlb_prefetch_misses(), output);
  }

  // optional uint64 itlb_loads = 44;
  if (has_itlb_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->itlb_loads(), output);
  }

  // optional uint64 itlb_load_misses = 45;
  if (has_itlb_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->itlb_load_misses(), output);
  }

  // optional uint64 branch_loads = 46;
  if (has_branch_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->branch_loads(), output);
  }

  // optional uint64 branch_load_misses = 47;
  if (has_branch_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(47, this->branch_load_misses(), output);
  }

  // optional uint64 node_loads = 48;
  if (has_node_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(48, this->node_loads(), output);
  }

  // optional uint64 node_load_misses = 49;
  if (has_node_load_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(49, this->node_load_misses(), output);
  }

  // optional uint64 node_stores = 50;
  if (has_node_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->node_stores(), output);
  }

  // optional uint64 node_store_misses = 51;
  if (has_node_store_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(51, this->node_store_misses(), output);
  }

  // optional uint64 node_prefetches = 52;
  if (has_node_prefetches()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->node_prefetches(), output);
  }

  // optional uint64 node_prefetch_misses = 53;
  if (has_node_prefetch_misses()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->node_prefetch_misses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PerfStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // required double duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  // optional uint64 cycles = 3;
  if (has_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cycles(), target);
  }

  // optional uint64 stalled_cycles_frontend = 4;
  if (has_stalled_cycles_frontend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->stalled_cycles_frontend(), target);
  }

  // optional uint64 stalled_cycles_backend = 5;
  if (has_stalled_cycles_backend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->stalled_cycles_backend(), target);
  }

  // optional uint64 instructions = 6;
  if (has_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->instructions(), target);
  }

  // optional uint64 cache_references = 7;
  if (has_cache_references()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->cache_references(), target);
  }

  // optional uint64 cache_misses = 8;
  if (has_cache_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->cache_misses(), target);
  }

  // optional uint64 branches = 9;
  if (has_branches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->branches(), target);
  }

  // optional uint64 branch_misses = 10;
  if (has_branch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->branch_misses(), target);
  }

  // optional uint64 bus_cycles = 11;
  if (has_bus_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->bus_cycles(), target);
  }

  // optional uint64 ref_cycles = 12;
  if (has_ref_cycles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->ref_cycles(), target);
  }

  // optional double cpu_clock = 13;
  if (has_cpu_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->cpu_clock(), target);
  }

  // optional double task_clock = 14;
  if (has_task_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->task_clock(), target);
  }

  // optional uint64 page_faults = 15;
  if (has_page_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->page_faults(), target);
  }

  // optional uint64 minor_faults = 16;
  if (has_minor_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->minor_faults(), target);
  }

  // optional uint64 major_faults = 17;
  if (has_major_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->major_faults(), target);
  }

  // optional uint64 context_switches = 18;
  if (has_context_switches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->context_switches(), target);
  }

  // optional uint64 cpu_migrations = 19;
  if (has_cpu_migrations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->cpu_migrations(), target);
  }

  // optional uint64 alignment_faults = 20;
  if (has_alignment_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->alignment_faults(), target);
  }

  // optional uint64 emulation_faults = 21;
  if (has_emulation_faults()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->emulation_faults(), target);
  }

  // optional uint64 l1_dcache_loads = 22;
  if (has_l1_dcache_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->l1_dcache_loads(), target);
  }

  // optional uint64 l1_dcache_load_misses = 23;
  if (has_l1_dcache_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->l1_dcache_load_misses(), target);
  }

  // optional uint64 l1_dcache_stores = 24;
  if (has_l1_dcache_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->l1_dcache_stores(), target);
  }

  // optional uint64 l1_dcache_store_misses = 25;
  if (has_l1_dcache_store_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->l1_dcache_store_misses(), target);
  }

  // optional uint64 l1_dcache_prefetches = 26;
  if (has_l1_dcache_prefetches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->l1_dcache_prefetches(), target);
  }

  // optional uint64 l1_dcache_prefetch_misses = 27;
  if (has_l1_dcache_prefetch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->l1_dcache_prefetch_misses(), target);
  }

  // optional uint64 l1_icache_loads = 28;
  if (has_l1_icache_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->l1_icache_loads(), target);
  }

  // optional uint64 l1_icache_load_misses = 29;
  if (has_l1_icache_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->l1_icache_load_misses(), target);
  }

  // optional uint64 l1_icache_prefetches = 30;
  if (has_l1_icache_prefetches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->l1_icache_prefetches(), target);
  }

  // optional uint64 l1_icache_prefetch_misses = 31;
  if (has_l1_icache_prefetch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->l1_icache_prefetch_misses(), target);
  }

  // optional uint64 llc_loads = 32;
  if (has_llc_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(32, this->llc_loads(), target);
  }

  // optional uint64 llc_load_misses = 33;
  if (has_llc_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->llc_load_misses(), target);
  }

  // optional uint64 llc_stores = 34;
  if (has_llc_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->llc_stores(), target);
  }

  // optional uint64 llc_store_misses = 35;
  if (has_llc_store_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->llc_store_misses(), target);
  }

  // optional uint64 llc_prefetches = 36;
  if (has_llc_prefetches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(36, this->llc_prefetches(), target);
  }

  // optional uint64 llc_prefetch_misses = 37;
  if (has_llc_prefetch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(37, this->llc_prefetch_misses(), target);
  }

  // optional uint64 dtlb_loads = 38;
  if (has_dtlb_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->dtlb_loads(), target);
  }

  // optional uint64 dtlb_load_misses = 39;
  if (has_dtlb_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->dtlb_load_misses(), target);
  }

  // optional uint64 dtlb_stores = 40;
  if (has_dtlb_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(40, this->dtlb_stores(), target);
  }

  // optional uint64 dtlb_store_misses = 41;
  if (has_dtlb_store_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(41, this->dtlb_store_misses(), target);
  }

  // optional uint64 dtlb_prefetches = 42;
  if (has_dtlb_prefetches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(42, this->dtlb_prefetches(), target);
  }

  // optional uint64 dtlb_prefetch_misses = 43;
  if (has_dtlb_prefetch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(43, this->dtlb_prefetch_misses(), target);
  }

  // optional uint64 itlb_loads = 44;
  if (has_itlb_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->itlb_loads(), target);
  }

  // optional uint64 itlb_load_misses = 45;
  if (has_itlb_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->itlb_load_misses(), target);
  }

  // optional uint64 branch_loads = 46;
  if (has_branch_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->branch_loads(), target);
  }

  // optional uint64 branch_load_misses = 47;
  if (has_branch_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(47, this->branch_load_misses(), target);
  }

  // optional uint64 node_loads = 48;
  if (has_node_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(48, this->node_loads(), target);
  }

  // optional uint64 node_load_misses = 49;
  if (has_node_load_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(49, this->node_load_misses(), target);
  }

  // optional uint64 node_stores = 50;
  if (has_node_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->node_stores(), target);
  }

  // optional uint64 node_store_misses = 51;
  if (has_node_store_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(51, this->node_store_misses(), target);
  }

  // optional uint64 node_prefetches = 52;
  if (has_node_prefetches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->node_prefetches(), target);
  }

  // optional uint64 node_prefetch_misses = 53;
  if (has_node_prefetch_misses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->node_prefetch_misses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PerfStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // required double duration = 2;
    if (has_duration()) {
      total_size += 1 + 8;
    }

    // optional uint64 cycles = 3;
    if (has_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cycles());
    }

    // optional uint64 stalled_cycles_frontend = 4;
    if (has_stalled_cycles_frontend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stalled_cycles_frontend());
    }

    // optional uint64 stalled_cycles_backend = 5;
    if (has_stalled_cycles_backend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stalled_cycles_backend());
    }

    // optional uint64 instructions = 6;
    if (has_instructions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instructions());
    }

    // optional uint64 cache_references = 7;
    if (has_cache_references()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cache_references());
    }

    // optional uint64 cache_misses = 8;
    if (has_cache_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cache_misses());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 branches = 9;
    if (has_branches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branches());
    }

    // optional uint64 branch_misses = 10;
    if (has_branch_misses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_misses());
    }

    // optional uint64 bus_cycles = 11;
    if (has_bus_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bus_cycles());
    }

    // optional uint64 ref_cycles = 12;
    if (has_ref_cycles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ref_cycles());
    }

    // optional double cpu_clock = 13;
    if (has_cpu_clock()) {
      total_size += 1 + 8;
    }

    // optional double task_clock = 14;
    if (has_task_clock()) {
      total_size += 1 + 8;
    }

    // optional uint64 page_faults = 15;
    if (has_page_faults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->page_faults());
    }

    // optional uint64 minor_faults = 16;
    if (has_minor_faults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->minor_faults());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 major_faults = 17;
    if (has_major_faults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->major_faults());
    }

    // optional uint64 context_switches = 18;
    if (has_context_switches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->context_switches());
    }

    // optional uint64 cpu_migrations = 19;
    if (has_cpu_migrations()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cpu_migrations());
    }

    // optional uint64 alignment_faults = 20;
    if (has_alignment_faults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->alignment_faults());
    }

    // optional uint64 emulation_faults = 21;
    if (has_emulation_faults()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emulation_faults());
    }

    // optional uint64 l1_dcache_loads = 22;
    if (has_l1_dcache_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_loads());
    }

    // optional uint64 l1_dcache_load_misses = 23;
    if (has_l1_dcache_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_load_misses());
    }

    // optional uint64 l1_dcache_stores = 24;
    if (has_l1_dcache_stores()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_stores());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint64 l1_dcache_store_misses = 25;
    if (has_l1_dcache_store_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_store_misses());
    }

    // optional uint64 l1_dcache_prefetches = 26;
    if (has_l1_dcache_prefetches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_prefetches());
    }

    // optional uint64 l1_dcache_prefetch_misses = 27;
    if (has_l1_dcache_prefetch_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_dcache_prefetch_misses());
    }

    // optional uint64 l1_icache_loads = 28;
    if (has_l1_icache_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_icache_loads());
    }

    // optional uint64 l1_icache_load_misses = 29;
    if (has_l1_icache_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_icache_load_misses());
    }

    // optional uint64 l1_icache_prefetches = 30;
    if (has_l1_icache_prefetches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_icache_prefetches());
    }

    // optional uint64 l1_icache_prefetch_misses = 31;
    if (has_l1_icache_prefetch_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->l1_icache_prefetch_misses());
    }

    // optional uint64 llc_loads = 32;
    if (has_llc_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_loads());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint64 llc_load_misses = 33;
    if (has_llc_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_load_misses());
    }

    // optional uint64 llc_stores = 34;
    if (has_llc_stores()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_stores());
    }

    // optional uint64 llc_store_misses = 35;
    if (has_llc_store_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_store_misses());
    }

    // optional uint64 llc_prefetches = 36;
    if (has_llc_prefetches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_prefetches());
    }

    // optional uint64 llc_prefetch_misses = 37;
    if (has_llc_prefetch_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->llc_prefetch_misses());
    }

    // optional uint64 dtlb_loads = 38;
    if (has_dtlb_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_loads());
    }

    // optional uint64 dtlb_load_misses = 39;
    if (has_dtlb_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_load_misses());
    }

    // optional uint64 dtlb_stores = 40;
    if (has_dtlb_stores()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_stores());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint64 dtlb_store_misses = 41;
    if (has_dtlb_store_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_store_misses());
    }

    // optional uint64 dtlb_prefetches = 42;
    if (has_dtlb_prefetches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_prefetches());
    }

    // optional uint64 dtlb_prefetch_misses = 43;
    if (has_dtlb_prefetch_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dtlb_prefetch_misses());
    }

    // optional uint64 itlb_loads = 44;
    if (has_itlb_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itlb_loads());
    }

    // optional uint64 itlb_load_misses = 45;
    if (has_itlb_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itlb_load_misses());
    }

    // optional uint64 branch_loads = 46;
    if (has_branch_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_loads());
    }

    // optional uint64 branch_load_misses = 47;
    if (has_branch_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->branch_load_misses());
    }

    // optional uint64 node_loads = 48;
    if (has_node_loads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_loads());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint64 node_load_misses = 49;
    if (has_node_load_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_load_misses());
    }

    // optional uint64 node_stores = 50;
    if (has_node_stores()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_stores());
    }

    // optional uint64 node_store_misses = 51;
    if (has_node_store_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_store_misses());
    }

    // optional uint64 node_prefetches = 52;
    if (has_node_prefetches()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_prefetches());
    }

    // optional uint64 node_prefetch_misses = 53;
    if (has_node_prefetch_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->node_prefetch_misses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerfStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerfStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PerfStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerfStatistics::MergeFrom(const PerfStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_cycles()) {
      set_cycles(from.cycles());
    }
    if (from.has_stalled_cycles_frontend()) {
      set_stalled_cycles_frontend(from.stalled_cycles_frontend());
    }
    if (from.has_stalled_cycles_backend()) {
      set_stalled_cycles_backend(from.stalled_cycles_backend());
    }
    if (from.has_instructions()) {
      set_instructions(from.instructions());
    }
    if (from.has_cache_references()) {
      set_cache_references(from.cache_references());
    }
    if (from.has_cache_misses()) {
      set_cache_misses(from.cache_misses());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_branches()) {
      set_branches(from.branches());
    }
    if (from.has_branch_misses()) {
      set_branch_misses(from.branch_misses());
    }
    if (from.has_bus_cycles()) {
      set_bus_cycles(from.bus_cycles());
    }
    if (from.has_ref_cycles()) {
      set_ref_cycles(from.ref_cycles());
    }
    if (from.has_cpu_clock()) {
      set_cpu_clock(from.cpu_clock());
    }
    if (from.has_task_clock()) {
      set_task_clock(from.task_clock());
    }
    if (from.has_page_faults()) {
      set_page_faults(from.page_faults());
    }
    if (from.has_minor_faults()) {
      set_minor_faults(from.minor_faults());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_major_faults()) {
      set_major_faults(from.major_faults());
    }
    if (from.has_context_switches()) {
      set_context_switches(from.context_switches());
    }
    if (from.has_cpu_migrations()) {
      set_cpu_migrations(from.cpu_migrations());
    }
    if (from.has_alignment_faults()) {
      set_alignment_faults(from.alignment_faults());
    }
    if (from.has_emulation_faults()) {
      set_emulation_faults(from.emulation_faults());
    }
    if (from.has_l1_dcache_loads()) {
      set_l1_dcache_loads(from.l1_dcache_loads());
    }
    if (from.has_l1_dcache_load_misses()) {
      set_l1_dcache_load_misses(from.l1_dcache_load_misses());
    }
    if (from.has_l1_dcache_stores()) {
      set_l1_dcache_stores(from.l1_dcache_stores());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_l1_dcache_store_misses()) {
      set_l1_dcache_store_misses(from.l1_dcache_store_misses());
    }
    if (from.has_l1_dcache_prefetches()) {
      set_l1_dcache_prefetches(from.l1_dcache_prefetches());
    }
    if (from.has_l1_dcache_prefetch_misses()) {
      set_l1_dcache_prefetch_misses(from.l1_dcache_prefetch_misses());
    }
    if (from.has_l1_icache_loads()) {
      set_l1_icache_loads(from.l1_icache_loads());
    }
    if (from.has_l1_icache_load_misses()) {
      set_l1_icache_load_misses(from.l1_icache_load_misses());
    }
    if (from.has_l1_icache_prefetches()) {
      set_l1_icache_prefetches(from.l1_icache_prefetches());
    }
    if (from.has_l1_icache_prefetch_misses()) {
      set_l1_icache_prefetch_misses(from.l1_icache_prefetch_misses());
    }
    if (from.has_llc_loads()) {
      set_llc_loads(from.llc_loads());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_llc_load_misses()) {
      set_llc_load_misses(from.llc_load_misses());
    }
    if (from.has_llc_stores()) {
      set_llc_stores(from.llc_stores());
    }
    if (from.has_llc_store_misses()) {
      set_llc_store_misses(from.llc_store_misses());
    }
    if (from.has_llc_prefetches()) {
      set_llc_prefetches(from.llc_prefetches());
    }
    if (from.has_llc_prefetch_misses()) {
      set_llc_prefetch_misses(from.llc_prefetch_misses());
    }
    if (from.has_dtlb_loads()) {
      set_dtlb_loads(from.dtlb_loads());
    }
    if (from.has_dtlb_load_misses()) {
      set_dtlb_load_misses(from.dtlb_load_misses());
    }
    if (from.has_dtlb_stores()) {
      set_dtlb_stores(from.dtlb_stores());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dtlb_store_misses()) {
      set_dtlb_store_misses(from.dtlb_store_misses());
    }
    if (from.has_dtlb_prefetches()) {
      set_dtlb_prefetches(from.dtlb_prefetches());
    }
    if (from.has_dtlb_prefetch_misses()) {
      set_dtlb_prefetch_misses(from.dtlb_prefetch_misses());
    }
    if (from.has_itlb_loads()) {
      set_itlb_loads(from.itlb_loads());
    }
    if (from.has_itlb_load_misses()) {
      set_itlb_load_misses(from.itlb_load_misses());
    }
    if (from.has_branch_loads()) {
      set_branch_loads(from.branch_loads());
    }
    if (from.has_branch_load_misses()) {
      set_branch_load_misses(from.branch_load_misses());
    }
    if (from.has_node_loads()) {
      set_node_loads(from.node_loads());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_node_load_misses()) {
      set_node_load_misses(from.node_load_misses());
    }
    if (from.has_node_stores()) {
      set_node_stores(from.node_stores());
    }
    if (from.has_node_store_misses()) {
      set_node_store_misses(from.node_store_misses());
    }
    if (from.has_node_prefetches()) {
      set_node_prefetches(from.node_prefetches());
    }
    if (from.has_node_prefetch_misses()) {
      set_node_prefetch_misses(from.node_prefetch_misses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerfStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerfStatistics::CopyFrom(const PerfStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PerfStatistics::Swap(PerfStatistics* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(duration_, other->duration_);
    std::swap(cycles_, other->cycles_);
    std::swap(stalled_cycles_frontend_, other->stalled_cycles_frontend_);
    std::swap(stalled_cycles_backend_, other->stalled_cycles_backend_);
    std::swap(instructions_, other->instructions_);
    std::swap(cache_references_, other->cache_references_);
    std::swap(cache_misses_, other->cache_misses_);
    std::swap(branches_, other->branches_);
    std::swap(branch_misses_, other->branch_misses_);
    std::swap(bus_cycles_, other->bus_cycles_);
    std::swap(ref_cycles_, other->ref_cycles_);
    std::swap(cpu_clock_, other->cpu_clock_);
    std::swap(task_clock_, other->task_clock_);
    std::swap(page_faults_, other->page_faults_);
    std::swap(minor_faults_, other->minor_faults_);
    std::swap(major_faults_, other->major_faults_);
    std::swap(context_switches_, other->context_switches_);
    std::swap(cpu_migrations_, other->cpu_migrations_);
    std::swap(alignment_faults_, other->alignment_faults_);
    std::swap(emulation_faults_, other->emulation_faults_);
    std::swap(l1_dcache_loads_, other->l1_dcache_loads_);
    std::swap(l1_dcache_load_misses_, other->l1_dcache_load_misses_);
    std::swap(l1_dcache_stores_, other->l1_dcache_stores_);
    std::swap(l1_dcache_store_misses_, other->l1_dcache_store_misses_);
    std::swap(l1_dcache_prefetches_, other->l1_dcache_prefetches_);
    std::swap(l1_dcache_prefetch_misses_, other->l1_dcache_prefetch_misses_);
    std::swap(l1_icache_loads_, other->l1_icache_loads_);
    std::swap(l1_icache_load_misses_, other->l1_icache_load_misses_);
    std::swap(l1_icache_prefetches_, other->l1_icache_prefetches_);
    std::swap(l1_icache_prefetch_misses_, other->l1_icache_prefetch_misses_);
    std::swap(llc_loads_, other->llc_loads_);
    std::swap(llc_load_misses_, other->llc_load_misses_);
    std::swap(llc_stores_, other->llc_stores_);
    std::swap(llc_store_misses_, other->llc_store_misses_);
    std::swap(llc_prefetches_, other->llc_prefetches_);
    std::swap(llc_prefetch_misses_, other->llc_prefetch_misses_);
    std::swap(dtlb_loads_, other->dtlb_loads_);
    std::swap(dtlb_load_misses_, other->dtlb_load_misses_);
    std::swap(dtlb_stores_, other->dtlb_stores_);
    std::swap(dtlb_store_misses_, other->dtlb_store_misses_);
    std::swap(dtlb_prefetches_, other->dtlb_prefetches_);
    std::swap(dtlb_prefetch_misses_, other->dtlb_prefetch_misses_);
    std::swap(itlb_loads_, other->itlb_loads_);
    std::swap(itlb_load_misses_, other->itlb_load_misses_);
    std::swap(branch_loads_, other->branch_loads_);
    std::swap(branch_load_misses_, other->branch_load_misses_);
    std::swap(node_loads_, other->node_loads_);
    std::swap(node_load_misses_, other->node_load_misses_);
    std::swap(node_stores_, other->node_stores_);
    std::swap(node_store_misses_, other->node_store_misses_);
    std::swap(node_prefetches_, other->node_prefetches_);
    std::swap(node_prefetch_misses_, other->node_prefetch_misses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerfStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerfStatistics_descriptor_;
  metadata.reflection = PerfStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kAgentIdFieldNumber;
const int Request::kResourcesFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::mesos::v1::AgentID::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.v1.AgentID agent_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.v1.AgentID agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  // repeated .mesos.v1.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.v1.AgentID agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  // repeated .mesos.v1.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.v1.AgentID agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

  }
  // repeated .mesos.v1.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::v1::AgentID::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Offer_Operation_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Type_descriptor_;
}
bool Offer_Operation_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Offer_Operation_Type Offer_Operation::LAUNCH;
const Offer_Operation_Type Offer_Operation::RESERVE;
const Offer_Operation_Type Offer_Operation::UNRESERVE;
const Offer_Operation_Type Offer_Operation::CREATE;
const Offer_Operation_Type Offer_Operation::DESTROY;
const Offer_Operation_Type Offer_Operation::Type_MIN;
const Offer_Operation_Type Offer_Operation::Type_MAX;
const int Offer_Operation::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Offer_Operation_Launch::kTaskInfosFieldNumber;
#endif  // !_MSC_VER

Offer_Operation_Launch::Offer_Operation_Launch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation_Launch::InitAsDefaultInstance() {
}

Offer_Operation_Launch::Offer_Operation_Launch(const Offer_Operation_Launch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation_Launch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation_Launch::~Offer_Operation_Launch() {
  SharedDtor();
}

void Offer_Operation_Launch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offer_Operation_Launch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation_Launch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Launch_descriptor_;
}

const Offer_Operation_Launch& Offer_Operation_Launch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation_Launch* Offer_Operation_Launch::default_instance_ = NULL;

Offer_Operation_Launch* Offer_Operation_Launch::New() const {
  return new Offer_Operation_Launch;
}

void Offer_Operation_Launch::Clear() {
  task_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation_Launch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.TaskInfo task_infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation_Launch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.TaskInfo task_infos = 1;
  for (int i = 0; i < this->task_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation_Launch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.TaskInfo task_infos = 1;
  for (int i = 0; i < this->task_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation_Launch::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.TaskInfo task_infos = 1;
  total_size += 1 * this->task_infos_size();
  for (int i = 0; i < this->task_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation_Launch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation_Launch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation_Launch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation_Launch::MergeFrom(const Offer_Operation_Launch& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_infos_.MergeFrom(from.task_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation_Launch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation_Launch::CopyFrom(const Offer_Operation_Launch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation_Launch::IsInitialized() const {

  for (int i = 0; i < task_infos_size(); i++) {
    if (!this->task_infos(i).IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation_Launch::Swap(Offer_Operation_Launch* other) {
  if (other != this) {
    task_infos_.Swap(&other->task_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation_Launch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_Launch_descriptor_;
  metadata.reflection = Offer_Operation_Launch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer_Operation_Reserve::kResourcesFieldNumber;
#endif  // !_MSC_VER

Offer_Operation_Reserve::Offer_Operation_Reserve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation_Reserve::InitAsDefaultInstance() {
}

Offer_Operation_Reserve::Offer_Operation_Reserve(const Offer_Operation_Reserve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation_Reserve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation_Reserve::~Offer_Operation_Reserve() {
  SharedDtor();
}

void Offer_Operation_Reserve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offer_Operation_Reserve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation_Reserve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Reserve_descriptor_;
}

const Offer_Operation_Reserve& Offer_Operation_Reserve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation_Reserve* Offer_Operation_Reserve::default_instance_ = NULL;

Offer_Operation_Reserve* Offer_Operation_Reserve::New() const {
  return new Offer_Operation_Reserve;
}

void Offer_Operation_Reserve::Clear() {
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation_Reserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Resource resources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation_Reserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation_Reserve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation_Reserve::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Resource resources = 1;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation_Reserve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation_Reserve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation_Reserve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation_Reserve::MergeFrom(const Offer_Operation_Reserve& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation_Reserve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation_Reserve::CopyFrom(const Offer_Operation_Reserve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation_Reserve::IsInitialized() const {

  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation_Reserve::Swap(Offer_Operation_Reserve* other) {
  if (other != this) {
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation_Reserve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_Reserve_descriptor_;
  metadata.reflection = Offer_Operation_Reserve_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer_Operation_Unreserve::kResourcesFieldNumber;
#endif  // !_MSC_VER

Offer_Operation_Unreserve::Offer_Operation_Unreserve()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation_Unreserve::InitAsDefaultInstance() {
}

Offer_Operation_Unreserve::Offer_Operation_Unreserve(const Offer_Operation_Unreserve& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation_Unreserve::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation_Unreserve::~Offer_Operation_Unreserve() {
  SharedDtor();
}

void Offer_Operation_Unreserve::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offer_Operation_Unreserve::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation_Unreserve::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Unreserve_descriptor_;
}

const Offer_Operation_Unreserve& Offer_Operation_Unreserve::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation_Unreserve* Offer_Operation_Unreserve::default_instance_ = NULL;

Offer_Operation_Unreserve* Offer_Operation_Unreserve::New() const {
  return new Offer_Operation_Unreserve;
}

void Offer_Operation_Unreserve::Clear() {
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation_Unreserve::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Resource resources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation_Unreserve::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation_Unreserve::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation_Unreserve::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Resource resources = 1;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation_Unreserve::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation_Unreserve* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation_Unreserve*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation_Unreserve::MergeFrom(const Offer_Operation_Unreserve& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation_Unreserve::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation_Unreserve::CopyFrom(const Offer_Operation_Unreserve& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation_Unreserve::IsInitialized() const {

  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation_Unreserve::Swap(Offer_Operation_Unreserve* other) {
  if (other != this) {
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation_Unreserve::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_Unreserve_descriptor_;
  metadata.reflection = Offer_Operation_Unreserve_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer_Operation_Create::kVolumesFieldNumber;
#endif  // !_MSC_VER

Offer_Operation_Create::Offer_Operation_Create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation_Create::InitAsDefaultInstance() {
}

Offer_Operation_Create::Offer_Operation_Create(const Offer_Operation_Create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation_Create::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation_Create::~Offer_Operation_Create() {
  SharedDtor();
}

void Offer_Operation_Create::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offer_Operation_Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation_Create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Create_descriptor_;
}

const Offer_Operation_Create& Offer_Operation_Create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation_Create* Offer_Operation_Create::default_instance_ = NULL;

Offer_Operation_Create* Offer_Operation_Create::New() const {
  return new Offer_Operation_Create;
}

void Offer_Operation_Create::Clear() {
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation_Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Resource volumes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_volumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation_Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Resource volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation_Create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Resource volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->volumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation_Create::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Resource volumes = 1;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation_Create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation_Create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation_Create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation_Create::MergeFrom(const Offer_Operation_Create& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation_Create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation_Create::CopyFrom(const Offer_Operation_Create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation_Create::IsInitialized() const {

  for (int i = 0; i < volumes_size(); i++) {
    if (!this->volumes(i).IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation_Create::Swap(Offer_Operation_Create* other) {
  if (other != this) {
    volumes_.Swap(&other->volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation_Create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_Create_descriptor_;
  metadata.reflection = Offer_Operation_Create_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer_Operation_Destroy::kVolumesFieldNumber;
#endif  // !_MSC_VER

Offer_Operation_Destroy::Offer_Operation_Destroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation_Destroy::InitAsDefaultInstance() {
}

Offer_Operation_Destroy::Offer_Operation_Destroy(const Offer_Operation_Destroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation_Destroy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation_Destroy::~Offer_Operation_Destroy() {
  SharedDtor();
}

void Offer_Operation_Destroy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Offer_Operation_Destroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation_Destroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_Destroy_descriptor_;
}

const Offer_Operation_Destroy& Offer_Operation_Destroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation_Destroy* Offer_Operation_Destroy::default_instance_ = NULL;

Offer_Operation_Destroy* Offer_Operation_Destroy::New() const {
  return new Offer_Operation_Destroy;
}

void Offer_Operation_Destroy::Clear() {
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation_Destroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Resource volumes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_volumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation_Destroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Resource volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation_Destroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Resource volumes = 1;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->volumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation_Destroy::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Resource volumes = 1;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation_Destroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation_Destroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation_Destroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation_Destroy::MergeFrom(const Offer_Operation_Destroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation_Destroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation_Destroy::CopyFrom(const Offer_Operation_Destroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation_Destroy::IsInitialized() const {

  for (int i = 0; i < volumes_size(); i++) {
    if (!this->volumes(i).IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation_Destroy::Swap(Offer_Operation_Destroy* other) {
  if (other != this) {
    volumes_.Swap(&other->volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation_Destroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_Destroy_descriptor_;
  metadata.reflection = Offer_Operation_Destroy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer_Operation::kTypeFieldNumber;
const int Offer_Operation::kLaunchFieldNumber;
const int Offer_Operation::kReserveFieldNumber;
const int Offer_Operation::kUnreserveFieldNumber;
const int Offer_Operation::kCreateFieldNumber;
const int Offer_Operation::kDestroyFieldNumber;
#endif  // !_MSC_VER

Offer_Operation::Offer_Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer_Operation::InitAsDefaultInstance() {
  launch_ = const_cast< ::mesos::v1::Offer_Operation_Launch*>(&::mesos::v1::Offer_Operation_Launch::default_instance());
  reserve_ = const_cast< ::mesos::v1::Offer_Operation_Reserve*>(&::mesos::v1::Offer_Operation_Reserve::default_instance());
  unreserve_ = const_cast< ::mesos::v1::Offer_Operation_Unreserve*>(&::mesos::v1::Offer_Operation_Unreserve::default_instance());
  create_ = const_cast< ::mesos::v1::Offer_Operation_Create*>(&::mesos::v1::Offer_Operation_Create::default_instance());
  destroy_ = const_cast< ::mesos::v1::Offer_Operation_Destroy*>(&::mesos::v1::Offer_Operation_Destroy::default_instance());
}

Offer_Operation::Offer_Operation(const Offer_Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer_Operation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  launch_ = NULL;
  reserve_ = NULL;
  unreserve_ = NULL;
  create_ = NULL;
  destroy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer_Operation::~Offer_Operation() {
  SharedDtor();
}

void Offer_Operation::SharedDtor() {
  if (this != default_instance_) {
    delete launch_;
    delete reserve_;
    delete unreserve_;
    delete create_;
    delete destroy_;
  }
}

void Offer_Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer_Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_Operation_descriptor_;
}

const Offer_Operation& Offer_Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer_Operation* Offer_Operation::default_instance_ = NULL;

Offer_Operation* Offer_Operation::New() const {
  return new Offer_Operation;
}

void Offer_Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_launch()) {
      if (launch_ != NULL) launch_->::mesos::v1::Offer_Operation_Launch::Clear();
    }
    if (has_reserve()) {
      if (reserve_ != NULL) reserve_->::mesos::v1::Offer_Operation_Reserve::Clear();
    }
    if (has_unreserve()) {
      if (unreserve_ != NULL) unreserve_->::mesos::v1::Offer_Operation_Unreserve::Clear();
    }
    if (has_create()) {
      if (create_ != NULL) create_->::mesos::v1::Offer_Operation_Create::Clear();
    }
    if (has_destroy()) {
      if (destroy_ != NULL) destroy_->::mesos::v1::Offer_Operation_Destroy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer_Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.Offer.Operation.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Offer_Operation_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::Offer_Operation_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_launch;
        break;
      }

      // optional .mesos.v1.Offer.Operation.Launch launch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_launch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_launch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reserve;
        break;
      }

      // optional .mesos.v1.Offer.Operation.Reserve reserve = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unreserve;
        break;
      }

      // optional .mesos.v1.Offer.Operation.Unreserve unreserve = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unreserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unreserve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_create;
        break;
      }

      // optional .mesos.v1.Offer.Operation.Create create = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_destroy;
        break;
      }

      // optional .mesos.v1.Offer.Operation.Destroy destroy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destroy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer_Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.Offer.Operation.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.v1.Offer.Operation.Launch launch = 2;
  if (has_launch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->launch(), output);
  }

  // optional .mesos.v1.Offer.Operation.Reserve reserve = 3;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reserve(), output);
  }

  // optional .mesos.v1.Offer.Operation.Unreserve unreserve = 4;
  if (has_unreserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unreserve(), output);
  }

  // optional .mesos.v1.Offer.Operation.Create create = 5;
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->create(), output);
  }

  // optional .mesos.v1.Offer.Operation.Destroy destroy = 6;
  if (has_destroy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->destroy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer_Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.Offer.Operation.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.v1.Offer.Operation.Launch launch = 2;
  if (has_launch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->launch(), target);
  }

  // optional .mesos.v1.Offer.Operation.Reserve reserve = 3;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reserve(), target);
  }

  // optional .mesos.v1.Offer.Operation.Unreserve unreserve = 4;
  if (has_unreserve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unreserve(), target);
  }

  // optional .mesos.v1.Offer.Operation.Create create = 5;
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->create(), target);
  }

  // optional .mesos.v1.Offer.Operation.Destroy destroy = 6;
  if (has_destroy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->destroy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer_Operation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.Offer.Operation.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.Offer.Operation.Launch launch = 2;
    if (has_launch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->launch());
    }

    // optional .mesos.v1.Offer.Operation.Reserve reserve = 3;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reserve());
    }

    // optional .mesos.v1.Offer.Operation.Unreserve unreserve = 4;
    if (has_unreserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unreserve());
    }

    // optional .mesos.v1.Offer.Operation.Create create = 5;
    if (has_create()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create());
    }

    // optional .mesos.v1.Offer.Operation.Destroy destroy = 6;
    if (has_destroy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer_Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer_Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer_Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer_Operation::MergeFrom(const Offer_Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_launch()) {
      mutable_launch()->::mesos::v1::Offer_Operation_Launch::MergeFrom(from.launch());
    }
    if (from.has_reserve()) {
      mutable_reserve()->::mesos::v1::Offer_Operation_Reserve::MergeFrom(from.reserve());
    }
    if (from.has_unreserve()) {
      mutable_unreserve()->::mesos::v1::Offer_Operation_Unreserve::MergeFrom(from.unreserve());
    }
    if (from.has_create()) {
      mutable_create()->::mesos::v1::Offer_Operation_Create::MergeFrom(from.create());
    }
    if (from.has_destroy()) {
      mutable_destroy()->::mesos::v1::Offer_Operation_Destroy::MergeFrom(from.destroy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer_Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer_Operation::CopyFrom(const Offer_Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer_Operation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_launch()) {
    if (!this->launch().IsInitialized()) return false;
  }
  if (has_reserve()) {
    if (!this->reserve().IsInitialized()) return false;
  }
  if (has_unreserve()) {
    if (!this->unreserve().IsInitialized()) return false;
  }
  if (has_create()) {
    if (!this->create().IsInitialized()) return false;
  }
  if (has_destroy()) {
    if (!this->destroy().IsInitialized()) return false;
  }
  return true;
}

void Offer_Operation::Swap(Offer_Operation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(launch_, other->launch_);
    std::swap(reserve_, other->reserve_);
    std::swap(unreserve_, other->unreserve_);
    std::swap(create_, other->create_);
    std::swap(destroy_, other->destroy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer_Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_Operation_descriptor_;
  metadata.reflection = Offer_Operation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Offer::kIdFieldNumber;
const int Offer::kFrameworkIdFieldNumber;
const int Offer::kAgentIdFieldNumber;
const int Offer::kHostnameFieldNumber;
const int Offer::kUrlFieldNumber;
const int Offer::kResourcesFieldNumber;
const int Offer::kAttributesFieldNumber;
const int Offer::kExecutorIdsFieldNumber;
const int Offer::kUnavailabilityFieldNumber;
#endif  // !_MSC_VER

Offer::Offer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Offer::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::v1::OfferID*>(&::mesos::v1::OfferID::default_instance());
  framework_id_ = const_cast< ::mesos::v1::FrameworkID*>(&::mesos::v1::FrameworkID::default_instance());
  agent_id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
  url_ = const_cast< ::mesos::v1::URL*>(&::mesos::v1::URL::default_instance());
  unavailability_ = const_cast< ::mesos::v1::Unavailability*>(&::mesos::v1::Unavailability::default_instance());
}

Offer::Offer(const Offer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Offer::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  framework_id_ = NULL;
  agent_id_ = NULL;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = NULL;
  unavailability_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Offer::~Offer() {
  SharedDtor();
}

void Offer::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete id_;
    delete framework_id_;
    delete agent_id_;
    delete url_;
    delete unavailability_;
  }
}

void Offer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Offer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Offer_descriptor_;
}

const Offer& Offer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Offer* Offer::default_instance_ = NULL;

Offer* Offer::New() const {
  return new Offer;
}

void Offer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::mesos::v1::OfferID::Clear();
    }
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::v1::FrameworkID::Clear();
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::mesos::v1::AgentID::Clear();
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_url()) {
      if (url_ != NULL) url_->::mesos::v1::URL::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_unavailability()) {
      if (unavailability_ != NULL) unavailability_->::mesos::v1::Unavailability::Clear();
    }
  }
  resources_.Clear();
  attributes_.Clear();
  executor_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Offer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.OfferID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_id;
        break;
      }

      // required .mesos.v1.FrameworkID framework_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agent_id;
        break;
      }

      // required .mesos.v1.AgentID agent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // required string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_resources;
        if (input->ExpectTag(50)) goto parse_executor_ids;
        break;
      }

      // repeated .mesos.v1.ExecutorID executor_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_executor_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_executor_ids;
        if (input->ExpectTag(58)) goto parse_attributes;
        break;
      }

      // repeated .mesos.v1.Attribute attributes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attributes;
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional .mesos.v1.URL url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_unavailability;
        break;
      }

      // optional .mesos.v1.Unavailability unavailability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unavailability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unavailability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Offer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.OfferID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // required .mesos.v1.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_id(), output);
  }

  // required .mesos.v1.AgentID agent_id = 3;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agent_id(), output);
  }

  // required string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }

  // repeated .mesos.v1.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->resources(i), output);
  }

  // repeated .mesos.v1.ExecutorID executor_ids = 6;
  for (int i = 0; i < this->executor_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->executor_ids(i), output);
  }

  // repeated .mesos.v1.Attribute attributes = 7;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attributes(i), output);
  }

  // optional .mesos.v1.URL url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->url(), output);
  }

  // optional .mesos.v1.Unavailability unavailability = 9;
  if (has_unavailability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->unavailability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Offer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.OfferID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // required .mesos.v1.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_id(), target);
  }

  // required .mesos.v1.AgentID agent_id = 3;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agent_id(), target);
  }

  // required string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // repeated .mesos.v1.Resource resources = 5;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->resources(i), target);
  }

  // repeated .mesos.v1.ExecutorID executor_ids = 6;
  for (int i = 0; i < this->executor_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->executor_ids(i), target);
  }

  // repeated .mesos.v1.Attribute attributes = 7;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attributes(i), target);
  }

  // optional .mesos.v1.URL url = 8;
  if (has_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->url(), target);
  }

  // optional .mesos.v1.Unavailability unavailability = 9;
  if (has_unavailability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->unavailability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Offer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.OfferID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // required .mesos.v1.FrameworkID framework_id = 2;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // required .mesos.v1.AgentID agent_id = 3;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // required string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional .mesos.v1.URL url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.v1.Unavailability unavailability = 9;
    if (has_unavailability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unavailability());
    }

  }
  // repeated .mesos.v1.Resource resources = 5;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  // repeated .mesos.v1.Attribute attributes = 7;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  // repeated .mesos.v1.ExecutorID executor_ids = 6;
  total_size += 1 * this->executor_ids_size();
  for (int i = 0; i < this->executor_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->executor_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Offer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Offer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Offer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Offer::MergeFrom(const Offer& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  attributes_.MergeFrom(from.attributes_);
  executor_ids_.MergeFrom(from.executor_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::mesos::v1::OfferID::MergeFrom(from.id());
    }
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::v1::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::v1::AgentID::MergeFrom(from.agent_id());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_url()) {
      mutable_url()->::mesos::v1::URL::MergeFrom(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unavailability()) {
      mutable_unavailability()->::mesos::v1::Unavailability::MergeFrom(from.unavailability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Offer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Offer::CopyFrom(const Offer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_url()) {
    if (!this->url().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < executor_ids_size(); i++) {
    if (!this->executor_ids(i).IsInitialized()) return false;
  }
  if (has_unavailability()) {
    if (!this->unavailability().IsInitialized()) return false;
  }
  return true;
}

void Offer::Swap(Offer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(hostname_, other->hostname_);
    std::swap(url_, other->url_);
    resources_.Swap(&other->resources_);
    attributes_.Swap(&other->attributes_);
    executor_ids_.Swap(&other->executor_ids_);
    std::swap(unavailability_, other->unavailability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Offer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Offer_descriptor_;
  metadata.reflection = Offer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InverseOffer::kIdFieldNumber;
const int InverseOffer::kUrlFieldNumber;
const int InverseOffer::kFrameworkIdFieldNumber;
const int InverseOffer::kAgentIdFieldNumber;
const int InverseOffer::kUnavailabilityFieldNumber;
const int InverseOffer::kResourcesFieldNumber;
#endif  // !_MSC_VER

InverseOffer::InverseOffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InverseOffer::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::v1::OfferID*>(&::mesos::v1::OfferID::default_instance());
  url_ = const_cast< ::mesos::v1::URL*>(&::mesos::v1::URL::default_instance());
  framework_id_ = const_cast< ::mesos::v1::FrameworkID*>(&::mesos::v1::FrameworkID::default_instance());
  agent_id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
  unavailability_ = const_cast< ::mesos::v1::Unavailability*>(&::mesos::v1::Unavailability::default_instance());
}

InverseOffer::InverseOffer(const InverseOffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InverseOffer::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  url_ = NULL;
  framework_id_ = NULL;
  agent_id_ = NULL;
  unavailability_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InverseOffer::~InverseOffer() {
  SharedDtor();
}

void InverseOffer::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete url_;
    delete framework_id_;
    delete agent_id_;
    delete unavailability_;
  }
}

void InverseOffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InverseOffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InverseOffer_descriptor_;
}

const InverseOffer& InverseOffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

InverseOffer* InverseOffer::default_instance_ = NULL;

InverseOffer* InverseOffer::New() const {
  return new InverseOffer;
}

void InverseOffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::mesos::v1::OfferID::Clear();
    }
    if (has_url()) {
      if (url_ != NULL) url_->::mesos::v1::URL::Clear();
    }
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::v1::FrameworkID::Clear();
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::mesos::v1::AgentID::Clear();
    }
    if (has_unavailability()) {
      if (unavailability_ != NULL) unavailability_->::mesos::v1::Unavailability::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InverseOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.OfferID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional .mesos.v1.URL url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_framework_id;
        break;
      }

      // required .mesos.v1.FrameworkID framework_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agent_id;
        break;
      }

      // optional .mesos.v1.AgentID agent_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unavailability;
        break;
      }

      // required .mesos.v1.Unavailability unavailability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unavailability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unavailability()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InverseOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.OfferID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // optional .mesos.v1.URL url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->url(), output);
  }

  // required .mesos.v1.FrameworkID framework_id = 3;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->framework_id(), output);
  }

  // optional .mesos.v1.AgentID agent_id = 4;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->agent_id(), output);
  }

  // required .mesos.v1.Unavailability unavailability = 5;
  if (has_unavailability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unavailability(), output);
  }

  // repeated .mesos.v1.Resource resources = 6;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InverseOffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.OfferID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // optional .mesos.v1.URL url = 2;
  if (has_url()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->url(), target);
  }

  // required .mesos.v1.FrameworkID framework_id = 3;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->framework_id(), target);
  }

  // optional .mesos.v1.AgentID agent_id = 4;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->agent_id(), target);
  }

  // required .mesos.v1.Unavailability unavailability = 5;
  if (has_unavailability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->unavailability(), target);
  }

  // repeated .mesos.v1.Resource resources = 6;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InverseOffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.OfferID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional .mesos.v1.URL url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->url());
    }

    // required .mesos.v1.FrameworkID framework_id = 3;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // optional .mesos.v1.AgentID agent_id = 4;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // required .mesos.v1.Unavailability unavailability = 5;
    if (has_unavailability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unavailability());
    }

  }
  // repeated .mesos.v1.Resource resources = 6;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InverseOffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InverseOffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InverseOffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InverseOffer::MergeFrom(const InverseOffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::mesos::v1::OfferID::MergeFrom(from.id());
    }
    if (from.has_url()) {
      mutable_url()->::mesos::v1::URL::MergeFrom(from.url());
    }
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::v1::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::v1::AgentID::MergeFrom(from.agent_id());
    }
    if (from.has_unavailability()) {
      mutable_unavailability()->::mesos::v1::Unavailability::MergeFrom(from.unavailability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InverseOffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseOffer::CopyFrom(const InverseOffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseOffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_url()) {
    if (!this->url().IsInitialized()) return false;
  }
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_unavailability()) {
    if (!this->unavailability().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void InverseOffer::Swap(InverseOffer* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(url_, other->url_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(unavailability_, other->unavailability_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InverseOffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InverseOffer_descriptor_;
  metadata.reflection = InverseOffer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kNameFieldNumber;
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kAgentIdFieldNumber;
const int TaskInfo::kResourcesFieldNumber;
const int TaskInfo::kExecutorFieldNumber;
const int TaskInfo::kCommandFieldNumber;
const int TaskInfo::kContainerFieldNumber;
const int TaskInfo::kDataFieldNumber;
const int TaskInfo::kHealthCheckFieldNumber;
const int TaskInfo::kLabelsFieldNumber;
const int TaskInfo::kDiscoveryFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::v1::TaskID*>(&::mesos::v1::TaskID::default_instance());
  agent_id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
  executor_ = const_cast< ::mesos::v1::ExecutorInfo*>(&::mesos::v1::ExecutorInfo::default_instance());
  command_ = const_cast< ::mesos::v1::CommandInfo*>(&::mesos::v1::CommandInfo::default_instance());
  container_ = const_cast< ::mesos::v1::ContainerInfo*>(&::mesos::v1::ContainerInfo::default_instance());
  health_check_ = const_cast< ::mesos::v1::HealthCheck*>(&::mesos::v1::HealthCheck::default_instance());
  labels_ = const_cast< ::mesos::v1::Labels*>(&::mesos::v1::Labels::default_instance());
  discovery_ = const_cast< ::mesos::v1::DiscoveryInfo*>(&::mesos::v1::DiscoveryInfo::default_instance());
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_id_ = NULL;
  agent_id_ = NULL;
  executor_ = NULL;
  command_ = NULL;
  container_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  health_check_ = NULL;
  labels_ = NULL;
  discovery_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
    delete task_id_;
    delete agent_id_;
    delete executor_;
    delete command_;
    delete container_;
    delete health_check_;
    delete labels_;
    delete discovery_;
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::mesos::v1::AgentID::Clear();
    }
    if (has_executor()) {
      if (executor_ != NULL) executor_->::mesos::v1::ExecutorInfo::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::mesos::v1::CommandInfo::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::mesos::v1::ContainerInfo::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_health_check()) {
      if (health_check_ != NULL) health_check_->::mesos::v1::HealthCheck::Clear();
    }
    if (has_labels()) {
      if (labels_ != NULL) labels_->::mesos::v1::Labels::Clear();
    }
    if (has_discovery()) {
      if (discovery_ != NULL) discovery_->::mesos::v1::DiscoveryInfo::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required .mesos.v1.TaskID task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agent_id;
        break;
      }

      // required .mesos.v1.AgentID agent_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resources;
        break;
      }

      // repeated .mesos.v1.Resource resources = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resources;
        if (input->ExpectTag(42)) goto parse_executor;
        break;
      }

      // optional .mesos.v1.ExecutorInfo executor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_command;
        break;
      }

      // optional .mesos.v1.CommandInfo command = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_health_check;
        break;
      }

      // optional .mesos.v1.HealthCheck health_check = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_health_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_health_check()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_container;
        break;
      }

      // optional .mesos.v1.ContainerInfo container = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_labels;
        break;
      }

      // optional .mesos.v1.Labels labels = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_discovery;
        break;
      }

      // optional .mesos.v1.DiscoveryInfo discovery = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discovery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discovery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .mesos.v1.TaskID task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_id(), output);
  }

  // required .mesos.v1.AgentID agent_id = 3;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agent_id(), output);
  }

  // repeated .mesos.v1.Resource resources = 4;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resources(i), output);
  }

  // optional .mesos.v1.ExecutorInfo executor = 5;
  if (has_executor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->executor(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // optional .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->command(), output);
  }

  // optional .mesos.v1.HealthCheck health_check = 8;
  if (has_health_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->health_check(), output);
  }

  // optional .mesos.v1.ContainerInfo container = 9;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->container(), output);
  }

  // optional .mesos.v1.Labels labels = 10;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->labels(), output);
  }

  // optional .mesos.v1.DiscoveryInfo discovery = 11;
  if (has_discovery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->discovery(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .mesos.v1.TaskID task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_id(), target);
  }

  // required .mesos.v1.AgentID agent_id = 3;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agent_id(), target);
  }

  // repeated .mesos.v1.Resource resources = 4;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resources(i), target);
  }

  // optional .mesos.v1.ExecutorInfo executor = 5;
  if (has_executor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->executor(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional .mesos.v1.CommandInfo command = 7;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->command(), target);
  }

  // optional .mesos.v1.HealthCheck health_check = 8;
  if (has_health_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->health_check(), target);
  }

  // optional .mesos.v1.ContainerInfo container = 9;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->container(), target);
  }

  // optional .mesos.v1.Labels labels = 10;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->labels(), target);
  }

  // optional .mesos.v1.DiscoveryInfo discovery = 11;
  if (has_discovery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->discovery(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .mesos.v1.TaskID task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }

    // required .mesos.v1.AgentID agent_id = 3;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .mesos.v1.ExecutorInfo executor = 5;
    if (has_executor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor());
    }

    // optional .mesos.v1.CommandInfo command = 7;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional .mesos.v1.ContainerInfo container = 9;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.v1.HealthCheck health_check = 8;
    if (has_health_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health_check());
    }

    // optional .mesos.v1.Labels labels = 10;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels());
    }

    // optional .mesos.v1.DiscoveryInfo discovery = 11;
    if (has_discovery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discovery());
    }

  }
  // repeated .mesos.v1.Resource resources = 4;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_task_id()) {
      mutable_task_id()->::mesos::v1::TaskID::MergeFrom(from.task_id());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::v1::AgentID::MergeFrom(from.agent_id());
    }
    if (from.has_executor()) {
      mutable_executor()->::mesos::v1::ExecutorInfo::MergeFrom(from.executor());
    }
    if (from.has_command()) {
      mutable_command()->::mesos::v1::CommandInfo::MergeFrom(from.command());
    }
    if (from.has_container()) {
      mutable_container()->::mesos::v1::ContainerInfo::MergeFrom(from.container());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_health_check()) {
      mutable_health_check()->::mesos::v1::HealthCheck::MergeFrom(from.health_check());
    }
    if (from.has_labels()) {
      mutable_labels()->::mesos::v1::Labels::MergeFrom(from.labels());
    }
    if (from.has_discovery()) {
      mutable_discovery()->::mesos::v1::DiscoveryInfo::MergeFrom(from.discovery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  if (has_executor()) {
    if (!this->executor().IsInitialized()) return false;
  }
  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  if (has_health_check()) {
    if (!this->health_check().IsInitialized()) return false;
  }
  if (has_labels()) {
    if (!this->labels().IsInitialized()) return false;
  }
  if (has_discovery()) {
    if (!this->discovery().IsInitialized()) return false;
  }
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(task_id_, other->task_id_);
    std::swap(agent_id_, other->agent_id_);
    resources_.Swap(&other->resources_);
    std::swap(executor_, other->executor_);
    std::swap(command_, other->command_);
    std::swap(container_, other->container_);
    std::swap(data_, other->data_);
    std::swap(health_check_, other->health_check_);
    std::swap(labels_, other->labels_);
    std::swap(discovery_, other->discovery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskStatus_Source_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_Source_descriptor_;
}
bool TaskStatus_Source_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TaskStatus_Source TaskStatus::SOURCE_MASTER;
const TaskStatus_Source TaskStatus::SOURCE_AGENT;
const TaskStatus_Source TaskStatus::SOURCE_EXECUTOR;
const TaskStatus_Source TaskStatus::Source_MIN;
const TaskStatus_Source TaskStatus::Source_MAX;
const int TaskStatus::Source_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* TaskStatus_Reason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_Reason_descriptor_;
}
bool TaskStatus_Reason_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TaskStatus_Reason TaskStatus::REASON_COMMAND_EXECUTOR_FAILED;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_LAUNCH_FAILED;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_LIMITATION;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_LIMITATION_DISK;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_LIMITATION_MEMORY;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_PREEMPTED;
const TaskStatus_Reason TaskStatus::REASON_CONTAINER_UPDATE_FAILED;
const TaskStatus_Reason TaskStatus::REASON_EXECUTOR_REGISTRATION_TIMEOUT;
const TaskStatus_Reason TaskStatus::REASON_EXECUTOR_REREGISTRATION_TIMEOUT;
const TaskStatus_Reason TaskStatus::REASON_EXECUTOR_TERMINATED;
const TaskStatus_Reason TaskStatus::REASON_EXECUTOR_UNREGISTERED;
const TaskStatus_Reason TaskStatus::REASON_FRAMEWORK_REMOVED;
const TaskStatus_Reason TaskStatus::REASON_GC_ERROR;
const TaskStatus_Reason TaskStatus::REASON_INVALID_FRAMEWORKID;
const TaskStatus_Reason TaskStatus::REASON_INVALID_OFFERS;
const TaskStatus_Reason TaskStatus::REASON_MASTER_DISCONNECTED;
const TaskStatus_Reason TaskStatus::REASON_RECONCILIATION;
const TaskStatus_Reason TaskStatus::REASON_RESOURCES_UNKNOWN;
const TaskStatus_Reason TaskStatus::REASON_AGENT_DISCONNECTED;
const TaskStatus_Reason TaskStatus::REASON_AGENT_REMOVED;
const TaskStatus_Reason TaskStatus::REASON_AGENT_RESTARTED;
const TaskStatus_Reason TaskStatus::REASON_AGENT_UNKNOWN;
const TaskStatus_Reason TaskStatus::REASON_TASK_INVALID;
const TaskStatus_Reason TaskStatus::REASON_TASK_UNAUTHORIZED;
const TaskStatus_Reason TaskStatus::REASON_TASK_UNKNOWN;
const TaskStatus_Reason TaskStatus::Reason_MIN;
const TaskStatus_Reason TaskStatus::Reason_MAX;
const int TaskStatus::Reason_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TaskStatus::kTaskIdFieldNumber;
const int TaskStatus::kStateFieldNumber;
const int TaskStatus::kMessageFieldNumber;
const int TaskStatus::kSourceFieldNumber;
const int TaskStatus::kReasonFieldNumber;
const int TaskStatus::kDataFieldNumber;
const int TaskStatus::kAgentIdFieldNumber;
const int TaskStatus::kExecutorIdFieldNumber;
const int TaskStatus::kTimestampFieldNumber;
const int TaskStatus::kUuidFieldNumber;
const int TaskStatus::kHealthyFieldNumber;
const int TaskStatus::kLabelsFieldNumber;
#endif  // !_MSC_VER

TaskStatus::TaskStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskStatus::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::v1::TaskID*>(&::mesos::v1::TaskID::default_instance());
  agent_id_ = const_cast< ::mesos::v1::AgentID*>(&::mesos::v1::AgentID::default_instance());
  executor_id_ = const_cast< ::mesos::v1::ExecutorID*>(&::mesos::v1::ExecutorID::default_instance());
  labels_ = const_cast< ::mesos::v1::Labels*>(&::mesos::v1::Labels::default_instance());
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = NULL;
  state_ = 6;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = 0;
  reason_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agent_id_ = NULL;
  executor_id_ = NULL;
  timestamp_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  healthy_ = false;
  labels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStatus::~TaskStatus() {
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete task_id_;
    delete agent_id_;
    delete executor_id_;
    delete labels_;
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New() const {
  return new TaskStatus;
}

void TaskStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
    }
    state_ = 6;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    source_ = 0;
    reason_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_agent_id()) {
      if (agent_id_ != NULL) agent_id_->::mesos::v1::AgentID::Clear();
    }
    if (has_executor_id()) {
      if (executor_id_ != NULL) executor_id_->::mesos::v1::ExecutorID::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timestamp_ = 0;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    healthy_ = false;
    if (has_labels()) {
      if (labels_ != NULL) labels_->::mesos::v1::Labels::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TaskID task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .mesos.v1.TaskState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::TaskState_IsValid(value)) {
            set_state(static_cast< ::mesos::v1::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // optional string message = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_agent_id;
        break;
      }

      // optional .mesos.v1.AgentID agent_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_executor_id;
        break;
      }

      // optional .mesos.v1.ExecutorID executor_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_healthy;
        break;
      }

      // optional bool healthy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_healthy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthy_)));
          set_has_healthy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source;
        break;
      }

      // optional .mesos.v1.TaskStatus.Source source = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::TaskStatus_Source_IsValid(value)) {
            set_source(static_cast< ::mesos::v1::TaskStatus_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reason;
        break;
      }

      // optional .mesos.v1.TaskStatus.Reason reason = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::TaskStatus_Reason_IsValid(value)) {
            set_reason(static_cast< ::mesos::v1::TaskStatus_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_labels;
        break;
      }

      // optional .mesos.v1.Labels labels = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_id(), output);
  }

  // required .mesos.v1.TaskState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->message(), output);
  }

  // optional .mesos.v1.AgentID agent_id = 5;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->agent_id(), output);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->timestamp(), output);
  }

  // optional .mesos.v1.ExecutorID executor_id = 7;
  if (has_executor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->executor_id(), output);
  }

  // optional bool healthy = 8;
  if (has_healthy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->healthy(), output);
  }

  // optional .mesos.v1.TaskStatus.Source source = 9;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->source(), output);
  }

  // optional .mesos.v1.TaskStatus.Reason reason = 10;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reason(), output);
  }

  // optional bytes uuid = 11;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->uuid(), output);
  }

  // optional .mesos.v1.Labels labels = 12;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->labels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_id(), target);
  }

  // required .mesos.v1.TaskState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional string message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  // optional .mesos.v1.AgentID agent_id = 5;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->agent_id(), target);
  }

  // optional double timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->timestamp(), target);
  }

  // optional .mesos.v1.ExecutorID executor_id = 7;
  if (has_executor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->executor_id(), target);
  }

  // optional bool healthy = 8;
  if (has_healthy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->healthy(), target);
  }

  // optional .mesos.v1.TaskStatus.Source source = 9;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->source(), target);
  }

  // optional .mesos.v1.TaskStatus.Reason reason = 10;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reason(), target);
  }

  // optional bytes uuid = 11;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->uuid(), target);
  }

  // optional .mesos.v1.Labels labels = 12;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->labels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TaskID task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }

    // required .mesos.v1.TaskState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .mesos.v1.TaskStatus.Source source = 9;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional .mesos.v1.TaskStatus.Reason reason = 10;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .mesos.v1.AgentID agent_id = 5;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

    // optional .mesos.v1.ExecutorID executor_id = 7;
    if (has_executor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional bytes uuid = 11;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bool healthy = 8;
    if (has_healthy()) {
      total_size += 1 + 1;
    }

    // optional .mesos.v1.Labels labels = 12;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      mutable_task_id()->::mesos::v1::TaskID::MergeFrom(from.task_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::v1::AgentID::MergeFrom(from.agent_id());
    }
    if (from.has_executor_id()) {
      mutable_executor_id()->::mesos::v1::ExecutorID::MergeFrom(from.executor_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_healthy()) {
      set_healthy(from.healthy());
    }
    if (from.has_labels()) {
      mutable_labels()->::mesos::v1::Labels::MergeFrom(from.labels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  if (has_executor_id()) {
    if (!this->executor_id().IsInitialized()) return false;
  }
  if (has_labels()) {
    if (!this->labels().IsInitialized()) return false;
  }
  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(state_, other->state_);
    std::swap(message_, other->message_);
    std::swap(source_, other->source_);
    std::swap(reason_, other->reason_);
    std::swap(data_, other->data_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(executor_id_, other->executor_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(uuid_, other->uuid_);
    std::swap(healthy_, other->healthy_);
    std::swap(labels_, other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Filters::kRefuseSecondsFieldNumber;
#endif  // !_MSC_VER

Filters::Filters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Filters::InitAsDefaultInstance() {
}

Filters::Filters(const Filters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Filters::SharedCtor() {
  _cached_size_ = 0;
  refuse_seconds_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filters::~Filters() {
  SharedDtor();
}

void Filters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Filters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filters_descriptor_;
}

const Filters& Filters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Filters* Filters::default_instance_ = NULL;

Filters* Filters::New() const {
  return new Filters;
}

void Filters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refuse_seconds_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Filters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double refuse_seconds = 1 [default = 5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &refuse_seconds_)));
          set_has_refuse_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Filters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double refuse_seconds = 1 [default = 5];
  if (has_refuse_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->refuse_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Filters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double refuse_seconds = 1 [default = 5];
  if (has_refuse_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->refuse_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Filters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double refuse_seconds = 1 [default = 5];
    if (has_refuse_seconds()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Filters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Filters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Filters::MergeFrom(const Filters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refuse_seconds()) {
      set_refuse_seconds(from.refuse_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Filters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filters::CopyFrom(const Filters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filters::IsInitialized() const {

  return true;
}

void Filters::Swap(Filters* other) {
  if (other != this) {
    std::swap(refuse_seconds_, other->refuse_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Filters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filters_descriptor_;
  metadata.reflection = Filters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Environment_Variable::kNameFieldNumber;
const int Environment_Variable::kValueFieldNumber;
#endif  // !_MSC_VER

Environment_Variable::Environment_Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Environment_Variable::InitAsDefaultInstance() {
}

Environment_Variable::Environment_Variable(const Environment_Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Environment_Variable::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Environment_Variable::~Environment_Variable() {
  SharedDtor();
}

void Environment_Variable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Environment_Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environment_Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Environment_Variable_descriptor_;
}

const Environment_Variable& Environment_Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Environment_Variable* Environment_Variable::default_instance_ = NULL;

Environment_Variable* Environment_Variable::New() const {
  return new Environment_Variable;
}

void Environment_Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Environment_Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Environment_Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Environment_Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Environment_Variable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environment_Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Environment_Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Environment_Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Environment_Variable::MergeFrom(const Environment_Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Environment_Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment_Variable::CopyFrom(const Environment_Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment_Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Environment_Variable::Swap(Environment_Variable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Environment_Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Environment_Variable_descriptor_;
  metadata.reflection = Environment_Variable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Environment::kVariablesFieldNumber;
#endif  // !_MSC_VER

Environment::Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Environment::InitAsDefaultInstance() {
}

Environment::Environment(const Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Environment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Environment::~Environment() {
  SharedDtor();
}

void Environment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Environment_descriptor_;
}

const Environment& Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Environment* Environment::default_instance_ = NULL;

Environment* Environment::New() const {
  return new Environment;
}

void Environment::Clear() {
  variables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Environment.Variable variables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_variables;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Environment.Variable variables = 1;
  for (int i = 0; i < this->variables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->variables(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Environment.Variable variables = 1;
  for (int i = 0; i < this->variables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->variables(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Environment::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Environment.Variable variables = 1;
  total_size += 1 * this->variables_size();
  for (int i = 0; i < this->variables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variables(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  variables_.MergeFrom(from.variables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {

  for (int i = 0; i < variables_size(); i++) {
    if (!this->variables(i).IsInitialized()) return false;
  }
  return true;
}

void Environment::Swap(Environment* other) {
  if (other != this) {
    variables_.Swap(&other->variables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Environment_descriptor_;
  metadata.reflection = Environment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameter::kKeyFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !_MSC_VER

Parameter::Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameter::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  SharedDtor();
}

void Parameter::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameter_descriptor_;
}

const Parameter& Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New() const {
  return new Parameter;
}

void Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameter_descriptor_;
  metadata.reflection = Parameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parameters::kParameterFieldNumber;
#endif  // !_MSC_VER

Parameters::Parameters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parameters::InitAsDefaultInstance() {
}

Parameters::Parameters(const Parameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parameters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameters::~Parameters() {
  SharedDtor();
}

void Parameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Parameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parameters_descriptor_;
}

const Parameters& Parameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Parameters* Parameters::default_instance_ = NULL;

Parameters* Parameters::New() const {
  return new Parameters;
}

void Parameters::Clear() {
  parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Parameter parameter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parameter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Parameter parameter = 1;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parameter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parameters::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Parameter parameter = 1;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {

  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void Parameters::Swap(Parameters* other) {
  if (other != this) {
    parameter_.Swap(&other->parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parameters_descriptor_;
  metadata.reflection = Parameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Credential::kPrincipalFieldNumber;
const int Credential::kSecretFieldNumber;
#endif  // !_MSC_VER

Credential::Credential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Credential::InitAsDefaultInstance() {
}

Credential::Credential(const Credential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Credential::SharedCtor() {
  _cached_size_ = 0;
  principal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Credential::~Credential() {
  SharedDtor();
}

void Credential::SharedDtor() {
  if (principal_ != &::google::protobuf::internal::kEmptyString) {
    delete principal_;
  }
  if (secret_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_;
  }
  if (this != default_instance_) {
  }
}

void Credential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Credential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Credential_descriptor_;
}

const Credential& Credential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Credential* Credential::default_instance_ = NULL;

Credential* Credential::New() const {
  return new Credential;
}

void Credential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_principal()) {
      if (principal_ != &::google::protobuf::internal::kEmptyString) {
        principal_->clear();
      }
    }
    if (has_secret()) {
      if (secret_ != &::google::protobuf::internal::kEmptyString) {
        secret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Credential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string principal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->principal().data(), this->principal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secret;
        break;
      }

      // optional string secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secret().data(), this->secret().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Credential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string principal = 1;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->principal(), output);
  }

  // optional string secret = 2;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Credential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string principal = 1;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->principal(), target);
  }

  // optional string secret = 2;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Credential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string principal = 1;
    if (has_principal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->principal());
    }

    // optional string secret = 2;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Credential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Credential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Credential::MergeFrom(const Credential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_principal()) {
      set_principal(from.principal());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Credential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credential::CopyFrom(const Credential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credential::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Credential::Swap(Credential* other) {
  if (other != this) {
    std::swap(principal_, other->principal_);
    std::swap(secret_, other->secret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Credential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Credential_descriptor_;
  metadata.reflection = Credential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Credentials::kCredentialsFieldNumber;
#endif  // !_MSC_VER

Credentials::Credentials()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Credentials::InitAsDefaultInstance() {
}

Credentials::Credentials(const Credentials& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Credentials::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Credentials::~Credentials() {
  SharedDtor();
}

void Credentials::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Credentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Credentials::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Credentials_descriptor_;
}

const Credentials& Credentials::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Credentials* Credentials::default_instance_ = NULL;

Credentials* Credentials::New() const {
  return new Credentials;
}

void Credentials::Clear() {
  credentials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Credentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Credential credentials = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_credentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_credentials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Credentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Credential credentials = 1;
  for (int i = 0; i < this->credentials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->credentials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Credentials::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Credential credentials = 1;
  for (int i = 0; i < this->credentials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->credentials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Credentials::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Credential credentials = 1;
  total_size += 1 * this->credentials_size();
  for (int i = 0; i < this->credentials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->credentials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credentials::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Credentials* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Credentials*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Credentials::MergeFrom(const Credentials& from) {
  GOOGLE_CHECK_NE(&from, this);
  credentials_.MergeFrom(from.credentials_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Credentials::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credentials::CopyFrom(const Credentials& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credentials::IsInitialized() const {

  for (int i = 0; i < credentials_size(); i++) {
    if (!this->credentials(i).IsInitialized()) return false;
  }
  return true;
}

void Credentials::Swap(Credentials* other) {
  if (other != this) {
    credentials_.Swap(&other->credentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Credentials::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Credentials_descriptor_;
  metadata.reflection = Credentials_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RateLimit::kQpsFieldNumber;
const int RateLimit::kPrincipalFieldNumber;
const int RateLimit::kCapacityFieldNumber;
#endif  // !_MSC_VER

RateLimit::RateLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RateLimit::InitAsDefaultInstance() {
}

RateLimit::RateLimit(const RateLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RateLimit::SharedCtor() {
  _cached_size_ = 0;
  qps_ = 0;
  principal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  capacity_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RateLimit::~RateLimit() {
  SharedDtor();
}

void RateLimit::SharedDtor() {
  if (principal_ != &::google::protobuf::internal::kEmptyString) {
    delete principal_;
  }
  if (this != default_instance_) {
  }
}

void RateLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateLimit_descriptor_;
}

const RateLimit& RateLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

RateLimit* RateLimit::default_instance_ = NULL;

RateLimit* RateLimit::New() const {
  return new RateLimit;
}

void RateLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    qps_ = 0;
    if (has_principal()) {
      if (principal_ != &::google::protobuf::internal::kEmptyString) {
        principal_->clear();
      }
    }
    capacity_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RateLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double qps = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qps_)));
          set_has_qps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_principal;
        break;
      }

      // required string principal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_principal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_principal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->principal().data(), this->principal().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_capacity;
        break;
      }

      // optional uint64 capacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RateLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double qps = 1;
  if (has_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qps(), output);
  }

  // required string principal = 2;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->principal(), output);
  }

  // optional uint64 capacity = 3;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RateLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double qps = 1;
  if (has_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->qps(), target);
  }

  // required string principal = 2;
  if (has_principal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->principal().data(), this->principal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->principal(), target);
  }

  // optional uint64 capacity = 3;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RateLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double qps = 1;
    if (has_qps()) {
      total_size += 1 + 8;
    }

    // required string principal = 2;
    if (has_principal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->principal());
    }

    // optional uint64 capacity = 3;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capacity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RateLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RateLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RateLimit::MergeFrom(const RateLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qps()) {
      set_qps(from.qps());
    }
    if (from.has_principal()) {
      set_principal(from.principal());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RateLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimit::CopyFrom(const RateLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RateLimit::Swap(RateLimit* other) {
  if (other != this) {
    std::swap(qps_, other->qps_);
    std::swap(principal_, other->principal_);
    std::swap(capacity_, other->capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RateLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RateLimit_descriptor_;
  metadata.reflection = RateLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RateLimits::kLimitsFieldNumber;
const int RateLimits::kAggregateDefaultQpsFieldNumber;
const int RateLimits::kAggregateDefaultCapacityFieldNumber;
#endif  // !_MSC_VER

RateLimits::RateLimits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RateLimits::InitAsDefaultInstance() {
}

RateLimits::RateLimits(const RateLimits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RateLimits::SharedCtor() {
  _cached_size_ = 0;
  aggregate_default_qps_ = 0;
  aggregate_default_capacity_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RateLimits::~RateLimits() {
  SharedDtor();
}

void RateLimits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RateLimits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateLimits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateLimits_descriptor_;
}

const RateLimits& RateLimits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

RateLimits* RateLimits::default_instance_ = NULL;

RateLimits* RateLimits::New() const {
  return new RateLimits;
}

void RateLimits::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    aggregate_default_qps_ = 0;
    aggregate_default_capacity_ = GOOGLE_ULONGLONG(0);
  }
  limits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RateLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.RateLimit limits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_limits;
        if (input->ExpectTag(17)) goto parse_aggregate_default_qps;
        break;
      }

      // optional double aggregate_default_qps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_aggregate_default_qps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aggregate_default_qps_)));
          set_has_aggregate_default_qps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aggregate_default_capacity;
        break;
      }

      // optional uint64 aggregate_default_capacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggregate_default_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &aggregate_default_capacity_)));
          set_has_aggregate_default_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RateLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.RateLimit limits = 1;
  for (int i = 0; i < this->limits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->limits(i), output);
  }

  // optional double aggregate_default_qps = 2;
  if (has_aggregate_default_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->aggregate_default_qps(), output);
  }

  // optional uint64 aggregate_default_capacity = 3;
  if (has_aggregate_default_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->aggregate_default_capacity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RateLimits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.RateLimit limits = 1;
  for (int i = 0; i < this->limits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->limits(i), target);
  }

  // optional double aggregate_default_qps = 2;
  if (has_aggregate_default_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->aggregate_default_qps(), target);
  }

  // optional uint64 aggregate_default_capacity = 3;
  if (has_aggregate_default_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->aggregate_default_capacity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RateLimits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double aggregate_default_qps = 2;
    if (has_aggregate_default_qps()) {
      total_size += 1 + 8;
    }

    // optional uint64 aggregate_default_capacity = 3;
    if (has_aggregate_default_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->aggregate_default_capacity());
    }

  }
  // repeated .mesos.v1.RateLimit limits = 1;
  total_size += 1 * this->limits_size();
  for (int i = 0; i < this->limits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateLimits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RateLimits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RateLimits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RateLimits::MergeFrom(const RateLimits& from) {
  GOOGLE_CHECK_NE(&from, this);
  limits_.MergeFrom(from.limits_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_aggregate_default_qps()) {
      set_aggregate_default_qps(from.aggregate_default_qps());
    }
    if (from.has_aggregate_default_capacity()) {
      set_aggregate_default_capacity(from.aggregate_default_capacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RateLimits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimits::CopyFrom(const RateLimits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimits::IsInitialized() const {

  for (int i = 0; i < limits_size(); i++) {
    if (!this->limits(i).IsInitialized()) return false;
  }
  return true;
}

void RateLimits::Swap(RateLimits* other) {
  if (other != this) {
    limits_.Swap(&other->limits_);
    std::swap(aggregate_default_qps_, other->aggregate_default_qps_);
    std::swap(aggregate_default_capacity_, other->aggregate_default_capacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RateLimits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RateLimits_descriptor_;
  metadata.reflection = RateLimits_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Image_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Type_descriptor_;
}
bool Image_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Image_Type Image::APPC;
const Image_Type Image::Type_MIN;
const Image_Type Image::Type_MAX;
const int Image::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Image_AppC::kNameFieldNumber;
const int Image_AppC::kIdFieldNumber;
const int Image_AppC::kLabelsFieldNumber;
#endif  // !_MSC_VER

Image_AppC::Image_AppC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image_AppC::InitAsDefaultInstance() {
  labels_ = const_cast< ::mesos::v1::Labels*>(&::mesos::v1::Labels::default_instance());
}

Image_AppC::Image_AppC(const Image_AppC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image_AppC::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  labels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image_AppC::~Image_AppC() {
  SharedDtor();
}

void Image_AppC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete labels_;
  }
}

void Image_AppC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image_AppC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_AppC_descriptor_;
}

const Image_AppC& Image_AppC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Image_AppC* Image_AppC::default_instance_ = NULL;

Image_AppC* Image_AppC::New() const {
  return new Image_AppC;
}

void Image_AppC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_labels()) {
      if (labels_ != NULL) labels_->::mesos::v1::Labels::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image_AppC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // required string id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // optional .mesos.v1.Labels labels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image_AppC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->id(), output);
  }

  // optional .mesos.v1.Labels labels = 3;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image_AppC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional .mesos.v1.Labels labels = 3;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->labels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image_AppC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .mesos.v1.Labels labels = 3;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image_AppC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image_AppC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image_AppC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image_AppC::MergeFrom(const Image_AppC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_labels()) {
      mutable_labels()->::mesos::v1::Labels::MergeFrom(from.labels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image_AppC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image_AppC::CopyFrom(const Image_AppC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image_AppC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_labels()) {
    if (!this->labels().IsInitialized()) return false;
  }
  return true;
}

void Image_AppC::Swap(Image_AppC* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(labels_, other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image_AppC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_AppC_descriptor_;
  metadata.reflection = Image_AppC_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Image::kTypeFieldNumber;
const int Image::kAppcFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
  appc_ = const_cast< ::mesos::v1::Image_AppC*>(&::mesos::v1::Image_AppC::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  appc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (this != default_instance_) {
    delete appc_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_appc()) {
      if (appc_ != NULL) appc_->::mesos::v1::Image_AppC::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.Image.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Image_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::Image_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appc;
        break;
      }

      // optional .mesos.v1.Image.AppC appc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.Image.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.v1.Image.AppC appc = 2;
  if (has_appc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->appc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.Image.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.v1.Image.AppC appc = 2;
  if (has_appc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->appc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.Image.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.Image.AppC appc = 2;
    if (has_appc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_appc()) {
      mutable_appc()->::mesos::v1::Image_AppC::MergeFrom(from.appc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_appc()) {
    if (!this->appc().IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(appc_, other->appc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Volume_Mode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Volume_Mode_descriptor_;
}
bool Volume_Mode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Volume_Mode Volume::RW;
const Volume_Mode Volume::RO;
const Volume_Mode Volume::Mode_MIN;
const Volume_Mode Volume::Mode_MAX;
const int Volume::Mode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Volume::kModeFieldNumber;
const int Volume::kContainerPathFieldNumber;
const int Volume::kHostPathFieldNumber;
const int Volume::kImageFieldNumber;
#endif  // !_MSC_VER

Volume::Volume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Volume::InitAsDefaultInstance() {
  image_ = const_cast< ::mesos::v1::Image*>(&::mesos::v1::Image::default_instance());
}

Volume::Volume(const Volume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Volume::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  container_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Volume::~Volume() {
  SharedDtor();
}

void Volume::SharedDtor() {
  if (container_path_ != &::google::protobuf::internal::kEmptyString) {
    delete container_path_;
  }
  if (host_path_ != &::google::protobuf::internal::kEmptyString) {
    delete host_path_;
  }
  if (this != default_instance_) {
    delete image_;
  }
}

void Volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Volume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Volume_descriptor_;
}

const Volume& Volume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Volume* Volume::default_instance_ = NULL;

Volume* Volume::New() const {
  return new Volume;
}

void Volume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 1;
    if (has_container_path()) {
      if (container_path_ != &::google::protobuf::internal::kEmptyString) {
        container_path_->clear();
      }
    }
    if (has_host_path()) {
      if (host_path_ != &::google::protobuf::internal::kEmptyString) {
        host_path_->clear();
      }
    }
    if (has_image()) {
      if (image_ != NULL) image_->::mesos::v1::Image::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string container_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container_path().data(), this->container_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host_path;
        break;
      }

      // optional string host_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_path().data(), this->host_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required .mesos.v1.Volume.Mode mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::Volume_Mode_IsValid(value)) {
            set_mode(static_cast< ::mesos::v1::Volume_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // optional .mesos.v1.Image image = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string container_path = 1;
  if (has_container_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_path().data(), this->container_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->container_path(), output);
  }

  // optional string host_path = 2;
  if (has_host_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_path().data(), this->host_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host_path(), output);
  }

  // required .mesos.v1.Volume.Mode mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // optional .mesos.v1.Image image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Volume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string container_path = 1;
  if (has_container_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container_path().data(), this->container_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->container_path(), target);
  }

  // optional string host_path = 2;
  if (has_host_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_path().data(), this->host_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_path(), target);
  }

  // required .mesos.v1.Volume.Mode mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // optional .mesos.v1.Image image = 4;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Volume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.Volume.Mode mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required string container_path = 1;
    if (has_container_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container_path());
    }

    // optional string host_path = 2;
    if (has_host_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_path());
    }

    // optional .mesos.v1.Image image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Volume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Volume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Volume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_container_path()) {
      set_container_path(from.container_path());
    }
    if (from.has_host_path()) {
      set_host_path(from.host_path());
    }
    if (from.has_image()) {
      mutable_image()->::mesos::v1::Image::MergeFrom(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Volume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  return true;
}

void Volume::Swap(Volume* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(container_path_, other->container_path_);
    std::swap(host_path_, other->host_path_);
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Volume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Volume_descriptor_;
  metadata.reflection = Volume_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ContainerInfo_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_Type_descriptor_;
}
bool ContainerInfo_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ContainerInfo_Type ContainerInfo::DOCKER;
const ContainerInfo_Type ContainerInfo::MESOS;
const ContainerInfo_Type ContainerInfo::Type_MIN;
const ContainerInfo_Type ContainerInfo::Type_MAX;
const int ContainerInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ContainerInfo_DockerInfo_Network_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_DockerInfo_Network_descriptor_;
}
bool ContainerInfo_DockerInfo_Network_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo::HOST;
const ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo::BRIDGE;
const ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo::NONE;
const ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo::Network_MIN;
const ContainerInfo_DockerInfo_Network ContainerInfo_DockerInfo::Network_MAX;
const int ContainerInfo_DockerInfo::Network_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ContainerInfo_DockerInfo_PortMapping::kHostPortFieldNumber;
const int ContainerInfo_DockerInfo_PortMapping::kContainerPortFieldNumber;
const int ContainerInfo_DockerInfo_PortMapping::kProtocolFieldNumber;
#endif  // !_MSC_VER

ContainerInfo_DockerInfo_PortMapping::ContainerInfo_DockerInfo_PortMapping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInfo_DockerInfo_PortMapping::InitAsDefaultInstance() {
}

ContainerInfo_DockerInfo_PortMapping::ContainerInfo_DockerInfo_PortMapping(const ContainerInfo_DockerInfo_PortMapping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInfo_DockerInfo_PortMapping::SharedCtor() {
  _cached_size_ = 0;
  host_port_ = 0u;
  container_port_ = 0u;
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInfo_DockerInfo_PortMapping::~ContainerInfo_DockerInfo_PortMapping() {
  SharedDtor();
}

void ContainerInfo_DockerInfo_PortMapping::SharedDtor() {
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

void ContainerInfo_DockerInfo_PortMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo_DockerInfo_PortMapping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_DockerInfo_PortMapping_descriptor_;
}

const ContainerInfo_DockerInfo_PortMapping& ContainerInfo_DockerInfo_PortMapping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ContainerInfo_DockerInfo_PortMapping* ContainerInfo_DockerInfo_PortMapping::default_instance_ = NULL;

ContainerInfo_DockerInfo_PortMapping* ContainerInfo_DockerInfo_PortMapping::New() const {
  return new ContainerInfo_DockerInfo_PortMapping;
}

void ContainerInfo_DockerInfo_PortMapping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    host_port_ = 0u;
    container_port_ = 0u;
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInfo_DockerInfo_PortMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 host_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_port_)));
          set_has_host_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container_port;
        break;
      }

      // required uint32 container_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &container_port_)));
          set_has_container_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInfo_DockerInfo_PortMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 host_port = 1;
  if (has_host_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->host_port(), output);
  }

  // required uint32 container_port = 2;
  if (has_container_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->container_port(), output);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protocol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInfo_DockerInfo_PortMapping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 host_port = 1;
  if (has_host_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->host_port(), target);
  }

  // required uint32 container_port = 2;
  if (has_container_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->container_port(), target);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInfo_DockerInfo_PortMapping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 host_port = 1;
    if (has_host_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_port());
    }

    // required uint32 container_port = 2;
    if (has_container_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->container_port());
    }

    // optional string protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo_DockerInfo_PortMapping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInfo_DockerInfo_PortMapping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInfo_DockerInfo_PortMapping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInfo_DockerInfo_PortMapping::MergeFrom(const ContainerInfo_DockerInfo_PortMapping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_port()) {
      set_host_port(from.host_port());
    }
    if (from.has_container_port()) {
      set_container_port(from.container_port());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInfo_DockerInfo_PortMapping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo_DockerInfo_PortMapping::CopyFrom(const ContainerInfo_DockerInfo_PortMapping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo_DockerInfo_PortMapping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContainerInfo_DockerInfo_PortMapping::Swap(ContainerInfo_DockerInfo_PortMapping* other) {
  if (other != this) {
    std::swap(host_port_, other->host_port_);
    std::swap(container_port_, other->container_port_);
    std::swap(protocol_, other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInfo_DockerInfo_PortMapping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInfo_DockerInfo_PortMapping_descriptor_;
  metadata.reflection = ContainerInfo_DockerInfo_PortMapping_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContainerInfo_DockerInfo::kImageFieldNumber;
const int ContainerInfo_DockerInfo::kNetworkFieldNumber;
const int ContainerInfo_DockerInfo::kPortMappingsFieldNumber;
const int ContainerInfo_DockerInfo::kPrivilegedFieldNumber;
const int ContainerInfo_DockerInfo::kParametersFieldNumber;
const int ContainerInfo_DockerInfo::kForcePullImageFieldNumber;
#endif  // !_MSC_VER

ContainerInfo_DockerInfo::ContainerInfo_DockerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInfo_DockerInfo::InitAsDefaultInstance() {
}

ContainerInfo_DockerInfo::ContainerInfo_DockerInfo(const ContainerInfo_DockerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInfo_DockerInfo::SharedCtor() {
  _cached_size_ = 0;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = 1;
  privileged_ = false;
  force_pull_image_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInfo_DockerInfo::~ContainerInfo_DockerInfo() {
  SharedDtor();
}

void ContainerInfo_DockerInfo::SharedDtor() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void ContainerInfo_DockerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo_DockerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_DockerInfo_descriptor_;
}

const ContainerInfo_DockerInfo& ContainerInfo_DockerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ContainerInfo_DockerInfo* ContainerInfo_DockerInfo::default_instance_ = NULL;

ContainerInfo_DockerInfo* ContainerInfo_DockerInfo::New() const {
  return new ContainerInfo_DockerInfo;
}

void ContainerInfo_DockerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
    network_ = 1;
    privileged_ = false;
    force_pull_image_ = false;
  }
  port_mappings_.Clear();
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInfo_DockerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_network;
        break;
      }

      // optional .mesos.v1.ContainerInfo.DockerInfo.Network network = 2 [default = HOST];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::ContainerInfo_DockerInfo_Network_IsValid(value)) {
            set_network(static_cast< ::mesos::v1::ContainerInfo_DockerInfo_Network >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port_mappings;
        break;
      }

      // repeated .mesos.v1.ContainerInfo.DockerInfo.PortMapping port_mappings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port_mappings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_port_mappings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port_mappings;
        if (input->ExpectTag(32)) goto parse_privileged;
        break;
      }

      // optional bool privileged = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privileged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privileged_)));
          set_has_privileged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameters;
        break;
      }

      // repeated .mesos.v1.Parameter parameters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameters;
        if (input->ExpectTag(48)) goto parse_force_pull_image;
        break;
      }

      // optional bool force_pull_image = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force_pull_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_pull_image_)));
          set_has_force_pull_image();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInfo_DockerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->image(), output);
  }

  // optional .mesos.v1.ContainerInfo.DockerInfo.Network network = 2 [default = HOST];
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->network(), output);
  }

  // repeated .mesos.v1.ContainerInfo.DockerInfo.PortMapping port_mappings = 3;
  for (int i = 0; i < this->port_mappings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->port_mappings(i), output);
  }

  // optional bool privileged = 4 [default = false];
  if (has_privileged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->privileged(), output);
  }

  // repeated .mesos.v1.Parameter parameters = 5;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parameters(i), output);
  }

  // optional bool force_pull_image = 6;
  if (has_force_pull_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->force_pull_image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInfo_DockerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->image(), target);
  }

  // optional .mesos.v1.ContainerInfo.DockerInfo.Network network = 2 [default = HOST];
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->network(), target);
  }

  // repeated .mesos.v1.ContainerInfo.DockerInfo.PortMapping port_mappings = 3;
  for (int i = 0; i < this->port_mappings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->port_mappings(i), target);
  }

  // optional bool privileged = 4 [default = false];
  if (has_privileged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->privileged(), target);
  }

  // repeated .mesos.v1.Parameter parameters = 5;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parameters(i), target);
  }

  // optional bool force_pull_image = 6;
  if (has_force_pull_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->force_pull_image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInfo_DockerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional .mesos.v1.ContainerInfo.DockerInfo.Network network = 2 [default = HOST];
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->network());
    }

    // optional bool privileged = 4 [default = false];
    if (has_privileged()) {
      total_size += 1 + 1;
    }

    // optional bool force_pull_image = 6;
    if (has_force_pull_image()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mesos.v1.ContainerInfo.DockerInfo.PortMapping port_mappings = 3;
  total_size += 1 * this->port_mappings_size();
  for (int i = 0; i < this->port_mappings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->port_mappings(i));
  }

  // repeated .mesos.v1.Parameter parameters = 5;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo_DockerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInfo_DockerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInfo_DockerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInfo_DockerInfo::MergeFrom(const ContainerInfo_DockerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_mappings_.MergeFrom(from.port_mappings_);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_privileged()) {
      set_privileged(from.privileged());
    }
    if (from.has_force_pull_image()) {
      set_force_pull_image(from.force_pull_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInfo_DockerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo_DockerInfo::CopyFrom(const ContainerInfo_DockerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo_DockerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < port_mappings_size(); i++) {
    if (!this->port_mappings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < parameters_size(); i++) {
    if (!this->parameters(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerInfo_DockerInfo::Swap(ContainerInfo_DockerInfo* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(network_, other->network_);
    port_mappings_.Swap(&other->port_mappings_);
    std::swap(privileged_, other->privileged_);
    parameters_.Swap(&other->parameters_);
    std::swap(force_pull_image_, other->force_pull_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInfo_DockerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInfo_DockerInfo_descriptor_;
  metadata.reflection = ContainerInfo_DockerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContainerInfo_MesosInfo::kImageFieldNumber;
#endif  // !_MSC_VER

ContainerInfo_MesosInfo::ContainerInfo_MesosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInfo_MesosInfo::InitAsDefaultInstance() {
  image_ = const_cast< ::mesos::v1::Image*>(&::mesos::v1::Image::default_instance());
}

ContainerInfo_MesosInfo::ContainerInfo_MesosInfo(const ContainerInfo_MesosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInfo_MesosInfo::SharedCtor() {
  _cached_size_ = 0;
  image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInfo_MesosInfo::~ContainerInfo_MesosInfo() {
  SharedDtor();
}

void ContainerInfo_MesosInfo::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
  }
}

void ContainerInfo_MesosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo_MesosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_MesosInfo_descriptor_;
}

const ContainerInfo_MesosInfo& ContainerInfo_MesosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ContainerInfo_MesosInfo* ContainerInfo_MesosInfo::default_instance_ = NULL;

ContainerInfo_MesosInfo* ContainerInfo_MesosInfo::New() const {
  return new ContainerInfo_MesosInfo;
}

void ContainerInfo_MesosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_image()) {
      if (image_ != NULL) image_->::mesos::v1::Image::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInfo_MesosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.v1.Image image = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInfo_MesosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.v1.Image image = 1;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->image(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInfo_MesosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.v1.Image image = 1;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->image(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInfo_MesosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.v1.Image image = 1;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo_MesosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInfo_MesosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInfo_MesosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInfo_MesosInfo::MergeFrom(const ContainerInfo_MesosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_image()) {
      mutable_image()->::mesos::v1::Image::MergeFrom(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInfo_MesosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo_MesosInfo::CopyFrom(const ContainerInfo_MesosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo_MesosInfo::IsInitialized() const {

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  return true;
}

void ContainerInfo_MesosInfo::Swap(ContainerInfo_MesosInfo* other) {
  if (other != this) {
    std::swap(image_, other->image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInfo_MesosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInfo_MesosInfo_descriptor_;
  metadata.reflection = ContainerInfo_MesosInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ContainerInfo::kTypeFieldNumber;
const int ContainerInfo::kVolumesFieldNumber;
const int ContainerInfo::kHostnameFieldNumber;
const int ContainerInfo::kDockerFieldNumber;
const int ContainerInfo::kMesosFieldNumber;
#endif  // !_MSC_VER

ContainerInfo::ContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInfo::InitAsDefaultInstance() {
  docker_ = const_cast< ::mesos::v1::ContainerInfo_DockerInfo*>(&::mesos::v1::ContainerInfo_DockerInfo::default_instance());
  mesos_ = const_cast< ::mesos::v1::ContainerInfo_MesosInfo*>(&::mesos::v1::ContainerInfo_MesosInfo::default_instance());
}

ContainerInfo::ContainerInfo(const ContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  docker_ = NULL;
  mesos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInfo::~ContainerInfo() {
  SharedDtor();
}

void ContainerInfo::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete docker_;
    delete mesos_;
  }
}

void ContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_descriptor_;
}

const ContainerInfo& ContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

ContainerInfo* ContainerInfo::default_instance_ = NULL;

ContainerInfo* ContainerInfo::New() const {
  return new ContainerInfo;
}

void ContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_docker()) {
      if (docker_ != NULL) docker_->::mesos::v1::ContainerInfo_DockerInfo::Clear();
    }
    if (has_mesos()) {
      if (mesos_ != NULL) mesos_->::mesos::v1::ContainerInfo_MesosInfo::Clear();
    }
  }
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.ContainerInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::ContainerInfo_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::ContainerInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        break;
      }

      // repeated .mesos.v1.Volume volumes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        if (input->ExpectTag(26)) goto parse_docker;
        break;
      }

      // optional .mesos.v1.ContainerInfo.DockerInfo docker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mesos;
        break;
      }

      // optional .mesos.v1.ContainerInfo.MesosInfo mesos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mesos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mesos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.ContainerInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .mesos.v1.Volume volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->volumes(i), output);
  }

  // optional .mesos.v1.ContainerInfo.DockerInfo docker = 3;
  if (has_docker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->docker(), output);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }

  // optional .mesos.v1.ContainerInfo.MesosInfo mesos = 5;
  if (has_mesos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mesos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.ContainerInfo.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .mesos.v1.Volume volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->volumes(i), target);
  }

  // optional .mesos.v1.ContainerInfo.DockerInfo docker = 3;
  if (has_docker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->docker(), target);
  }

  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional .mesos.v1.ContainerInfo.MesosInfo mesos = 5;
  if (has_mesos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mesos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.ContainerInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional .mesos.v1.ContainerInfo.DockerInfo docker = 3;
    if (has_docker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docker());
    }

    // optional .mesos.v1.ContainerInfo.MesosInfo mesos = 5;
    if (has_mesos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesos());
    }

  }
  // repeated .mesos.v1.Volume volumes = 2;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInfo::MergeFrom(const ContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_docker()) {
      mutable_docker()->::mesos::v1::ContainerInfo_DockerInfo::MergeFrom(from.docker());
    }
    if (from.has_mesos()) {
      mutable_mesos()->::mesos::v1::ContainerInfo_MesosInfo::MergeFrom(from.mesos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo::CopyFrom(const ContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < volumes_size(); i++) {
    if (!this->volumes(i).IsInitialized()) return false;
  }
  if (has_docker()) {
    if (!this->docker().IsInitialized()) return false;
  }
  if (has_mesos()) {
    if (!this->mesos().IsInitialized()) return false;
  }
  return true;
}

void ContainerInfo::Swap(ContainerInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    volumes_.Swap(&other->volumes_);
    std::swap(hostname_, other->hostname_);
    std::swap(docker_, other->docker_);
    std::swap(mesos_, other->mesos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInfo_descriptor_;
  metadata.reflection = ContainerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Labels::kLabelsFieldNumber;
#endif  // !_MSC_VER

Labels::Labels()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Labels::InitAsDefaultInstance() {
}

Labels::Labels(const Labels& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Labels::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Labels::~Labels() {
  SharedDtor();
}

void Labels::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Labels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Labels::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Labels_descriptor_;
}

const Labels& Labels::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Labels* Labels::default_instance_ = NULL;

Labels* Labels::New() const {
  return new Labels;
}

void Labels::Clear() {
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Labels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Label labels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Labels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Label labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Labels::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Label labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Labels::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Label labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Labels::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Labels* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Labels*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Labels::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {

  for (int i = 0; i < labels_size(); i++) {
    if (!this->labels(i).IsInitialized()) return false;
  }
  return true;
}

void Labels::Swap(Labels* other) {
  if (other != this) {
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Labels::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Labels_descriptor_;
  metadata.reflection = Labels_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Label::kKeyFieldNumber;
const int Label::kValueFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Label::InitAsDefaultInstance() {
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Label::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  SharedDtor();
}

void Label::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Port::kNumberFieldNumber;
const int Port::kNameFieldNumber;
const int Port::kProtocolFieldNumber;
#endif  // !_MSC_VER

Port::Port()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Port::InitAsDefaultInstance() {
}

Port::Port(const Port& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Port::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Port::~Port() {
  SharedDtor();
}

void Port::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (protocol_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_;
  }
  if (this != default_instance_) {
  }
}

void Port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Port_descriptor_;
}

const Port& Port::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Port* Port::default_instance_ = NULL;

Port* Port::New() const {
  return new Port;
}

void Port::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_protocol()) {
      if (protocol_ != &::google::protobuf::internal::kEmptyString) {
        protocol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->number(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protocol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Port::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->number(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string protocol = 3;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protocol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Port::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string protocol = 3;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Port::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Port* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Port*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Port::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Port::Swap(Port* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(name_, other->name_);
    std::swap(protocol_, other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Port_descriptor_;
  metadata.reflection = Port_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ports::kPortsFieldNumber;
#endif  // !_MSC_VER

Ports::Ports()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ports::InitAsDefaultInstance() {
}

Ports::Ports(const Ports& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ports::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ports::~Ports() {
  SharedDtor();
}

void Ports::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ports::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ports_descriptor_;
}

const Ports& Ports::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

Ports* Ports::default_instance_ = NULL;

Ports* Ports::New() const {
  return new Ports;
}

void Ports::Clear() {
  ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.Port ports = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.Port ports = 1;
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ports::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.Port ports = 1;
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ports::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.Port ports = 1;
  total_size += 1 * this->ports_size();
  for (int i = 0; i < this->ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ports::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ports* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ports*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ports::MergeFrom(const Ports& from) {
  GOOGLE_CHECK_NE(&from, this);
  ports_.MergeFrom(from.ports_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ports::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ports::CopyFrom(const Ports& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ports::IsInitialized() const {

  for (int i = 0; i < ports_size(); i++) {
    if (!this->ports(i).IsInitialized()) return false;
  }
  return true;
}

void Ports::Swap(Ports* other) {
  if (other != this) {
    ports_.Swap(&other->ports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ports::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ports_descriptor_;
  metadata.reflection = Ports_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DiscoveryInfo_Visibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryInfo_Visibility_descriptor_;
}
bool DiscoveryInfo_Visibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DiscoveryInfo_Visibility DiscoveryInfo::FRAMEWORK;
const DiscoveryInfo_Visibility DiscoveryInfo::CLUSTER;
const DiscoveryInfo_Visibility DiscoveryInfo::EXTERNAL;
const DiscoveryInfo_Visibility DiscoveryInfo::Visibility_MIN;
const DiscoveryInfo_Visibility DiscoveryInfo::Visibility_MAX;
const int DiscoveryInfo::Visibility_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DiscoveryInfo::kVisibilityFieldNumber;
const int DiscoveryInfo::kNameFieldNumber;
const int DiscoveryInfo::kEnvironmentFieldNumber;
const int DiscoveryInfo::kLocationFieldNumber;
const int DiscoveryInfo::kVersionFieldNumber;
const int DiscoveryInfo::kPortsFieldNumber;
const int DiscoveryInfo::kLabelsFieldNumber;
#endif  // !_MSC_VER

DiscoveryInfo::DiscoveryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscoveryInfo::InitAsDefaultInstance() {
  ports_ = const_cast< ::mesos::v1::Ports*>(&::mesos::v1::Ports::default_instance());
  labels_ = const_cast< ::mesos::v1::Labels*>(&::mesos::v1::Labels::default_instance());
}

DiscoveryInfo::DiscoveryInfo(const DiscoveryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscoveryInfo::SharedCtor() {
  _cached_size_ = 0;
  visibility_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  environment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ports_ = NULL;
  labels_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscoveryInfo::~DiscoveryInfo() {
  SharedDtor();
}

void DiscoveryInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (environment_ != &::google::protobuf::internal::kEmptyString) {
    delete environment_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete ports_;
    delete labels_;
  }
}

void DiscoveryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscoveryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscoveryInfo_descriptor_;
}

const DiscoveryInfo& DiscoveryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  return *default_instance_;
}

DiscoveryInfo* DiscoveryInfo::default_instance_ = NULL;

DiscoveryInfo* DiscoveryInfo::New() const {
  return new DiscoveryInfo;
}

void DiscoveryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    visibility_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_environment()) {
      if (environment_ != &::google::protobuf::internal::kEmptyString) {
        environment_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_ports()) {
      if (ports_ != NULL) ports_->::mesos::v1::Ports::Clear();
    }
    if (has_labels()) {
      if (labels_ != NULL) labels_->::mesos::v1::Labels::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscoveryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.DiscoveryInfo.Visibility visibility = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::DiscoveryInfo_Visibility_IsValid(value)) {
            set_visibility(static_cast< ::mesos::v1::DiscoveryInfo_Visibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_environment;
        break;
      }

      // optional string environment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_environment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->environment().data(), this->environment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional string location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ports;
        break;
      }

      // optional .mesos.v1.Ports ports = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_labels;
        break;
      }

      // optional .mesos.v1.Labels labels = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_labels()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscoveryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.DiscoveryInfo.Visibility visibility = 1;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->visibility(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string environment = 3;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->environment().data(), this->environment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->environment(), output);
  }

  // optional string location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->location(), output);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }

  // optional .mesos.v1.Ports ports = 6;
  if (has_ports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->ports(), output);
  }

  // optional .mesos.v1.Labels labels = 7;
  if (has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->labels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscoveryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.DiscoveryInfo.Visibility visibility = 1;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->visibility(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string environment = 3;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->environment().data(), this->environment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->environment(), target);
  }

  // optional string location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional .mesos.v1.Ports ports = 6;
  if (has_ports()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->ports(), target);
  }

  // optional .mesos.v1.Labels labels = 7;
  if (has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->labels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscoveryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.DiscoveryInfo.Visibility visibility = 1;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string environment = 3;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->environment());
    }

    // optional string location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .mesos.v1.Ports ports = 6;
    if (has_ports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ports());
    }

    // optional .mesos.v1.Labels labels = 7;
    if (has_labels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscoveryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscoveryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscoveryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscoveryInfo::MergeFrom(const DiscoveryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visibility()) {
      set_visibility(from.visibility());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_environment()) {
      set_environment(from.environment());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ports()) {
      mutable_ports()->::mesos::v1::Ports::MergeFrom(from.ports());
    }
    if (from.has_labels()) {
      mutable_labels()->::mesos::v1::Labels::MergeFrom(from.labels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscoveryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscoveryInfo::CopyFrom(const DiscoveryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ports()) {
    if (!this->ports().IsInitialized()) return false;
  }
  if (has_labels()) {
    if (!this->labels().IsInitialized()) return false;
  }
  return true;
}

void DiscoveryInfo::Swap(DiscoveryInfo* other) {
  if (other != this) {
    std::swap(visibility_, other->visibility_);
    std::swap(name_, other->name_);
    std::swap(environment_, other->environment_);
    std::swap(location_, other->location_);
    std::swap(version_, other->version_);
    std::swap(ports_, other->ports_);
    std::swap(labels_, other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscoveryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscoveryInfo_descriptor_;
  metadata.reflection = DiscoveryInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
