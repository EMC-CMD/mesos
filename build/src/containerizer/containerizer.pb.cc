// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/containerizer/containerizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos/containerizer/containerizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace containerizer {

namespace {

const ::google::protobuf::Descriptor* Launch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Launch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Wait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Wait_reflection_ = NULL;
const ::google::protobuf::Descriptor* Destroy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Destroy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Usage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Usage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Termination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Termination_reflection_ = NULL;
const ::google::protobuf::Descriptor* Containers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Containers_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto() {
  protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos/containerizer/containerizer.proto");
  GOOGLE_CHECK(file != NULL);
  Launch_descriptor_ = file->message_type(0);
  static const int Launch_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, executor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, slave_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, checkpoint_),
  };
  Launch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Launch_descriptor_,
      Launch::default_instance_,
      Launch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Launch));
  Update_descriptor_ = file->message_type(1);
  static const int Update_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, resources_),
  };
  Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Update_descriptor_,
      Update::default_instance_,
      Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Update));
  Wait_descriptor_ = file->message_type(2);
  static const int Wait_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wait, container_id_),
  };
  Wait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Wait_descriptor_,
      Wait::default_instance_,
      Wait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Wait));
  Destroy_descriptor_ = file->message_type(3);
  static const int Destroy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, container_id_),
  };
  Destroy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Destroy_descriptor_,
      Destroy::default_instance_,
      Destroy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Destroy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Destroy));
  Usage_descriptor_ = file->message_type(4);
  static const int Usage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, container_id_),
  };
  Usage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Usage_descriptor_,
      Usage::default_instance_,
      Usage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Usage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Usage));
  Termination_descriptor_ = file->message_type(5);
  static const int Termination_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, reasons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, message_),
  };
  Termination_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Termination_descriptor_,
      Termination::default_instance_,
      Termination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Termination, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Termination));
  Containers_descriptor_ = file->message_type(6);
  static const int Containers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Containers, containers_),
  };
  Containers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Containers_descriptor_,
      Containers::default_instance_,
      Containers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Containers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Containers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Containers));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Launch_descriptor_, &Launch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Update_descriptor_, &Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Wait_descriptor_, &Wait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Destroy_descriptor_, &Destroy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Usage_descriptor_, &Usage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Termination_descriptor_, &Termination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Containers_descriptor_, &Containers::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto() {
  delete Launch::default_instance_;
  delete Launch_reflection_;
  delete Update::default_instance_;
  delete Update_reflection_;
  delete Wait::default_instance_;
  delete Wait_reflection_;
  delete Destroy::default_instance_;
  delete Destroy_reflection_;
  delete Usage::default_instance_;
  delete Usage_reflection_;
  delete Termination::default_instance_;
  delete Termination_reflection_;
  delete Containers::default_instance_;
  delete Containers_reflection_;
}

void protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'mesos/containerizer/containerizer.prot"
    "o\022\023mesos.containerizer\032\021mesos/mesos.prot"
    "o\"\354\001\n\006Launch\022(\n\014container_id\030\001 \002(\0132\022.mes"
    "os.ContainerID\022\"\n\ttask_info\030\002 \001(\0132\017.meso"
    "s.TaskInfo\022*\n\rexecutor_info\030\003 \001(\0132\023.meso"
    "s.ExecutorInfo\022\021\n\tdirectory\030\004 \001(\t\022\014\n\004use"
    "r\030\005 \001(\t\022 \n\010slave_id\030\006 \001(\0132\016.mesos.SlaveI"
    "D\022\021\n\tslave_pid\030\007 \001(\t\022\022\n\ncheckpoint\030\010 \001(\010"
    "\"V\n\006Update\022(\n\014container_id\030\001 \002(\0132\022.mesos"
    ".ContainerID\022\"\n\tresources\030\002 \003(\0132\017.mesos."
    "Resource\"0\n\004Wait\022(\n\014container_id\030\001 \002(\0132\022"
    ".mesos.ContainerID\"3\n\007Destroy\022(\n\014contain"
    "er_id\030\001 \002(\0132\022.mesos.ContainerID\"1\n\005Usage"
    "\022(\n\014container_id\030\001 \002(\0132\022.mesos.Container"
    "ID\"z\n\013Termination\022\016\n\006status\030\003 \001(\005\022\037\n\005sta"
    "te\030\004 \001(\0162\020.mesos.TaskState\022)\n\007reasons\030\005 "
    "\003(\0162\030.mesos.TaskStatus.Reason\022\017\n\007message"
    "\030\002 \001(\t\"4\n\nContainers\022&\n\ncontainers\030\001 \003(\013"
    "2\022.mesos.ContainerIDB(\n\036org.apache.mesos"
    ".containerizerB\006Protos", 782);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos/containerizer/containerizer.proto", &protobuf_RegisterTypes);
  Launch::default_instance_ = new Launch();
  Update::default_instance_ = new Update();
  Wait::default_instance_ = new Wait();
  Destroy::default_instance_ = new Destroy();
  Usage::default_instance_ = new Usage();
  Termination::default_instance_ = new Termination();
  Containers::default_instance_ = new Containers();
  Launch::default_instance_->InitAsDefaultInstance();
  Update::default_instance_->InitAsDefaultInstance();
  Wait::default_instance_->InitAsDefaultInstance();
  Destroy::default_instance_->InitAsDefaultInstance();
  Usage::default_instance_->InitAsDefaultInstance();
  Termination::default_instance_->InitAsDefaultInstance();
  Containers::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2fcontainerizer_2fcontainerizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2fcontainerizer_2fcontainerizer_2eproto {
  StaticDescriptorInitializer_mesos_2fcontainerizer_2fcontainerizer_2eproto() {
    protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  }
} static_descriptor_initializer_mesos_2fcontainerizer_2fcontainerizer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Launch::kContainerIdFieldNumber;
const int Launch::kTaskInfoFieldNumber;
const int Launch::kExecutorInfoFieldNumber;
const int Launch::kDirectoryFieldNumber;
const int Launch::kUserFieldNumber;
const int Launch::kSlaveIdFieldNumber;
const int Launch::kSlavePidFieldNumber;
const int Launch::kCheckpointFieldNumber;
#endif  // !_MSC_VER

Launch::Launch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Launch::InitAsDefaultInstance() {
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
  task_info_ = const_cast< ::mesos::TaskInfo*>(&::mesos::TaskInfo::default_instance());
  executor_info_ = const_cast< ::mesos::ExecutorInfo*>(&::mesos::ExecutorInfo::default_instance());
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Launch::Launch(const Launch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Launch::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  task_info_ = NULL;
  executor_info_ = NULL;
  directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slave_id_ = NULL;
  slave_pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checkpoint_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Launch::~Launch() {
  SharedDtor();
}

void Launch::SharedDtor() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (slave_pid_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_pid_;
  }
  if (this != default_instance_) {
    delete container_id_;
    delete task_info_;
    delete executor_info_;
    delete slave_id_;
  }
}

void Launch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Launch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Launch_descriptor_;
}

const Launch& Launch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Launch* Launch::default_instance_ = NULL;

Launch* Launch::New() const {
  return new Launch;
}

void Launch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::mesos::TaskInfo::Clear();
    }
    if (has_executor_info()) {
      if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
    }
    if (has_directory()) {
      if (directory_ != &::google::protobuf::internal::kEmptyString) {
        directory_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_slave_id()) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
    if (has_slave_pid()) {
      if (slave_pid_ != &::google::protobuf::internal::kEmptyString) {
        slave_pid_->clear();
      }
    }
    checkpoint_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Launch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ContainerID container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_info;
        break;
      }

      // optional .mesos.TaskInfo task_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_executor_info;
        break;
      }

      // optional .mesos.ExecutorInfo executor_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executor_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_directory;
        break;
      }

      // optional string directory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_slave_id;
        break;
      }

      // optional .mesos.SlaveID slave_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_slave_pid;
        break;
      }

      // optional string slave_pid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_pid().data(), this->slave_pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_checkpoint;
        break;
      }

      // optional bool checkpoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checkpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkpoint_)));
          set_has_checkpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Launch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  // optional .mesos.TaskInfo task_info = 2;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_info(), output);
  }

  // optional .mesos.ExecutorInfo executor_info = 3;
  if (has_executor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->executor_info(), output);
  }

  // optional string directory = 4;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->directory(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional .mesos.SlaveID slave_id = 6;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->slave_id(), output);
  }

  // optional string slave_pid = 7;
  if (has_slave_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_pid().data(), this->slave_pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->slave_pid(), output);
  }

  // optional bool checkpoint = 8;
  if (has_checkpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->checkpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Launch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  // optional .mesos.TaskInfo task_info = 2;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_info(), target);
  }

  // optional .mesos.ExecutorInfo executor_info = 3;
  if (has_executor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->executor_info(), target);
  }

  // optional string directory = 4;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->directory(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional .mesos.SlaveID slave_id = 6;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->slave_id(), target);
  }

  // optional string slave_pid = 7;
  if (has_slave_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_pid().data(), this->slave_pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->slave_pid(), target);
  }

  // optional bool checkpoint = 8;
  if (has_checkpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->checkpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Launch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ContainerID container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

    // optional .mesos.TaskInfo task_info = 2;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }

    // optional .mesos.ExecutorInfo executor_info = 3;
    if (has_executor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_info());
    }

    // optional string directory = 4;
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional .mesos.SlaveID slave_id = 6;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

    // optional string slave_pid = 7;
    if (has_slave_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_pid());
    }

    // optional bool checkpoint = 8;
    if (has_checkpoint()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Launch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Launch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Launch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Launch::MergeFrom(const Launch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::mesos::TaskInfo::MergeFrom(from.task_info());
    }
    if (from.has_executor_info()) {
      mutable_executor_info()->::mesos::ExecutorInfo::MergeFrom(from.executor_info());
    }
    if (from.has_directory()) {
      set_directory(from.directory());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
    if (from.has_slave_pid()) {
      set_slave_pid(from.slave_pid());
    }
    if (from.has_checkpoint()) {
      set_checkpoint(from.checkpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Launch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Launch::CopyFrom(const Launch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Launch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  if (has_task_info()) {
    if (!this->task_info().IsInitialized()) return false;
  }
  if (has_executor_info()) {
    if (!this->executor_info().IsInitialized()) return false;
  }
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  return true;
}

void Launch::Swap(Launch* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(task_info_, other->task_info_);
    std::swap(executor_info_, other->executor_info_);
    std::swap(directory_, other->directory_);
    std::swap(user_, other->user_);
    std::swap(slave_id_, other->slave_id_);
    std::swap(slave_pid_, other->slave_pid_);
    std::swap(checkpoint_, other->checkpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Launch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Launch_descriptor_;
  metadata.reflection = Launch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Update::kContainerIdFieldNumber;
const int Update::kResourcesFieldNumber;
#endif  // !_MSC_VER

Update::Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Update::InitAsDefaultInstance() {
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
}

Update::Update(const Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Update::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Update::~Update() {
  SharedDtor();
}

void Update::SharedDtor() {
  if (this != default_instance_) {
    delete container_id_;
  }
}

void Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Update_descriptor_;
}

const Update& Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Update* Update::default_instance_ = NULL;

Update* Update::New() const {
  return new Update;
}

void Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ContainerID container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .mesos.Resource resources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ContainerID container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

  }
  // repeated .mesos.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Update::MergeFrom(const Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Update::CopyFrom(const Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void Update::Swap(Update* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Update_descriptor_;
  metadata.reflection = Update_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Wait::kContainerIdFieldNumber;
#endif  // !_MSC_VER

Wait::Wait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Wait::InitAsDefaultInstance() {
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
}

Wait::Wait(const Wait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Wait::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Wait::~Wait() {
  SharedDtor();
}

void Wait::SharedDtor() {
  if (this != default_instance_) {
    delete container_id_;
  }
}

void Wait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Wait_descriptor_;
}

const Wait& Wait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Wait* Wait::default_instance_ = NULL;

Wait* Wait::New() const {
  return new Wait;
}

void Wait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Wait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ContainerID container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Wait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Wait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Wait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ContainerID container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Wait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Wait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Wait::MergeFrom(const Wait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Wait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wait::CopyFrom(const Wait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wait::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  return true;
}

void Wait::Swap(Wait* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Wait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Wait_descriptor_;
  metadata.reflection = Wait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Destroy::kContainerIdFieldNumber;
#endif  // !_MSC_VER

Destroy::Destroy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Destroy::InitAsDefaultInstance() {
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
}

Destroy::Destroy(const Destroy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Destroy::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Destroy::~Destroy() {
  SharedDtor();
}

void Destroy::SharedDtor() {
  if (this != default_instance_) {
    delete container_id_;
  }
}

void Destroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Destroy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Destroy_descriptor_;
}

const Destroy& Destroy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Destroy* Destroy::default_instance_ = NULL;

Destroy* Destroy::New() const {
  return new Destroy;
}

void Destroy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Destroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ContainerID container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Destroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Destroy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Destroy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ContainerID container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Destroy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Destroy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Destroy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Destroy::MergeFrom(const Destroy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Destroy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Destroy::CopyFrom(const Destroy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Destroy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  return true;
}

void Destroy::Swap(Destroy* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Destroy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Destroy_descriptor_;
  metadata.reflection = Destroy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Usage::kContainerIdFieldNumber;
#endif  // !_MSC_VER

Usage::Usage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Usage::InitAsDefaultInstance() {
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
}

Usage::Usage(const Usage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Usage::SharedCtor() {
  _cached_size_ = 0;
  container_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Usage::~Usage() {
  SharedDtor();
}

void Usage::SharedDtor() {
  if (this != default_instance_) {
    delete container_id_;
  }
}

void Usage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Usage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Usage_descriptor_;
}

const Usage& Usage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Usage* Usage::default_instance_ = NULL;

Usage* Usage::New() const {
  return new Usage;
}

void Usage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Usage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ContainerID container_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Usage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->container_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Usage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ContainerID container_id = 1;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->container_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Usage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ContainerID container_id = 1;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Usage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Usage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Usage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Usage::MergeFrom(const Usage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Usage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Usage::CopyFrom(const Usage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Usage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  return true;
}

void Usage::Swap(Usage* other) {
  if (other != this) {
    std::swap(container_id_, other->container_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Usage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Usage_descriptor_;
  metadata.reflection = Usage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Termination::kStatusFieldNumber;
const int Termination::kStateFieldNumber;
const int Termination::kReasonsFieldNumber;
const int Termination::kMessageFieldNumber;
#endif  // !_MSC_VER

Termination::Termination()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Termination::InitAsDefaultInstance() {
}

Termination::Termination(const Termination& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Termination::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  state_ = 6;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Termination::~Termination() {
  SharedDtor();
}

void Termination::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Termination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Termination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Termination_descriptor_;
}

const Termination& Termination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Termination* Termination::default_instance_ = NULL;

Termination* Termination::New() const {
  return new Termination;
}

void Termination::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    state_ = 6;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  reasons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Termination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .mesos.TaskState state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::TaskState_IsValid(value)) {
            set_state(static_cast< ::mesos::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reasons;
        break;
      }

      // repeated .mesos.TaskStatus.Reason reasons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reasons:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::TaskStatus_Reason_IsValid(value)) {
            add_reasons(static_cast< ::mesos::TaskStatus_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::mesos::TaskStatus_Reason_IsValid,
                 this->mutable_reasons())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reasons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Termination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional .mesos.TaskState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // repeated .mesos.TaskStatus.Reason reasons = 5;
  for (int i = 0; i < this->reasons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reasons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Termination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // optional .mesos.TaskState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // repeated .mesos.TaskStatus.Reason reasons = 5;
  for (int i = 0; i < this->reasons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reasons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Termination::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .mesos.TaskState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  // repeated .mesos.TaskStatus.Reason reasons = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->reasons_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->reasons(i));
    }
    total_size += 1 * this->reasons_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Termination::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Termination* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Termination*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Termination::MergeFrom(const Termination& from) {
  GOOGLE_CHECK_NE(&from, this);
  reasons_.MergeFrom(from.reasons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Termination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Termination::CopyFrom(const Termination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Termination::IsInitialized() const {

  return true;
}

void Termination::Swap(Termination* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(state_, other->state_);
    reasons_.Swap(&other->reasons_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Termination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Termination_descriptor_;
  metadata.reflection = Termination_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Containers::kContainersFieldNumber;
#endif  // !_MSC_VER

Containers::Containers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Containers::InitAsDefaultInstance() {
}

Containers::Containers(const Containers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Containers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Containers::~Containers() {
  SharedDtor();
}

void Containers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Containers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Containers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Containers_descriptor_;
}

const Containers& Containers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fcontainerizer_2fcontainerizer_2eproto();
  return *default_instance_;
}

Containers* Containers::default_instance_ = NULL;

Containers* Containers::New() const {
  return new Containers;
}

void Containers::Clear() {
  containers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Containers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.ContainerID containers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_containers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Containers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.ContainerID containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->containers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Containers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.ContainerID containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->containers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Containers::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.ContainerID containers = 1;
  total_size += 1 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Containers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Containers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Containers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Containers::MergeFrom(const Containers& from) {
  GOOGLE_CHECK_NE(&from, this);
  containers_.MergeFrom(from.containers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Containers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Containers::CopyFrom(const Containers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Containers::IsInitialized() const {

  for (int i = 0; i < containers_size(); i++) {
    if (!this->containers(i).IsInitialized()) return false;
  }
  return true;
}

void Containers::Swap(Containers* other) {
  if (other != this) {
    containers_.Swap(&other->containers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Containers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Containers_descriptor_;
  metadata.reflection = Containers_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace containerizer
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
