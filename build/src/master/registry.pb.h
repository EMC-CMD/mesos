// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master/registry.proto

#ifndef PROTOBUF_master_2fregistry_2eproto__INCLUDED
#define PROTOBUF_master_2fregistry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos/mesos.pb.h"
#include "mesos/maintenance/maintenance.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_master_2fregistry_2eproto();
void protobuf_AssignDesc_master_2fregistry_2eproto();
void protobuf_ShutdownFile_master_2fregistry_2eproto();

class Registry;
class Registry_Master;
class Registry_Slave;
class Registry_Slaves;
class Registry_Machine;
class Registry_Machines;

// ===================================================================

class Registry_Master : public ::google::protobuf::Message {
 public:
  Registry_Master();
  virtual ~Registry_Master();

  Registry_Master(const Registry_Master& from);

  inline Registry_Master& operator=(const Registry_Master& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry_Master& default_instance();

  void Swap(Registry_Master* other);

  // implements Message ----------------------------------------------

  Registry_Master* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry_Master& from);
  void MergeFrom(const Registry_Master& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.MasterInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::mesos::MasterInfo& info() const;
  inline ::mesos::MasterInfo* mutable_info();
  inline ::mesos::MasterInfo* release_info();
  inline void set_allocated_info(::mesos::MasterInfo* info);

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry.Master)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::MasterInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry_Master* default_instance_;
};
// -------------------------------------------------------------------

class Registry_Slave : public ::google::protobuf::Message {
 public:
  Registry_Slave();
  virtual ~Registry_Slave();

  Registry_Slave(const Registry_Slave& from);

  inline Registry_Slave& operator=(const Registry_Slave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry_Slave& default_instance();

  void Swap(Registry_Slave* other);

  // implements Message ----------------------------------------------

  Registry_Slave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry_Slave& from);
  void MergeFrom(const Registry_Slave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::mesos::SlaveInfo& info() const;
  inline ::mesos::SlaveInfo* mutable_info();
  inline ::mesos::SlaveInfo* release_info();
  inline void set_allocated_info(::mesos::SlaveInfo* info);

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry.Slave)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::SlaveInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry_Slave* default_instance_;
};
// -------------------------------------------------------------------

class Registry_Slaves : public ::google::protobuf::Message {
 public:
  Registry_Slaves();
  virtual ~Registry_Slaves();

  Registry_Slaves(const Registry_Slaves& from);

  inline Registry_Slaves& operator=(const Registry_Slaves& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry_Slaves& default_instance();

  void Swap(Registry_Slaves* other);

  // implements Message ----------------------------------------------

  Registry_Slaves* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry_Slaves& from);
  void MergeFrom(const Registry_Slaves& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.internal.Registry.Slave slaves = 1;
  inline int slaves_size() const;
  inline void clear_slaves();
  static const int kSlavesFieldNumber = 1;
  inline const ::mesos::internal::Registry_Slave& slaves(int index) const;
  inline ::mesos::internal::Registry_Slave* mutable_slaves(int index);
  inline ::mesos::internal::Registry_Slave* add_slaves();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Slave >&
      slaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Slave >*
      mutable_slaves();

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry.Slaves)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Slave > slaves_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry_Slaves* default_instance_;
};
// -------------------------------------------------------------------

class Registry_Machine : public ::google::protobuf::Message {
 public:
  Registry_Machine();
  virtual ~Registry_Machine();

  Registry_Machine(const Registry_Machine& from);

  inline Registry_Machine& operator=(const Registry_Machine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry_Machine& default_instance();

  void Swap(Registry_Machine* other);

  // implements Message ----------------------------------------------

  Registry_Machine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry_Machine& from);
  void MergeFrom(const Registry_Machine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.MachineInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::mesos::MachineInfo& info() const;
  inline ::mesos::MachineInfo* mutable_info();
  inline ::mesos::MachineInfo* release_info();
  inline void set_allocated_info(::mesos::MachineInfo* info);

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry.Machine)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::MachineInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry_Machine* default_instance_;
};
// -------------------------------------------------------------------

class Registry_Machines : public ::google::protobuf::Message {
 public:
  Registry_Machines();
  virtual ~Registry_Machines();

  Registry_Machines(const Registry_Machines& from);

  inline Registry_Machines& operator=(const Registry_Machines& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry_Machines& default_instance();

  void Swap(Registry_Machines* other);

  // implements Message ----------------------------------------------

  Registry_Machines* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry_Machines& from);
  void MergeFrom(const Registry_Machines& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.internal.Registry.Machine machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::mesos::internal::Registry_Machine& machines(int index) const;
  inline ::mesos::internal::Registry_Machine* mutable_machines(int index);
  inline ::mesos::internal::Registry_Machine* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Machine >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Machine >*
      mutable_machines();

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry.Machines)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Machine > machines_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry_Machines* default_instance_;
};
// -------------------------------------------------------------------

class Registry : public ::google::protobuf::Message {
 public:
  Registry();
  virtual ~Registry();

  Registry(const Registry& from);

  inline Registry& operator=(const Registry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Registry& default_instance();

  void Swap(Registry* other);

  // implements Message ----------------------------------------------

  Registry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Registry& from);
  void MergeFrom(const Registry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Registry_Master Master;
  typedef Registry_Slave Slave;
  typedef Registry_Slaves Slaves;
  typedef Registry_Machine Machine;
  typedef Registry_Machines Machines;

  // accessors -------------------------------------------------------

  // optional .mesos.internal.Registry.Master master = 1;
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 1;
  inline const ::mesos::internal::Registry_Master& master() const;
  inline ::mesos::internal::Registry_Master* mutable_master();
  inline ::mesos::internal::Registry_Master* release_master();
  inline void set_allocated_master(::mesos::internal::Registry_Master* master);

  // optional .mesos.internal.Registry.Slaves slaves = 2;
  inline bool has_slaves() const;
  inline void clear_slaves();
  static const int kSlavesFieldNumber = 2;
  inline const ::mesos::internal::Registry_Slaves& slaves() const;
  inline ::mesos::internal::Registry_Slaves* mutable_slaves();
  inline ::mesos::internal::Registry_Slaves* release_slaves();
  inline void set_allocated_slaves(::mesos::internal::Registry_Slaves* slaves);

  // optional .mesos.internal.Registry.Machines machines = 3;
  inline bool has_machines() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 3;
  inline const ::mesos::internal::Registry_Machines& machines() const;
  inline ::mesos::internal::Registry_Machines* mutable_machines();
  inline ::mesos::internal::Registry_Machines* release_machines();
  inline void set_allocated_machines(::mesos::internal::Registry_Machines* machines);

  // repeated .mesos.maintenance.Schedule schedules = 4;
  inline int schedules_size() const;
  inline void clear_schedules();
  static const int kSchedulesFieldNumber = 4;
  inline const ::mesos::maintenance::Schedule& schedules(int index) const;
  inline ::mesos::maintenance::Schedule* mutable_schedules(int index);
  inline ::mesos::maintenance::Schedule* add_schedules();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Schedule >&
      schedules() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Schedule >*
      mutable_schedules();

  // @@protoc_insertion_point(class_scope:mesos.internal.Registry)
 private:
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_slaves();
  inline void clear_has_slaves();
  inline void set_has_machines();
  inline void clear_has_machines();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::internal::Registry_Master* master_;
  ::mesos::internal::Registry_Slaves* slaves_;
  ::mesos::internal::Registry_Machines* machines_;
  ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Schedule > schedules_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_master_2fregistry_2eproto();
  friend void protobuf_AssignDesc_master_2fregistry_2eproto();
  friend void protobuf_ShutdownFile_master_2fregistry_2eproto();

  void InitAsDefaultInstance();
  static Registry* default_instance_;
};
// ===================================================================


// ===================================================================

// Registry_Master

// required .mesos.MasterInfo info = 1;
inline bool Registry_Master::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registry_Master::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registry_Master::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registry_Master::clear_info() {
  if (info_ != NULL) info_->::mesos::MasterInfo::Clear();
  clear_has_info();
}
inline const ::mesos::MasterInfo& Registry_Master::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::mesos::MasterInfo* Registry_Master::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::mesos::MasterInfo;
  return info_;
}
inline ::mesos::MasterInfo* Registry_Master::release_info() {
  clear_has_info();
  ::mesos::MasterInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Registry_Master::set_allocated_info(::mesos::MasterInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Registry_Slave

// required .mesos.SlaveInfo info = 1;
inline bool Registry_Slave::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registry_Slave::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registry_Slave::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registry_Slave::clear_info() {
  if (info_ != NULL) info_->::mesos::SlaveInfo::Clear();
  clear_has_info();
}
inline const ::mesos::SlaveInfo& Registry_Slave::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::mesos::SlaveInfo* Registry_Slave::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::mesos::SlaveInfo;
  return info_;
}
inline ::mesos::SlaveInfo* Registry_Slave::release_info() {
  clear_has_info();
  ::mesos::SlaveInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Registry_Slave::set_allocated_info(::mesos::SlaveInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Registry_Slaves

// repeated .mesos.internal.Registry.Slave slaves = 1;
inline int Registry_Slaves::slaves_size() const {
  return slaves_.size();
}
inline void Registry_Slaves::clear_slaves() {
  slaves_.Clear();
}
inline const ::mesos::internal::Registry_Slave& Registry_Slaves::slaves(int index) const {
  return slaves_.Get(index);
}
inline ::mesos::internal::Registry_Slave* Registry_Slaves::mutable_slaves(int index) {
  return slaves_.Mutable(index);
}
inline ::mesos::internal::Registry_Slave* Registry_Slaves::add_slaves() {
  return slaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Slave >&
Registry_Slaves::slaves() const {
  return slaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Slave >*
Registry_Slaves::mutable_slaves() {
  return &slaves_;
}

// -------------------------------------------------------------------

// Registry_Machine

// required .mesos.MachineInfo info = 1;
inline bool Registry_Machine::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registry_Machine::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registry_Machine::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registry_Machine::clear_info() {
  if (info_ != NULL) info_->::mesos::MachineInfo::Clear();
  clear_has_info();
}
inline const ::mesos::MachineInfo& Registry_Machine::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::mesos::MachineInfo* Registry_Machine::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::mesos::MachineInfo;
  return info_;
}
inline ::mesos::MachineInfo* Registry_Machine::release_info() {
  clear_has_info();
  ::mesos::MachineInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Registry_Machine::set_allocated_info(::mesos::MachineInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Registry_Machines

// repeated .mesos.internal.Registry.Machine machines = 1;
inline int Registry_Machines::machines_size() const {
  return machines_.size();
}
inline void Registry_Machines::clear_machines() {
  machines_.Clear();
}
inline const ::mesos::internal::Registry_Machine& Registry_Machines::machines(int index) const {
  return machines_.Get(index);
}
inline ::mesos::internal::Registry_Machine* Registry_Machines::mutable_machines(int index) {
  return machines_.Mutable(index);
}
inline ::mesos::internal::Registry_Machine* Registry_Machines::add_machines() {
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Machine >&
Registry_Machines::machines() const {
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::internal::Registry_Machine >*
Registry_Machines::mutable_machines() {
  return &machines_;
}

// -------------------------------------------------------------------

// Registry

// optional .mesos.internal.Registry.Master master = 1;
inline bool Registry::has_master() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Registry::set_has_master() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Registry::clear_has_master() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Registry::clear_master() {
  if (master_ != NULL) master_->::mesos::internal::Registry_Master::Clear();
  clear_has_master();
}
inline const ::mesos::internal::Registry_Master& Registry::master() const {
  return master_ != NULL ? *master_ : *default_instance_->master_;
}
inline ::mesos::internal::Registry_Master* Registry::mutable_master() {
  set_has_master();
  if (master_ == NULL) master_ = new ::mesos::internal::Registry_Master;
  return master_;
}
inline ::mesos::internal::Registry_Master* Registry::release_master() {
  clear_has_master();
  ::mesos::internal::Registry_Master* temp = master_;
  master_ = NULL;
  return temp;
}
inline void Registry::set_allocated_master(::mesos::internal::Registry_Master* master) {
  delete master_;
  master_ = master;
  if (master) {
    set_has_master();
  } else {
    clear_has_master();
  }
}

// optional .mesos.internal.Registry.Slaves slaves = 2;
inline bool Registry::has_slaves() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Registry::set_has_slaves() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Registry::clear_has_slaves() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Registry::clear_slaves() {
  if (slaves_ != NULL) slaves_->::mesos::internal::Registry_Slaves::Clear();
  clear_has_slaves();
}
inline const ::mesos::internal::Registry_Slaves& Registry::slaves() const {
  return slaves_ != NULL ? *slaves_ : *default_instance_->slaves_;
}
inline ::mesos::internal::Registry_Slaves* Registry::mutable_slaves() {
  set_has_slaves();
  if (slaves_ == NULL) slaves_ = new ::mesos::internal::Registry_Slaves;
  return slaves_;
}
inline ::mesos::internal::Registry_Slaves* Registry::release_slaves() {
  clear_has_slaves();
  ::mesos::internal::Registry_Slaves* temp = slaves_;
  slaves_ = NULL;
  return temp;
}
inline void Registry::set_allocated_slaves(::mesos::internal::Registry_Slaves* slaves) {
  delete slaves_;
  slaves_ = slaves;
  if (slaves) {
    set_has_slaves();
  } else {
    clear_has_slaves();
  }
}

// optional .mesos.internal.Registry.Machines machines = 3;
inline bool Registry::has_machines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Registry::set_has_machines() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Registry::clear_has_machines() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Registry::clear_machines() {
  if (machines_ != NULL) machines_->::mesos::internal::Registry_Machines::Clear();
  clear_has_machines();
}
inline const ::mesos::internal::Registry_Machines& Registry::machines() const {
  return machines_ != NULL ? *machines_ : *default_instance_->machines_;
}
inline ::mesos::internal::Registry_Machines* Registry::mutable_machines() {
  set_has_machines();
  if (machines_ == NULL) machines_ = new ::mesos::internal::Registry_Machines;
  return machines_;
}
inline ::mesos::internal::Registry_Machines* Registry::release_machines() {
  clear_has_machines();
  ::mesos::internal::Registry_Machines* temp = machines_;
  machines_ = NULL;
  return temp;
}
inline void Registry::set_allocated_machines(::mesos::internal::Registry_Machines* machines) {
  delete machines_;
  machines_ = machines;
  if (machines) {
    set_has_machines();
  } else {
    clear_has_machines();
  }
}

// repeated .mesos.maintenance.Schedule schedules = 4;
inline int Registry::schedules_size() const {
  return schedules_.size();
}
inline void Registry::clear_schedules() {
  schedules_.Clear();
}
inline const ::mesos::maintenance::Schedule& Registry::schedules(int index) const {
  return schedules_.Get(index);
}
inline ::mesos::maintenance::Schedule* Registry::mutable_schedules(int index) {
  return schedules_.Mutable(index);
}
inline ::mesos::maintenance::Schedule* Registry::add_schedules() {
  return schedules_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Schedule >&
Registry::schedules() const {
  return schedules_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Schedule >*
Registry::mutable_schedules() {
  return &schedules_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_master_2fregistry_2eproto__INCLUDED
