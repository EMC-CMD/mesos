// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/log.proto

#ifndef PROTOBUF_messages_2flog_2eproto__INCLUDED
#define PROTOBUF_messages_2flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {
namespace log {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2flog_2eproto();
void protobuf_AssignDesc_messages_2flog_2eproto();
void protobuf_ShutdownFile_messages_2flog_2eproto();

class Promise;
class Action;
class Action_Nop;
class Action_Append;
class Action_Truncate;
class Metadata;
class Record;
class PromiseRequest;
class PromiseResponse;
class WriteRequest;
class WriteResponse;
class LearnedMessage;
class RecoverRequest;
class RecoverResponse;

enum Action_Type {
  Action_Type_NOP = 1,
  Action_Type_APPEND = 2,
  Action_Type_TRUNCATE = 3
};
bool Action_Type_IsValid(int value);
const Action_Type Action_Type_Type_MIN = Action_Type_NOP;
const Action_Type Action_Type_Type_MAX = Action_Type_TRUNCATE;
const int Action_Type_Type_ARRAYSIZE = Action_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor();
inline const ::std::string& Action_Type_Name(Action_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Action_Type_descriptor(), value);
}
inline bool Action_Type_Parse(
    const ::std::string& name, Action_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Action_Type>(
    Action_Type_descriptor(), name, value);
}
enum Metadata_Status {
  Metadata_Status_VOTING = 1,
  Metadata_Status_RECOVERING = 2,
  Metadata_Status_STARTING = 3,
  Metadata_Status_EMPTY = 4
};
bool Metadata_Status_IsValid(int value);
const Metadata_Status Metadata_Status_Status_MIN = Metadata_Status_VOTING;
const Metadata_Status Metadata_Status_Status_MAX = Metadata_Status_EMPTY;
const int Metadata_Status_Status_ARRAYSIZE = Metadata_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Metadata_Status_descriptor();
inline const ::std::string& Metadata_Status_Name(Metadata_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Metadata_Status_descriptor(), value);
}
inline bool Metadata_Status_Parse(
    const ::std::string& name, Metadata_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Metadata_Status>(
    Metadata_Status_descriptor(), name, value);
}
enum Record_Type {
  Record_Type_PROMISE = 1,
  Record_Type_ACTION = 2,
  Record_Type_METADATA = 3
};
bool Record_Type_IsValid(int value);
const Record_Type Record_Type_Type_MIN = Record_Type_PROMISE;
const Record_Type Record_Type_Type_MAX = Record_Type_METADATA;
const int Record_Type_Type_ARRAYSIZE = Record_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Record_Type_descriptor();
inline const ::std::string& Record_Type_Name(Record_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Record_Type_descriptor(), value);
}
inline bool Record_Type_Parse(
    const ::std::string& name, Record_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Record_Type>(
    Record_Type_descriptor(), name, value);
}
// ===================================================================

class Promise : public ::google::protobuf::Message {
 public:
  Promise();
  virtual ~Promise();

  Promise(const Promise& from);

  inline Promise& operator=(const Promise& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Promise& default_instance();

  void Swap(Promise* other);

  // implements Message ----------------------------------------------

  Promise* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Promise& from);
  void MergeFrom(const Promise& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 proposal = 1;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 1;
  inline ::google::protobuf::uint64 proposal() const;
  inline void set_proposal(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Promise)
 private:
  inline void set_has_proposal();
  inline void clear_has_proposal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 proposal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Promise* default_instance_;
};
// -------------------------------------------------------------------

class Action_Nop : public ::google::protobuf::Message {
 public:
  Action_Nop();
  virtual ~Action_Nop();

  Action_Nop(const Action_Nop& from);

  inline Action_Nop& operator=(const Action_Nop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_Nop& default_instance();

  void Swap(Action_Nop* other);

  // implements Message ----------------------------------------------

  Action_Nop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action_Nop& from);
  void MergeFrom(const Action_Nop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Action.Nop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Action_Nop* default_instance_;
};
// -------------------------------------------------------------------

class Action_Append : public ::google::protobuf::Message {
 public:
  Action_Append();
  virtual ~Action_Append();

  Action_Append(const Action_Append& from);

  inline Action_Append& operator=(const Action_Append& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_Append& default_instance();

  void Swap(Action_Append* other);

  // implements Message ----------------------------------------------

  Action_Append* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action_Append& from);
  void MergeFrom(const Action_Append& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes bytes = 1;
  inline bool has_bytes() const;
  inline void clear_bytes();
  static const int kBytesFieldNumber = 1;
  inline const ::std::string& bytes() const;
  inline void set_bytes(const ::std::string& value);
  inline void set_bytes(const char* value);
  inline void set_bytes(const void* value, size_t size);
  inline ::std::string* mutable_bytes();
  inline ::std::string* release_bytes();
  inline void set_allocated_bytes(::std::string* bytes);

  // optional bytes cksum = 2;
  inline bool has_cksum() const;
  inline void clear_cksum();
  static const int kCksumFieldNumber = 2;
  inline const ::std::string& cksum() const;
  inline void set_cksum(const ::std::string& value);
  inline void set_cksum(const char* value);
  inline void set_cksum(const void* value, size_t size);
  inline ::std::string* mutable_cksum();
  inline ::std::string* release_cksum();
  inline void set_allocated_cksum(::std::string* cksum);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Action.Append)
 private:
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_cksum();
  inline void clear_has_cksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* bytes_;
  ::std::string* cksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Action_Append* default_instance_;
};
// -------------------------------------------------------------------

class Action_Truncate : public ::google::protobuf::Message {
 public:
  Action_Truncate();
  virtual ~Action_Truncate();

  Action_Truncate(const Action_Truncate& from);

  inline Action_Truncate& operator=(const Action_Truncate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action_Truncate& default_instance();

  void Swap(Action_Truncate* other);

  // implements Message ----------------------------------------------

  Action_Truncate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action_Truncate& from);
  void MergeFrom(const Action_Truncate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline ::google::protobuf::uint64 to() const;
  inline void set_to(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Action.Truncate)
 private:
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Action_Truncate* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Action_Nop Nop;
  typedef Action_Append Append;
  typedef Action_Truncate Truncate;

  typedef Action_Type Type;
  static const Type NOP = Action_Type_NOP;
  static const Type APPEND = Action_Type_APPEND;
  static const Type TRUNCATE = Action_Type_TRUNCATE;
  static inline bool Type_IsValid(int value) {
    return Action_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Action_Type_Type_MIN;
  static const Type Type_MAX =
    Action_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Action_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Action_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Action_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Action_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // required uint64 promised = 2;
  inline bool has_promised() const;
  inline void clear_promised();
  static const int kPromisedFieldNumber = 2;
  inline ::google::protobuf::uint64 promised() const;
  inline void set_promised(::google::protobuf::uint64 value);

  // optional uint64 performed = 3;
  inline bool has_performed() const;
  inline void clear_performed();
  static const int kPerformedFieldNumber = 3;
  inline ::google::protobuf::uint64 performed() const;
  inline void set_performed(::google::protobuf::uint64 value);

  // optional bool learned = 4;
  inline bool has_learned() const;
  inline void clear_learned();
  static const int kLearnedFieldNumber = 4;
  inline bool learned() const;
  inline void set_learned(bool value);

  // optional .mesos.internal.log.Action.Type type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::mesos::internal::log::Action_Type type() const;
  inline void set_type(::mesos::internal::log::Action_Type value);

  // optional .mesos.internal.log.Action.Nop nop = 6;
  inline bool has_nop() const;
  inline void clear_nop();
  static const int kNopFieldNumber = 6;
  inline const ::mesos::internal::log::Action_Nop& nop() const;
  inline ::mesos::internal::log::Action_Nop* mutable_nop();
  inline ::mesos::internal::log::Action_Nop* release_nop();
  inline void set_allocated_nop(::mesos::internal::log::Action_Nop* nop);

  // optional .mesos.internal.log.Action.Append append = 7;
  inline bool has_append() const;
  inline void clear_append();
  static const int kAppendFieldNumber = 7;
  inline const ::mesos::internal::log::Action_Append& append() const;
  inline ::mesos::internal::log::Action_Append* mutable_append();
  inline ::mesos::internal::log::Action_Append* release_append();
  inline void set_allocated_append(::mesos::internal::log::Action_Append* append);

  // optional .mesos.internal.log.Action.Truncate truncate = 8;
  inline bool has_truncate() const;
  inline void clear_truncate();
  static const int kTruncateFieldNumber = 8;
  inline const ::mesos::internal::log::Action_Truncate& truncate() const;
  inline ::mesos::internal::log::Action_Truncate* mutable_truncate();
  inline ::mesos::internal::log::Action_Truncate* release_truncate();
  inline void set_allocated_truncate(::mesos::internal::log::Action_Truncate* truncate);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Action)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_promised();
  inline void clear_has_promised();
  inline void set_has_performed();
  inline void clear_has_performed();
  inline void set_has_learned();
  inline void clear_has_learned();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nop();
  inline void clear_has_nop();
  inline void set_has_append();
  inline void clear_has_append();
  inline void set_has_truncate();
  inline void clear_has_truncate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 position_;
  ::google::protobuf::uint64 promised_;
  ::google::protobuf::uint64 performed_;
  bool learned_;
  int type_;
  ::mesos::internal::log::Action_Nop* nop_;
  ::mesos::internal::log::Action_Append* append_;
  ::mesos::internal::log::Action_Truncate* truncate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Metadata_Status Status;
  static const Status VOTING = Metadata_Status_VOTING;
  static const Status RECOVERING = Metadata_Status_RECOVERING;
  static const Status STARTING = Metadata_Status_STARTING;
  static const Status EMPTY = Metadata_Status_EMPTY;
  static inline bool Status_IsValid(int value) {
    return Metadata_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Metadata_Status_Status_MIN;
  static const Status Status_MAX =
    Metadata_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Metadata_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Metadata_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Metadata_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Metadata_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::mesos::internal::log::Metadata_Status status() const;
  inline void set_status(::mesos::internal::log::Metadata_Status value);

  // required uint64 promised = 2 [default = 0];
  inline bool has_promised() const;
  inline void clear_promised();
  static const int kPromisedFieldNumber = 2;
  inline ::google::protobuf::uint64 promised() const;
  inline void set_promised(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Metadata)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_promised();
  inline void clear_has_promised();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 promised_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  Record* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Record_Type Type;
  static const Type PROMISE = Record_Type_PROMISE;
  static const Type ACTION = Record_Type_ACTION;
  static const Type METADATA = Record_Type_METADATA;
  static inline bool Type_IsValid(int value) {
    return Record_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Record_Type_Type_MIN;
  static const Type Type_MAX =
    Record_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Record_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Record_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Record_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Record_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.internal.log.Record.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::internal::log::Record_Type type() const;
  inline void set_type(::mesos::internal::log::Record_Type value);

  // optional .mesos.internal.log.Promise promise = 2;
  inline bool has_promise() const;
  inline void clear_promise();
  static const int kPromiseFieldNumber = 2;
  inline const ::mesos::internal::log::Promise& promise() const;
  inline ::mesos::internal::log::Promise* mutable_promise();
  inline ::mesos::internal::log::Promise* release_promise();
  inline void set_allocated_promise(::mesos::internal::log::Promise* promise);

  // optional .mesos.internal.log.Action action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline const ::mesos::internal::log::Action& action() const;
  inline ::mesos::internal::log::Action* mutable_action();
  inline ::mesos::internal::log::Action* release_action();
  inline void set_allocated_action(::mesos::internal::log::Action* action);

  // optional .mesos.internal.log.Metadata metadata = 4;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  inline const ::mesos::internal::log::Metadata& metadata() const;
  inline ::mesos::internal::log::Metadata* mutable_metadata();
  inline ::mesos::internal::log::Metadata* release_metadata();
  inline void set_allocated_metadata(::mesos::internal::log::Metadata* metadata);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.Record)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_promise();
  inline void clear_has_promise();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_metadata();
  inline void clear_has_metadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::internal::log::Promise* promise_;
  ::mesos::internal::log::Action* action_;
  ::mesos::internal::log::Metadata* metadata_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static Record* default_instance_;
};
// -------------------------------------------------------------------

class PromiseRequest : public ::google::protobuf::Message {
 public:
  PromiseRequest();
  virtual ~PromiseRequest();

  PromiseRequest(const PromiseRequest& from);

  inline PromiseRequest& operator=(const PromiseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PromiseRequest& default_instance();

  void Swap(PromiseRequest* other);

  // implements Message ----------------------------------------------

  PromiseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PromiseRequest& from);
  void MergeFrom(const PromiseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 proposal = 1;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 1;
  inline ::google::protobuf::uint64 proposal() const;
  inline void set_proposal(::google::protobuf::uint64 value);

  // optional uint64 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.PromiseRequest)
 private:
  inline void set_has_proposal();
  inline void clear_has_proposal();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 proposal_;
  ::google::protobuf::uint64 position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static PromiseRequest* default_instance_;
};
// -------------------------------------------------------------------

class PromiseResponse : public ::google::protobuf::Message {
 public:
  PromiseResponse();
  virtual ~PromiseResponse();

  PromiseResponse(const PromiseResponse& from);

  inline PromiseResponse& operator=(const PromiseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PromiseResponse& default_instance();

  void Swap(PromiseResponse* other);

  // implements Message ----------------------------------------------

  PromiseResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PromiseResponse& from);
  void MergeFrom(const PromiseResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool okay = 1;
  inline bool has_okay() const;
  inline void clear_okay();
  static const int kOkayFieldNumber = 1;
  inline bool okay() const;
  inline void set_okay(bool value);

  // required uint64 proposal = 2;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 2;
  inline ::google::protobuf::uint64 proposal() const;
  inline void set_proposal(::google::protobuf::uint64 value);

  // optional uint64 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // optional .mesos.internal.log.Action action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline const ::mesos::internal::log::Action& action() const;
  inline ::mesos::internal::log::Action* mutable_action();
  inline ::mesos::internal::log::Action* release_action();
  inline void set_allocated_action(::mesos::internal::log::Action* action);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.PromiseResponse)
 private:
  inline void set_has_okay();
  inline void clear_has_okay();
  inline void set_has_proposal();
  inline void clear_has_proposal();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 proposal_;
  ::google::protobuf::uint64 position_;
  ::mesos::internal::log::Action* action_;
  bool okay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static PromiseResponse* default_instance_;
};
// -------------------------------------------------------------------

class WriteRequest : public ::google::protobuf::Message {
 public:
  WriteRequest();
  virtual ~WriteRequest();

  WriteRequest(const WriteRequest& from);

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteRequest& default_instance();

  void Swap(WriteRequest* other);

  // implements Message ----------------------------------------------

  WriteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteRequest& from);
  void MergeFrom(const WriteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 proposal = 1;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 1;
  inline ::google::protobuf::uint64 proposal() const;
  inline void set_proposal(::google::protobuf::uint64 value);

  // required uint64 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // optional bool learned = 3;
  inline bool has_learned() const;
  inline void clear_learned();
  static const int kLearnedFieldNumber = 3;
  inline bool learned() const;
  inline void set_learned(bool value);

  // required .mesos.internal.log.Action.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::mesos::internal::log::Action_Type type() const;
  inline void set_type(::mesos::internal::log::Action_Type value);

  // optional .mesos.internal.log.Action.Nop nop = 5;
  inline bool has_nop() const;
  inline void clear_nop();
  static const int kNopFieldNumber = 5;
  inline const ::mesos::internal::log::Action_Nop& nop() const;
  inline ::mesos::internal::log::Action_Nop* mutable_nop();
  inline ::mesos::internal::log::Action_Nop* release_nop();
  inline void set_allocated_nop(::mesos::internal::log::Action_Nop* nop);

  // optional .mesos.internal.log.Action.Append append = 6;
  inline bool has_append() const;
  inline void clear_append();
  static const int kAppendFieldNumber = 6;
  inline const ::mesos::internal::log::Action_Append& append() const;
  inline ::mesos::internal::log::Action_Append* mutable_append();
  inline ::mesos::internal::log::Action_Append* release_append();
  inline void set_allocated_append(::mesos::internal::log::Action_Append* append);

  // optional .mesos.internal.log.Action.Truncate truncate = 7;
  inline bool has_truncate() const;
  inline void clear_truncate();
  static const int kTruncateFieldNumber = 7;
  inline const ::mesos::internal::log::Action_Truncate& truncate() const;
  inline ::mesos::internal::log::Action_Truncate* mutable_truncate();
  inline ::mesos::internal::log::Action_Truncate* release_truncate();
  inline void set_allocated_truncate(::mesos::internal::log::Action_Truncate* truncate);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.WriteRequest)
 private:
  inline void set_has_proposal();
  inline void clear_has_proposal();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_learned();
  inline void clear_has_learned();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_nop();
  inline void clear_has_nop();
  inline void set_has_append();
  inline void clear_has_append();
  inline void set_has_truncate();
  inline void clear_has_truncate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 proposal_;
  ::google::protobuf::uint64 position_;
  bool learned_;
  int type_;
  ::mesos::internal::log::Action_Nop* nop_;
  ::mesos::internal::log::Action_Append* append_;
  ::mesos::internal::log::Action_Truncate* truncate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static WriteRequest* default_instance_;
};
// -------------------------------------------------------------------

class WriteResponse : public ::google::protobuf::Message {
 public:
  WriteResponse();
  virtual ~WriteResponse();

  WriteResponse(const WriteResponse& from);

  inline WriteResponse& operator=(const WriteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteResponse& default_instance();

  void Swap(WriteResponse* other);

  // implements Message ----------------------------------------------

  WriteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteResponse& from);
  void MergeFrom(const WriteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool okay = 1;
  inline bool has_okay() const;
  inline void clear_okay();
  static const int kOkayFieldNumber = 1;
  inline bool okay() const;
  inline void set_okay(bool value);

  // required uint64 proposal = 2;
  inline bool has_proposal() const;
  inline void clear_proposal();
  static const int kProposalFieldNumber = 2;
  inline ::google::protobuf::uint64 proposal() const;
  inline void set_proposal(::google::protobuf::uint64 value);

  // required uint64 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.WriteResponse)
 private:
  inline void set_has_okay();
  inline void clear_has_okay();
  inline void set_has_proposal();
  inline void clear_has_proposal();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 proposal_;
  ::google::protobuf::uint64 position_;
  bool okay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static WriteResponse* default_instance_;
};
// -------------------------------------------------------------------

class LearnedMessage : public ::google::protobuf::Message {
 public:
  LearnedMessage();
  virtual ~LearnedMessage();

  LearnedMessage(const LearnedMessage& from);

  inline LearnedMessage& operator=(const LearnedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearnedMessage& default_instance();

  void Swap(LearnedMessage* other);

  // implements Message ----------------------------------------------

  LearnedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LearnedMessage& from);
  void MergeFrom(const LearnedMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.internal.log.Action action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::mesos::internal::log::Action& action() const;
  inline ::mesos::internal::log::Action* mutable_action();
  inline ::mesos::internal::log::Action* release_action();
  inline void set_allocated_action(::mesos::internal::log::Action* action);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.LearnedMessage)
 private:
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::internal::log::Action* action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static LearnedMessage* default_instance_;
};
// -------------------------------------------------------------------

class RecoverRequest : public ::google::protobuf::Message {
 public:
  RecoverRequest();
  virtual ~RecoverRequest();

  RecoverRequest(const RecoverRequest& from);

  inline RecoverRequest& operator=(const RecoverRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverRequest& default_instance();

  void Swap(RecoverRequest* other);

  // implements Message ----------------------------------------------

  RecoverRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecoverRequest& from);
  void MergeFrom(const RecoverRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mesos.internal.log.RecoverRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static RecoverRequest* default_instance_;
};
// -------------------------------------------------------------------

class RecoverResponse : public ::google::protobuf::Message {
 public:
  RecoverResponse();
  virtual ~RecoverResponse();

  RecoverResponse(const RecoverResponse& from);

  inline RecoverResponse& operator=(const RecoverResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverResponse& default_instance();

  void Swap(RecoverResponse* other);

  // implements Message ----------------------------------------------

  RecoverResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecoverResponse& from);
  void MergeFrom(const RecoverResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.internal.log.Metadata.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::mesos::internal::log::Metadata_Status status() const;
  inline void set_status(::mesos::internal::log::Metadata_Status value);

  // optional uint64 begin = 2;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 2;
  inline ::google::protobuf::uint64 begin() const;
  inline void set_begin(::google::protobuf::uint64 value);

  // optional uint64 end = 3;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 3;
  inline ::google::protobuf::uint64 end() const;
  inline void set_end(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.internal.log.RecoverResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 begin_;
  ::google::protobuf::uint64 end_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2flog_2eproto();
  friend void protobuf_AssignDesc_messages_2flog_2eproto();
  friend void protobuf_ShutdownFile_messages_2flog_2eproto();

  void InitAsDefaultInstance();
  static RecoverResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Promise

// required uint64 proposal = 1;
inline bool Promise::has_proposal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Promise::set_has_proposal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Promise::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Promise::clear_proposal() {
  proposal_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal();
}
inline ::google::protobuf::uint64 Promise::proposal() const {
  return proposal_;
}
inline void Promise::set_proposal(::google::protobuf::uint64 value) {
  set_has_proposal();
  proposal_ = value;
}

// -------------------------------------------------------------------

// Action_Nop

// -------------------------------------------------------------------

// Action_Append

// required bytes bytes = 1;
inline bool Action_Append::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action_Append::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action_Append::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action_Append::clear_bytes() {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    bytes_->clear();
  }
  clear_has_bytes();
}
inline const ::std::string& Action_Append::bytes() const {
  return *bytes_;
}
inline void Action_Append::set_bytes(const ::std::string& value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void Action_Append::set_bytes(const char* value) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(value);
}
inline void Action_Append::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  bytes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action_Append::mutable_bytes() {
  set_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    bytes_ = new ::std::string;
  }
  return bytes_;
}
inline ::std::string* Action_Append::release_bytes() {
  clear_has_bytes();
  if (bytes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_;
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Action_Append::set_allocated_bytes(::std::string* bytes) {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (bytes) {
    set_has_bytes();
    bytes_ = bytes;
  } else {
    clear_has_bytes();
    bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes cksum = 2;
inline bool Action_Append::has_cksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action_Append::set_has_cksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action_Append::clear_has_cksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action_Append::clear_cksum() {
  if (cksum_ != &::google::protobuf::internal::kEmptyString) {
    cksum_->clear();
  }
  clear_has_cksum();
}
inline const ::std::string& Action_Append::cksum() const {
  return *cksum_;
}
inline void Action_Append::set_cksum(const ::std::string& value) {
  set_has_cksum();
  if (cksum_ == &::google::protobuf::internal::kEmptyString) {
    cksum_ = new ::std::string;
  }
  cksum_->assign(value);
}
inline void Action_Append::set_cksum(const char* value) {
  set_has_cksum();
  if (cksum_ == &::google::protobuf::internal::kEmptyString) {
    cksum_ = new ::std::string;
  }
  cksum_->assign(value);
}
inline void Action_Append::set_cksum(const void* value, size_t size) {
  set_has_cksum();
  if (cksum_ == &::google::protobuf::internal::kEmptyString) {
    cksum_ = new ::std::string;
  }
  cksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action_Append::mutable_cksum() {
  set_has_cksum();
  if (cksum_ == &::google::protobuf::internal::kEmptyString) {
    cksum_ = new ::std::string;
  }
  return cksum_;
}
inline ::std::string* Action_Append::release_cksum() {
  clear_has_cksum();
  if (cksum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cksum_;
    cksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Action_Append::set_allocated_cksum(::std::string* cksum) {
  if (cksum_ != &::google::protobuf::internal::kEmptyString) {
    delete cksum_;
  }
  if (cksum) {
    set_has_cksum();
    cksum_ = cksum;
  } else {
    clear_has_cksum();
    cksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Action_Truncate

// required uint64 to = 1;
inline bool Action_Truncate::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action_Truncate::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action_Truncate::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action_Truncate::clear_to() {
  to_ = GOOGLE_ULONGLONG(0);
  clear_has_to();
}
inline ::google::protobuf::uint64 Action_Truncate::to() const {
  return to_;
}
inline void Action_Truncate::set_to(::google::protobuf::uint64 value) {
  set_has_to();
  to_ = value;
}

// -------------------------------------------------------------------

// Action

// required uint64 position = 1;
inline bool Action::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 Action::position() const {
  return position_;
}
inline void Action::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// required uint64 promised = 2;
inline bool Action::has_promised() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_promised() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_promised() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_promised() {
  promised_ = GOOGLE_ULONGLONG(0);
  clear_has_promised();
}
inline ::google::protobuf::uint64 Action::promised() const {
  return promised_;
}
inline void Action::set_promised(::google::protobuf::uint64 value) {
  set_has_promised();
  promised_ = value;
}

// optional uint64 performed = 3;
inline bool Action::has_performed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_performed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_performed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_performed() {
  performed_ = GOOGLE_ULONGLONG(0);
  clear_has_performed();
}
inline ::google::protobuf::uint64 Action::performed() const {
  return performed_;
}
inline void Action::set_performed(::google::protobuf::uint64 value) {
  set_has_performed();
  performed_ = value;
}

// optional bool learned = 4;
inline bool Action::has_learned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_learned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_learned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_learned() {
  learned_ = false;
  clear_has_learned();
}
inline bool Action::learned() const {
  return learned_;
}
inline void Action::set_learned(bool value) {
  set_has_learned();
  learned_ = value;
}

// optional .mesos.internal.log.Action.Type type = 5;
inline bool Action::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::internal::log::Action_Type Action::type() const {
  return static_cast< ::mesos::internal::log::Action_Type >(type_);
}
inline void Action::set_type(::mesos::internal::log::Action_Type value) {
  assert(::mesos::internal::log::Action_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.internal.log.Action.Nop nop = 6;
inline bool Action::has_nop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Action::set_has_nop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Action::clear_has_nop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Action::clear_nop() {
  if (nop_ != NULL) nop_->::mesos::internal::log::Action_Nop::Clear();
  clear_has_nop();
}
inline const ::mesos::internal::log::Action_Nop& Action::nop() const {
  return nop_ != NULL ? *nop_ : *default_instance_->nop_;
}
inline ::mesos::internal::log::Action_Nop* Action::mutable_nop() {
  set_has_nop();
  if (nop_ == NULL) nop_ = new ::mesos::internal::log::Action_Nop;
  return nop_;
}
inline ::mesos::internal::log::Action_Nop* Action::release_nop() {
  clear_has_nop();
  ::mesos::internal::log::Action_Nop* temp = nop_;
  nop_ = NULL;
  return temp;
}
inline void Action::set_allocated_nop(::mesos::internal::log::Action_Nop* nop) {
  delete nop_;
  nop_ = nop;
  if (nop) {
    set_has_nop();
  } else {
    clear_has_nop();
  }
}

// optional .mesos.internal.log.Action.Append append = 7;
inline bool Action::has_append() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Action::set_has_append() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Action::clear_has_append() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Action::clear_append() {
  if (append_ != NULL) append_->::mesos::internal::log::Action_Append::Clear();
  clear_has_append();
}
inline const ::mesos::internal::log::Action_Append& Action::append() const {
  return append_ != NULL ? *append_ : *default_instance_->append_;
}
inline ::mesos::internal::log::Action_Append* Action::mutable_append() {
  set_has_append();
  if (append_ == NULL) append_ = new ::mesos::internal::log::Action_Append;
  return append_;
}
inline ::mesos::internal::log::Action_Append* Action::release_append() {
  clear_has_append();
  ::mesos::internal::log::Action_Append* temp = append_;
  append_ = NULL;
  return temp;
}
inline void Action::set_allocated_append(::mesos::internal::log::Action_Append* append) {
  delete append_;
  append_ = append;
  if (append) {
    set_has_append();
  } else {
    clear_has_append();
  }
}

// optional .mesos.internal.log.Action.Truncate truncate = 8;
inline bool Action::has_truncate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Action::set_has_truncate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Action::clear_has_truncate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Action::clear_truncate() {
  if (truncate_ != NULL) truncate_->::mesos::internal::log::Action_Truncate::Clear();
  clear_has_truncate();
}
inline const ::mesos::internal::log::Action_Truncate& Action::truncate() const {
  return truncate_ != NULL ? *truncate_ : *default_instance_->truncate_;
}
inline ::mesos::internal::log::Action_Truncate* Action::mutable_truncate() {
  set_has_truncate();
  if (truncate_ == NULL) truncate_ = new ::mesos::internal::log::Action_Truncate;
  return truncate_;
}
inline ::mesos::internal::log::Action_Truncate* Action::release_truncate() {
  clear_has_truncate();
  ::mesos::internal::log::Action_Truncate* temp = truncate_;
  truncate_ = NULL;
  return temp;
}
inline void Action::set_allocated_truncate(::mesos::internal::log::Action_Truncate* truncate) {
  delete truncate_;
  truncate_ = truncate;
  if (truncate) {
    set_has_truncate();
  } else {
    clear_has_truncate();
  }
}

// -------------------------------------------------------------------

// Metadata

// required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
inline bool Metadata::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_status() {
  status_ = 4;
  clear_has_status();
}
inline ::mesos::internal::log::Metadata_Status Metadata::status() const {
  return static_cast< ::mesos::internal::log::Metadata_Status >(status_);
}
inline void Metadata::set_status(::mesos::internal::log::Metadata_Status value) {
  assert(::mesos::internal::log::Metadata_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// required uint64 promised = 2 [default = 0];
inline bool Metadata::has_promised() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_promised() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_promised() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_promised() {
  promised_ = GOOGLE_ULONGLONG(0);
  clear_has_promised();
}
inline ::google::protobuf::uint64 Metadata::promised() const {
  return promised_;
}
inline void Metadata::set_promised(::google::protobuf::uint64 value) {
  set_has_promised();
  promised_ = value;
}

// -------------------------------------------------------------------

// Record

// required .mesos.internal.log.Record.Type type = 1;
inline bool Record::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::internal::log::Record_Type Record::type() const {
  return static_cast< ::mesos::internal::log::Record_Type >(type_);
}
inline void Record::set_type(::mesos::internal::log::Record_Type value) {
  assert(::mesos::internal::log::Record_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.internal.log.Promise promise = 2;
inline bool Record::has_promise() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_promise() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_promise() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_promise() {
  if (promise_ != NULL) promise_->::mesos::internal::log::Promise::Clear();
  clear_has_promise();
}
inline const ::mesos::internal::log::Promise& Record::promise() const {
  return promise_ != NULL ? *promise_ : *default_instance_->promise_;
}
inline ::mesos::internal::log::Promise* Record::mutable_promise() {
  set_has_promise();
  if (promise_ == NULL) promise_ = new ::mesos::internal::log::Promise;
  return promise_;
}
inline ::mesos::internal::log::Promise* Record::release_promise() {
  clear_has_promise();
  ::mesos::internal::log::Promise* temp = promise_;
  promise_ = NULL;
  return temp;
}
inline void Record::set_allocated_promise(::mesos::internal::log::Promise* promise) {
  delete promise_;
  promise_ = promise;
  if (promise) {
    set_has_promise();
  } else {
    clear_has_promise();
  }
}

// optional .mesos.internal.log.Action action = 3;
inline bool Record::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_action() {
  if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
  clear_has_action();
}
inline const ::mesos::internal::log::Action& Record::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::mesos::internal::log::Action* Record::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::mesos::internal::log::Action;
  return action_;
}
inline ::mesos::internal::log::Action* Record::release_action() {
  clear_has_action();
  ::mesos::internal::log::Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void Record::set_allocated_action(::mesos::internal::log::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// optional .mesos.internal.log.Metadata metadata = 4;
inline bool Record::has_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_metadata() {
  if (metadata_ != NULL) metadata_->::mesos::internal::log::Metadata::Clear();
  clear_has_metadata();
}
inline const ::mesos::internal::log::Metadata& Record::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::mesos::internal::log::Metadata* Record::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::mesos::internal::log::Metadata;
  return metadata_;
}
inline ::mesos::internal::log::Metadata* Record::release_metadata() {
  clear_has_metadata();
  ::mesos::internal::log::Metadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Record::set_allocated_metadata(::mesos::internal::log::Metadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
}

// -------------------------------------------------------------------

// PromiseRequest

// required uint64 proposal = 1;
inline bool PromiseRequest::has_proposal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PromiseRequest::set_has_proposal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PromiseRequest::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PromiseRequest::clear_proposal() {
  proposal_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal();
}
inline ::google::protobuf::uint64 PromiseRequest::proposal() const {
  return proposal_;
}
inline void PromiseRequest::set_proposal(::google::protobuf::uint64 value) {
  set_has_proposal();
  proposal_ = value;
}

// optional uint64 position = 2;
inline bool PromiseRequest::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PromiseRequest::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PromiseRequest::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PromiseRequest::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 PromiseRequest::position() const {
  return position_;
}
inline void PromiseRequest::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// PromiseResponse

// required bool okay = 1;
inline bool PromiseResponse::has_okay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PromiseResponse::set_has_okay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PromiseResponse::clear_has_okay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PromiseResponse::clear_okay() {
  okay_ = false;
  clear_has_okay();
}
inline bool PromiseResponse::okay() const {
  return okay_;
}
inline void PromiseResponse::set_okay(bool value) {
  set_has_okay();
  okay_ = value;
}

// required uint64 proposal = 2;
inline bool PromiseResponse::has_proposal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PromiseResponse::set_has_proposal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PromiseResponse::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PromiseResponse::clear_proposal() {
  proposal_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal();
}
inline ::google::protobuf::uint64 PromiseResponse::proposal() const {
  return proposal_;
}
inline void PromiseResponse::set_proposal(::google::protobuf::uint64 value) {
  set_has_proposal();
  proposal_ = value;
}

// optional uint64 position = 4;
inline bool PromiseResponse::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PromiseResponse::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PromiseResponse::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PromiseResponse::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 PromiseResponse::position() const {
  return position_;
}
inline void PromiseResponse::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// optional .mesos.internal.log.Action action = 3;
inline bool PromiseResponse::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PromiseResponse::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PromiseResponse::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PromiseResponse::clear_action() {
  if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
  clear_has_action();
}
inline const ::mesos::internal::log::Action& PromiseResponse::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::mesos::internal::log::Action* PromiseResponse::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::mesos::internal::log::Action;
  return action_;
}
inline ::mesos::internal::log::Action* PromiseResponse::release_action() {
  clear_has_action();
  ::mesos::internal::log::Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void PromiseResponse::set_allocated_action(::mesos::internal::log::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// -------------------------------------------------------------------

// WriteRequest

// required uint64 proposal = 1;
inline bool WriteRequest::has_proposal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteRequest::set_has_proposal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteRequest::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteRequest::clear_proposal() {
  proposal_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal();
}
inline ::google::protobuf::uint64 WriteRequest::proposal() const {
  return proposal_;
}
inline void WriteRequest::set_proposal(::google::protobuf::uint64 value) {
  set_has_proposal();
  proposal_ = value;
}

// required uint64 position = 2;
inline bool WriteRequest::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteRequest::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteRequest::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteRequest::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 WriteRequest::position() const {
  return position_;
}
inline void WriteRequest::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// optional bool learned = 3;
inline bool WriteRequest::has_learned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteRequest::set_has_learned() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteRequest::clear_has_learned() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteRequest::clear_learned() {
  learned_ = false;
  clear_has_learned();
}
inline bool WriteRequest::learned() const {
  return learned_;
}
inline void WriteRequest::set_learned(bool value) {
  set_has_learned();
  learned_ = value;
}

// required .mesos.internal.log.Action.Type type = 4;
inline bool WriteRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WriteRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WriteRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WriteRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::internal::log::Action_Type WriteRequest::type() const {
  return static_cast< ::mesos::internal::log::Action_Type >(type_);
}
inline void WriteRequest::set_type(::mesos::internal::log::Action_Type value) {
  assert(::mesos::internal::log::Action_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.internal.log.Action.Nop nop = 5;
inline bool WriteRequest::has_nop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WriteRequest::set_has_nop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WriteRequest::clear_has_nop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WriteRequest::clear_nop() {
  if (nop_ != NULL) nop_->::mesos::internal::log::Action_Nop::Clear();
  clear_has_nop();
}
inline const ::mesos::internal::log::Action_Nop& WriteRequest::nop() const {
  return nop_ != NULL ? *nop_ : *default_instance_->nop_;
}
inline ::mesos::internal::log::Action_Nop* WriteRequest::mutable_nop() {
  set_has_nop();
  if (nop_ == NULL) nop_ = new ::mesos::internal::log::Action_Nop;
  return nop_;
}
inline ::mesos::internal::log::Action_Nop* WriteRequest::release_nop() {
  clear_has_nop();
  ::mesos::internal::log::Action_Nop* temp = nop_;
  nop_ = NULL;
  return temp;
}
inline void WriteRequest::set_allocated_nop(::mesos::internal::log::Action_Nop* nop) {
  delete nop_;
  nop_ = nop;
  if (nop) {
    set_has_nop();
  } else {
    clear_has_nop();
  }
}

// optional .mesos.internal.log.Action.Append append = 6;
inline bool WriteRequest::has_append() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WriteRequest::set_has_append() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WriteRequest::clear_has_append() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WriteRequest::clear_append() {
  if (append_ != NULL) append_->::mesos::internal::log::Action_Append::Clear();
  clear_has_append();
}
inline const ::mesos::internal::log::Action_Append& WriteRequest::append() const {
  return append_ != NULL ? *append_ : *default_instance_->append_;
}
inline ::mesos::internal::log::Action_Append* WriteRequest::mutable_append() {
  set_has_append();
  if (append_ == NULL) append_ = new ::mesos::internal::log::Action_Append;
  return append_;
}
inline ::mesos::internal::log::Action_Append* WriteRequest::release_append() {
  clear_has_append();
  ::mesos::internal::log::Action_Append* temp = append_;
  append_ = NULL;
  return temp;
}
inline void WriteRequest::set_allocated_append(::mesos::internal::log::Action_Append* append) {
  delete append_;
  append_ = append;
  if (append) {
    set_has_append();
  } else {
    clear_has_append();
  }
}

// optional .mesos.internal.log.Action.Truncate truncate = 7;
inline bool WriteRequest::has_truncate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WriteRequest::set_has_truncate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WriteRequest::clear_has_truncate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WriteRequest::clear_truncate() {
  if (truncate_ != NULL) truncate_->::mesos::internal::log::Action_Truncate::Clear();
  clear_has_truncate();
}
inline const ::mesos::internal::log::Action_Truncate& WriteRequest::truncate() const {
  return truncate_ != NULL ? *truncate_ : *default_instance_->truncate_;
}
inline ::mesos::internal::log::Action_Truncate* WriteRequest::mutable_truncate() {
  set_has_truncate();
  if (truncate_ == NULL) truncate_ = new ::mesos::internal::log::Action_Truncate;
  return truncate_;
}
inline ::mesos::internal::log::Action_Truncate* WriteRequest::release_truncate() {
  clear_has_truncate();
  ::mesos::internal::log::Action_Truncate* temp = truncate_;
  truncate_ = NULL;
  return temp;
}
inline void WriteRequest::set_allocated_truncate(::mesos::internal::log::Action_Truncate* truncate) {
  delete truncate_;
  truncate_ = truncate;
  if (truncate) {
    set_has_truncate();
  } else {
    clear_has_truncate();
  }
}

// -------------------------------------------------------------------

// WriteResponse

// required bool okay = 1;
inline bool WriteResponse::has_okay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WriteResponse::set_has_okay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WriteResponse::clear_has_okay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WriteResponse::clear_okay() {
  okay_ = false;
  clear_has_okay();
}
inline bool WriteResponse::okay() const {
  return okay_;
}
inline void WriteResponse::set_okay(bool value) {
  set_has_okay();
  okay_ = value;
}

// required uint64 proposal = 2;
inline bool WriteResponse::has_proposal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WriteResponse::set_has_proposal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WriteResponse::clear_has_proposal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WriteResponse::clear_proposal() {
  proposal_ = GOOGLE_ULONGLONG(0);
  clear_has_proposal();
}
inline ::google::protobuf::uint64 WriteResponse::proposal() const {
  return proposal_;
}
inline void WriteResponse::set_proposal(::google::protobuf::uint64 value) {
  set_has_proposal();
  proposal_ = value;
}

// required uint64 position = 3;
inline bool WriteResponse::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WriteResponse::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WriteResponse::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WriteResponse::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 WriteResponse::position() const {
  return position_;
}
inline void WriteResponse::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// -------------------------------------------------------------------

// LearnedMessage

// required .mesos.internal.log.Action action = 1;
inline bool LearnedMessage::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearnedMessage::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearnedMessage::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearnedMessage::clear_action() {
  if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
  clear_has_action();
}
inline const ::mesos::internal::log::Action& LearnedMessage::action() const {
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::mesos::internal::log::Action* LearnedMessage::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::mesos::internal::log::Action;
  return action_;
}
inline ::mesos::internal::log::Action* LearnedMessage::release_action() {
  clear_has_action();
  ::mesos::internal::log::Action* temp = action_;
  action_ = NULL;
  return temp;
}
inline void LearnedMessage::set_allocated_action(::mesos::internal::log::Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
}

// -------------------------------------------------------------------

// RecoverRequest

// -------------------------------------------------------------------

// RecoverResponse

// required .mesos.internal.log.Metadata.Status status = 1;
inline bool RecoverResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::mesos::internal::log::Metadata_Status RecoverResponse::status() const {
  return static_cast< ::mesos::internal::log::Metadata_Status >(status_);
}
inline void RecoverResponse::set_status(::mesos::internal::log::Metadata_Status value) {
  assert(::mesos::internal::log::Metadata_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint64 begin = 2;
inline bool RecoverResponse::has_begin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverResponse::set_has_begin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverResponse::clear_has_begin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverResponse::clear_begin() {
  begin_ = GOOGLE_ULONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::uint64 RecoverResponse::begin() const {
  return begin_;
}
inline void RecoverResponse::set_begin(::google::protobuf::uint64 value) {
  set_has_begin();
  begin_ = value;
}

// optional uint64 end = 3;
inline bool RecoverResponse::has_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoverResponse::set_has_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoverResponse::clear_has_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoverResponse::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
  clear_has_end();
}
inline ::google::protobuf::uint64 RecoverResponse::end() const {
  return end_;
}
inline void RecoverResponse::set_end(::google::protobuf::uint64 value) {
  set_has_end();
  end_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace internal
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::internal::log::Action_Type>() {
  return ::mesos::internal::log::Action_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::internal::log::Metadata_Status>() {
  return ::mesos::internal::log::Metadata_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::internal::log::Record_Type>() {
  return ::mesos::internal::log::Record_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2flog_2eproto__INCLUDED
