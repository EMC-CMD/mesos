// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/flags.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/flags.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {

namespace {

const ::google::protobuf::Descriptor* Firewall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Firewall_reflection_ = NULL;
const ::google::protobuf::Descriptor* Firewall_DisabledEndpointsRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Firewall_DisabledEndpointsRule_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2fflags_2eproto() {
  protobuf_AddDesc_messages_2fflags_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/flags.proto");
  GOOGLE_CHECK(file != NULL);
  Firewall_descriptor_ = file->message_type(0);
  static const int Firewall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall, disabled_endpoints_),
  };
  Firewall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Firewall_descriptor_,
      Firewall::default_instance_,
      Firewall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Firewall));
  Firewall_DisabledEndpointsRule_descriptor_ = Firewall_descriptor_->nested_type(0);
  static const int Firewall_DisabledEndpointsRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall_DisabledEndpointsRule, paths_),
  };
  Firewall_DisabledEndpointsRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Firewall_DisabledEndpointsRule_descriptor_,
      Firewall_DisabledEndpointsRule::default_instance_,
      Firewall_DisabledEndpointsRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall_DisabledEndpointsRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Firewall_DisabledEndpointsRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Firewall_DisabledEndpointsRule));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2fflags_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Firewall_descriptor_, &Firewall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Firewall_DisabledEndpointsRule_descriptor_, &Firewall_DisabledEndpointsRule::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2fflags_2eproto() {
  delete Firewall::default_instance_;
  delete Firewall_reflection_;
  delete Firewall_DisabledEndpointsRule::default_instance_;
  delete Firewall_DisabledEndpointsRule_reflection_;
}

void protobuf_AddDesc_messages_2fflags_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024messages/flags.proto\022\016mesos.internal\032\021"
    "mesos/mesos.proto\"~\n\010Firewall\022J\n\022disable"
    "d_endpoints\030\001 \001(\0132..mesos.internal.Firew"
    "all.DisabledEndpointsRule\032&\n\025DisabledEnd"
    "pointsRule\022\r\n\005paths\030\001 \003(\t", 185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/flags.proto", &protobuf_RegisterTypes);
  Firewall::default_instance_ = new Firewall();
  Firewall_DisabledEndpointsRule::default_instance_ = new Firewall_DisabledEndpointsRule();
  Firewall::default_instance_->InitAsDefaultInstance();
  Firewall_DisabledEndpointsRule::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2fflags_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2fflags_2eproto {
  StaticDescriptorInitializer_messages_2fflags_2eproto() {
    protobuf_AddDesc_messages_2fflags_2eproto();
  }
} static_descriptor_initializer_messages_2fflags_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Firewall_DisabledEndpointsRule::kPathsFieldNumber;
#endif  // !_MSC_VER

Firewall_DisabledEndpointsRule::Firewall_DisabledEndpointsRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Firewall_DisabledEndpointsRule::InitAsDefaultInstance() {
}

Firewall_DisabledEndpointsRule::Firewall_DisabledEndpointsRule(const Firewall_DisabledEndpointsRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Firewall_DisabledEndpointsRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Firewall_DisabledEndpointsRule::~Firewall_DisabledEndpointsRule() {
  SharedDtor();
}

void Firewall_DisabledEndpointsRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Firewall_DisabledEndpointsRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Firewall_DisabledEndpointsRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Firewall_DisabledEndpointsRule_descriptor_;
}

const Firewall_DisabledEndpointsRule& Firewall_DisabledEndpointsRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2fflags_2eproto();
  return *default_instance_;
}

Firewall_DisabledEndpointsRule* Firewall_DisabledEndpointsRule::default_instance_ = NULL;

Firewall_DisabledEndpointsRule* Firewall_DisabledEndpointsRule::New() const {
  return new Firewall_DisabledEndpointsRule;
}

void Firewall_DisabledEndpointsRule::Clear() {
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Firewall_DisabledEndpointsRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string paths = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paths(this->paths_size() - 1).data(),
            this->paths(this->paths_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Firewall_DisabledEndpointsRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->paths(i).data(), this->paths(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Firewall_DisabledEndpointsRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string paths = 1;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paths(i).data(), this->paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Firewall_DisabledEndpointsRule::ByteSize() const {
  int total_size = 0;

  // repeated string paths = 1;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Firewall_DisabledEndpointsRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Firewall_DisabledEndpointsRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Firewall_DisabledEndpointsRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Firewall_DisabledEndpointsRule::MergeFrom(const Firewall_DisabledEndpointsRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Firewall_DisabledEndpointsRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Firewall_DisabledEndpointsRule::CopyFrom(const Firewall_DisabledEndpointsRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Firewall_DisabledEndpointsRule::IsInitialized() const {

  return true;
}

void Firewall_DisabledEndpointsRule::Swap(Firewall_DisabledEndpointsRule* other) {
  if (other != this) {
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Firewall_DisabledEndpointsRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Firewall_DisabledEndpointsRule_descriptor_;
  metadata.reflection = Firewall_DisabledEndpointsRule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Firewall::kDisabledEndpointsFieldNumber;
#endif  // !_MSC_VER

Firewall::Firewall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Firewall::InitAsDefaultInstance() {
  disabled_endpoints_ = const_cast< ::mesos::internal::Firewall_DisabledEndpointsRule*>(&::mesos::internal::Firewall_DisabledEndpointsRule::default_instance());
}

Firewall::Firewall(const Firewall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Firewall::SharedCtor() {
  _cached_size_ = 0;
  disabled_endpoints_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Firewall::~Firewall() {
  SharedDtor();
}

void Firewall::SharedDtor() {
  if (this != default_instance_) {
    delete disabled_endpoints_;
  }
}

void Firewall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Firewall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Firewall_descriptor_;
}

const Firewall& Firewall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2fflags_2eproto();
  return *default_instance_;
}

Firewall* Firewall::default_instance_ = NULL;

Firewall* Firewall::New() const {
  return new Firewall;
}

void Firewall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_disabled_endpoints()) {
      if (disabled_endpoints_ != NULL) disabled_endpoints_->::mesos::internal::Firewall_DisabledEndpointsRule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Firewall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.internal.Firewall.DisabledEndpointsRule disabled_endpoints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disabled_endpoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Firewall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.internal.Firewall.DisabledEndpointsRule disabled_endpoints = 1;
  if (has_disabled_endpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->disabled_endpoints(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Firewall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.internal.Firewall.DisabledEndpointsRule disabled_endpoints = 1;
  if (has_disabled_endpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->disabled_endpoints(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Firewall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.internal.Firewall.DisabledEndpointsRule disabled_endpoints = 1;
    if (has_disabled_endpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disabled_endpoints());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Firewall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Firewall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Firewall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Firewall::MergeFrom(const Firewall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disabled_endpoints()) {
      mutable_disabled_endpoints()->::mesos::internal::Firewall_DisabledEndpointsRule::MergeFrom(from.disabled_endpoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Firewall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Firewall::CopyFrom(const Firewall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Firewall::IsInitialized() const {

  return true;
}

void Firewall::Swap(Firewall* other) {
  if (other != this) {
    std::swap(disabled_endpoints_, other->disabled_endpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Firewall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Firewall_descriptor_;
  metadata.reflection = Firewall_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
