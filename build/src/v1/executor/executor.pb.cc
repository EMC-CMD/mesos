// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/v1/executor/executor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos/v1/executor/executor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace v1 {
namespace executor {

namespace {

const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Subscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Subscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Launch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Launch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Kill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Kill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Acknowledged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Acknowledged_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_Update_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_Update_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Call_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto() {
  protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos/v1/executor/executor.proto");
  GOOGLE_CHECK(file != NULL);
  Event_descriptor_ = file->message_type(0);
  static const int Event_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, subscribed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, acknowledged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, launch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, error_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_Subscribed_descriptor_ = Event_descriptor_->nested_type(0);
  static const int Event_Subscribed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, executor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, framework_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, agent_info_),
  };
  Event_Subscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Subscribed_descriptor_,
      Event_Subscribed::default_instance_,
      Event_Subscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Subscribed));
  Event_Launch_descriptor_ = Event_descriptor_->nested_type(1);
  static const int Event_Launch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Launch, task_),
  };
  Event_Launch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Launch_descriptor_,
      Event_Launch::default_instance_,
      Event_Launch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Launch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Launch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Launch));
  Event_Kill_descriptor_ = Event_descriptor_->nested_type(2);
  static const int Event_Kill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Kill, task_id_),
  };
  Event_Kill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Kill_descriptor_,
      Event_Kill::default_instance_,
      Event_Kill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Kill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Kill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Kill));
  Event_Acknowledged_descriptor_ = Event_descriptor_->nested_type(3);
  static const int Event_Acknowledged_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Acknowledged, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Acknowledged, uuid_),
  };
  Event_Acknowledged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Acknowledged_descriptor_,
      Event_Acknowledged::default_instance_,
      Event_Acknowledged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Acknowledged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Acknowledged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Acknowledged));
  Event_Message_descriptor_ = Event_descriptor_->nested_type(4);
  static const int Event_Message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Message, data_),
  };
  Event_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Message_descriptor_,
      Event_Message::default_instance_,
      Event_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Message));
  Event_Error_descriptor_ = Event_descriptor_->nested_type(5);
  static const int Event_Error_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Error, message_),
  };
  Event_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Error_descriptor_,
      Event_Error::default_instance_,
      Event_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Error));
  Event_Type_descriptor_ = Event_descriptor_->enum_type(0);
  Call_descriptor_ = file->message_type(1);
  static const int Call_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, executor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, message_),
  };
  Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_descriptor_,
      Call::default_instance_,
      Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call));
  Call_Subscribe_descriptor_ = Call_descriptor_->nested_type(0);
  static const int Call_Subscribe_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Subscribe, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Subscribe, updates_),
  };
  Call_Subscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_Subscribe_descriptor_,
      Call_Subscribe::default_instance_,
      Call_Subscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Subscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Subscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_Subscribe));
  Call_Update_descriptor_ = Call_descriptor_->nested_type(1);
  static const int Call_Update_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Update, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Update, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Update, uuid_),
  };
  Call_Update_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_Update_descriptor_,
      Call_Update::default_instance_,
      Call_Update_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Update, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Update, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_Update));
  Call_Message_descriptor_ = Call_descriptor_->nested_type(2);
  static const int Call_Message_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Message, data_),
  };
  Call_Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_Message_descriptor_,
      Call_Message::default_instance_,
      Call_Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_Message));
  Call_Type_descriptor_ = Call_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Subscribed_descriptor_, &Event_Subscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Launch_descriptor_, &Event_Launch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Kill_descriptor_, &Event_Kill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Acknowledged_descriptor_, &Event_Acknowledged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Message_descriptor_, &Event_Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Error_descriptor_, &Event_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_descriptor_, &Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_Subscribe_descriptor_, &Call_Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_Update_descriptor_, &Call_Update::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_Message_descriptor_, &Call_Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto() {
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Event_Subscribed::default_instance_;
  delete Event_Subscribed_reflection_;
  delete Event_Launch::default_instance_;
  delete Event_Launch_reflection_;
  delete Event_Kill::default_instance_;
  delete Event_Kill_reflection_;
  delete Event_Acknowledged::default_instance_;
  delete Event_Acknowledged_reflection_;
  delete Event_Message::default_instance_;
  delete Event_Message_reflection_;
  delete Event_Error::default_instance_;
  delete Event_Error_reflection_;
  delete Call::default_instance_;
  delete Call_reflection_;
  delete Call_Subscribe::default_instance_;
  delete Call_Subscribe_reflection_;
  delete Call_Update::default_instance_;
  delete Call_Update_reflection_;
  delete Call_Message::default_instance_;
  delete Call_Message_reflection_;
}

void protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::v1::protobuf_AddDesc_mesos_2fv1_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n mesos/v1/executor/executor.proto\022\021meso"
    "s.v1.executor\032\024mesos/v1/mesos.proto\"\263\006\n\005"
    "Event\022+\n\004type\030\001 \002(\0162\035.mesos.v1.executor."
    "Event.Type\0227\n\nsubscribed\030\002 \001(\0132#.mesos.v"
    "1.executor.Event.Subscribed\022;\n\014acknowled"
    "ged\030\003 \001(\0132%.mesos.v1.executor.Event.Ackn"
    "owledged\022/\n\006launch\030\004 \001(\0132\037.mesos.v1.exec"
    "utor.Event.Launch\022+\n\004kill\030\005 \001(\0132\035.mesos."
    "v1.executor.Event.Kill\0221\n\007message\030\006 \001(\0132"
    " .mesos.v1.executor.Event.Message\022-\n\005err"
    "or\030\007 \001(\0132\036.mesos.v1.executor.Event.Error"
    "\032\225\001\n\nSubscribed\022-\n\rexecutor_info\030\001 \002(\0132\026"
    ".mesos.v1.ExecutorInfo\022/\n\016framework_info"
    "\030\002 \002(\0132\027.mesos.v1.FrameworkInfo\022\'\n\nagent"
    "_info\030\003 \002(\0132\023.mesos.v1.AgentInfo\032*\n\006Laun"
    "ch\022 \n\004task\030\001 \002(\0132\022.mesos.v1.TaskInfo\032)\n\004"
    "Kill\022!\n\007task_id\030\001 \002(\0132\020.mesos.v1.TaskID\032"
    "\?\n\014Acknowledged\022!\n\007task_id\030\001 \002(\0132\020.mesos"
    ".v1.TaskID\022\014\n\004uuid\030\002 \002(\014\032\027\n\007Message\022\014\n\004d"
    "ata\030\001 \002(\014\032\030\n\005Error\022\017\n\007message\030\001 \002(\t\"d\n\004T"
    "ype\022\016\n\nSUBSCRIBED\020\001\022\n\n\006LAUNCH\020\002\022\010\n\004KILL\020"
    "\003\022\020\n\014ACKNOWLEDGED\020\004\022\013\n\007MESSAGE\020\005\022\014\n\010SHUT"
    "DOWN\020\006\022\t\n\005ERROR\020\007\"\235\004\n\004Call\022)\n\013executor_i"
    "d\030\001 \002(\0132\024.mesos.v1.ExecutorID\022+\n\014framewo"
    "rk_id\030\002 \002(\0132\025.mesos.v1.FrameworkID\022*\n\004ty"
    "pe\030\003 \002(\0162\034.mesos.v1.executor.Call.Type\0224"
    "\n\tsubscribe\030\004 \001(\0132!.mesos.v1.executor.Ca"
    "ll.Subscribe\022.\n\006update\030\005 \001(\0132\036.mesos.v1."
    "executor.Call.Update\0220\n\007message\030\006 \001(\0132\037."
    "mesos.v1.executor.Call.Message\032_\n\tSubscr"
    "ibe\022!\n\005tasks\030\001 \003(\0132\022.mesos.v1.TaskInfo\022/"
    "\n\007updates\030\002 \003(\0132\036.mesos.v1.executor.Call"
    ".Update\032O\n\006Update\022$\n\006status\030\001 \002(\0132\024.meso"
    "s.v1.TaskStatus\022\021\n\ttimestamp\030\002 \002(\001\022\014\n\004uu"
    "id\030\003 \002(\014\032\027\n\007Message\022\014\n\004data\030\002 \002(\014\".\n\004Typ"
    "e\022\r\n\tSUBSCRIBE\020\001\022\n\n\006UPDATE\020\002\022\013\n\007MESSAGE\020"
    "\003B&\n\034org.apache.mesos.v1.executorB\006Proto"
    "s", 1481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos/v1/executor/executor.proto", &protobuf_RegisterTypes);
  Event::default_instance_ = new Event();
  Event_Subscribed::default_instance_ = new Event_Subscribed();
  Event_Launch::default_instance_ = new Event_Launch();
  Event_Kill::default_instance_ = new Event_Kill();
  Event_Acknowledged::default_instance_ = new Event_Acknowledged();
  Event_Message::default_instance_ = new Event_Message();
  Event_Error::default_instance_ = new Event_Error();
  Call::default_instance_ = new Call();
  Call_Subscribe::default_instance_ = new Call_Subscribe();
  Call_Update::default_instance_ = new Call_Update();
  Call_Message::default_instance_ = new Call_Message();
  Event::default_instance_->InitAsDefaultInstance();
  Event_Subscribed::default_instance_->InitAsDefaultInstance();
  Event_Launch::default_instance_->InitAsDefaultInstance();
  Event_Kill::default_instance_->InitAsDefaultInstance();
  Event_Acknowledged::default_instance_->InitAsDefaultInstance();
  Event_Message::default_instance_->InitAsDefaultInstance();
  Event_Error::default_instance_->InitAsDefaultInstance();
  Call::default_instance_->InitAsDefaultInstance();
  Call_Subscribe::default_instance_->InitAsDefaultInstance();
  Call_Update::default_instance_->InitAsDefaultInstance();
  Call_Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2fv1_2fexecutor_2fexecutor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2fv1_2fexecutor_2fexecutor_2eproto {
  StaticDescriptorInitializer_mesos_2fv1_2fexecutor_2fexecutor_2eproto() {
    protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  }
} static_descriptor_initializer_mesos_2fv1_2fexecutor_2fexecutor_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Type_descriptor_;
}
bool Event_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Type Event::SUBSCRIBED;
const Event_Type Event::LAUNCH;
const Event_Type Event::KILL;
const Event_Type Event::ACKNOWLEDGED;
const Event_Type Event::MESSAGE;
const Event_Type Event::SHUTDOWN;
const Event_Type Event::ERROR;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event_Subscribed::kExecutorInfoFieldNumber;
const int Event_Subscribed::kFrameworkInfoFieldNumber;
const int Event_Subscribed::kAgentInfoFieldNumber;
#endif  // !_MSC_VER

Event_Subscribed::Event_Subscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Subscribed::InitAsDefaultInstance() {
  executor_info_ = const_cast< ::mesos::v1::ExecutorInfo*>(&::mesos::v1::ExecutorInfo::default_instance());
  framework_info_ = const_cast< ::mesos::v1::FrameworkInfo*>(&::mesos::v1::FrameworkInfo::default_instance());
  agent_info_ = const_cast< ::mesos::v1::AgentInfo*>(&::mesos::v1::AgentInfo::default_instance());
}

Event_Subscribed::Event_Subscribed(const Event_Subscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Subscribed::SharedCtor() {
  _cached_size_ = 0;
  executor_info_ = NULL;
  framework_info_ = NULL;
  agent_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Subscribed::~Event_Subscribed() {
  SharedDtor();
}

void Event_Subscribed::SharedDtor() {
  if (this != default_instance_) {
    delete executor_info_;
    delete framework_info_;
    delete agent_info_;
  }
}

void Event_Subscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Subscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Subscribed_descriptor_;
}

const Event_Subscribed& Event_Subscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Subscribed* Event_Subscribed::default_instance_ = NULL;

Event_Subscribed* Event_Subscribed::New() const {
  return new Event_Subscribed;
}

void Event_Subscribed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executor_info()) {
      if (executor_info_ != NULL) executor_info_->::mesos::v1::ExecutorInfo::Clear();
    }
    if (has_framework_info()) {
      if (framework_info_ != NULL) framework_info_->::mesos::v1::FrameworkInfo::Clear();
    }
    if (has_agent_info()) {
      if (agent_info_ != NULL) agent_info_->::mesos::v1::AgentInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Subscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.ExecutorInfo executor_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_info;
        break;
      }

      // required .mesos.v1.FrameworkInfo framework_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agent_info;
        break;
      }

      // required .mesos.v1.AgentInfo agent_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Subscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_info(), output);
  }

  // required .mesos.v1.FrameworkInfo framework_info = 2;
  if (has_framework_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_info(), output);
  }

  // required .mesos.v1.AgentInfo agent_info = 3;
  if (has_agent_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agent_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Subscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_info(), target);
  }

  // required .mesos.v1.FrameworkInfo framework_info = 2;
  if (has_framework_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_info(), target);
  }

  // required .mesos.v1.AgentInfo agent_info = 3;
  if (has_agent_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agent_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Subscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.ExecutorInfo executor_info = 1;
    if (has_executor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_info());
    }

    // required .mesos.v1.FrameworkInfo framework_info = 2;
    if (has_framework_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_info());
    }

    // required .mesos.v1.AgentInfo agent_info = 3;
    if (has_agent_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Subscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Subscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Subscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Subscribed::MergeFrom(const Event_Subscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_info()) {
      mutable_executor_info()->::mesos::v1::ExecutorInfo::MergeFrom(from.executor_info());
    }
    if (from.has_framework_info()) {
      mutable_framework_info()->::mesos::v1::FrameworkInfo::MergeFrom(from.framework_info());
    }
    if (from.has_agent_info()) {
      mutable_agent_info()->::mesos::v1::AgentInfo::MergeFrom(from.agent_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Subscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Subscribed::CopyFrom(const Event_Subscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Subscribed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_executor_info()) {
    if (!this->executor_info().IsInitialized()) return false;
  }
  if (has_framework_info()) {
    if (!this->framework_info().IsInitialized()) return false;
  }
  if (has_agent_info()) {
    if (!this->agent_info().IsInitialized()) return false;
  }
  return true;
}

void Event_Subscribed::Swap(Event_Subscribed* other) {
  if (other != this) {
    std::swap(executor_info_, other->executor_info_);
    std::swap(framework_info_, other->framework_info_);
    std::swap(agent_info_, other->agent_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Subscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Subscribed_descriptor_;
  metadata.reflection = Event_Subscribed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_Launch::kTaskFieldNumber;
#endif  // !_MSC_VER

Event_Launch::Event_Launch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Launch::InitAsDefaultInstance() {
  task_ = const_cast< ::mesos::v1::TaskInfo*>(&::mesos::v1::TaskInfo::default_instance());
}

Event_Launch::Event_Launch(const Event_Launch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Launch::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Launch::~Event_Launch() {
  SharedDtor();
}

void Event_Launch::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void Event_Launch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Launch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Launch_descriptor_;
}

const Event_Launch& Event_Launch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Launch* Event_Launch::default_instance_ = NULL;

Event_Launch* Event_Launch::New() const {
  return new Event_Launch;
}

void Event_Launch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::mesos::v1::TaskInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Launch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TaskInfo task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Launch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TaskInfo task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Launch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TaskInfo task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Launch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TaskInfo task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Launch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Launch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Launch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Launch::MergeFrom(const Event_Launch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::mesos::v1::TaskInfo::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Launch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Launch::CopyFrom(const Event_Launch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Launch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void Event_Launch::Swap(Event_Launch* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Launch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Launch_descriptor_;
  metadata.reflection = Event_Launch_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_Kill::kTaskIdFieldNumber;
#endif  // !_MSC_VER

Event_Kill::Event_Kill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Kill::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::v1::TaskID*>(&::mesos::v1::TaskID::default_instance());
}

Event_Kill::Event_Kill(const Event_Kill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Kill::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Kill::~Event_Kill() {
  SharedDtor();
}

void Event_Kill::SharedDtor() {
  if (this != default_instance_) {
    delete task_id_;
  }
}

void Event_Kill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Kill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Kill_descriptor_;
}

const Event_Kill& Event_Kill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Kill* Event_Kill::default_instance_ = NULL;

Event_Kill* Event_Kill::New() const {
  return new Event_Kill;
}

void Event_Kill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Kill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TaskID task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Kill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Kill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Kill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TaskID task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Kill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Kill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Kill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Kill::MergeFrom(const Event_Kill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      mutable_task_id()->::mesos::v1::TaskID::MergeFrom(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Kill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Kill::CopyFrom(const Event_Kill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Kill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  return true;
}

void Event_Kill::Swap(Event_Kill* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Kill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Kill_descriptor_;
  metadata.reflection = Event_Kill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_Acknowledged::kTaskIdFieldNumber;
const int Event_Acknowledged::kUuidFieldNumber;
#endif  // !_MSC_VER

Event_Acknowledged::Event_Acknowledged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Acknowledged::InitAsDefaultInstance() {
  task_id_ = const_cast< ::mesos::v1::TaskID*>(&::mesos::v1::TaskID::default_instance());
}

Event_Acknowledged::Event_Acknowledged(const Event_Acknowledged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Acknowledged::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = NULL;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Acknowledged::~Event_Acknowledged() {
  SharedDtor();
}

void Event_Acknowledged::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete task_id_;
  }
}

void Event_Acknowledged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Acknowledged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Acknowledged_descriptor_;
}

const Event_Acknowledged& Event_Acknowledged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Acknowledged* Event_Acknowledged::default_instance_ = NULL;

Event_Acknowledged* Event_Acknowledged::New() const {
  return new Event_Acknowledged;
}

void Event_Acknowledged::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != NULL) task_id_->::mesos::v1::TaskID::Clear();
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Acknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TaskID task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Acknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_id(), output);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Acknowledged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TaskID task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_id(), target);
  }

  // required bytes uuid = 2;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Acknowledged::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TaskID task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_id());
    }

    // required bytes uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Acknowledged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Acknowledged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Acknowledged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Acknowledged::MergeFrom(const Event_Acknowledged& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      mutable_task_id()->::mesos::v1::TaskID::MergeFrom(from.task_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Acknowledged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Acknowledged::CopyFrom(const Event_Acknowledged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Acknowledged::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_task_id()) {
    if (!this->task_id().IsInitialized()) return false;
  }
  return true;
}

void Event_Acknowledged::Swap(Event_Acknowledged* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Acknowledged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Acknowledged_descriptor_;
  metadata.reflection = Event_Acknowledged_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_Message::kDataFieldNumber;
#endif  // !_MSC_VER

Event_Message::Event_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Message::InitAsDefaultInstance() {
}

Event_Message::Event_Message(const Event_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Message::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Message::~Event_Message() {
  SharedDtor();
}

void Event_Message::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Event_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Message_descriptor_;
}

const Event_Message& Event_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Message* Event_Message::default_instance_ = NULL;

Event_Message* Event_Message::New() const {
  return new Event_Message;
}

void Event_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Message::MergeFrom(const Event_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Message::CopyFrom(const Event_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event_Message::Swap(Event_Message* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Message_descriptor_;
  metadata.reflection = Event_Message_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_Error::kMessageFieldNumber;
#endif  // !_MSC_VER

Event_Error::Event_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event_Error::InitAsDefaultInstance() {
}

Event_Error::Event_Error(const Event_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event_Error::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Error::~Event_Error() {
  SharedDtor();
}

void Event_Error::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void Event_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Error_descriptor_;
}

const Event_Error& Event_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event_Error* Event_Error::default_instance_ = NULL;

Event_Error* Event_Error::New() const {
  return new Event_Error;
}

void Event_Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Error::MergeFrom(const Event_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Error::CopyFrom(const Event_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Event_Error::Swap(Event_Error* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Error_descriptor_;
  metadata.reflection = Event_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event::kTypeFieldNumber;
const int Event::kSubscribedFieldNumber;
const int Event::kAcknowledgedFieldNumber;
const int Event::kLaunchFieldNumber;
const int Event::kKillFieldNumber;
const int Event::kMessageFieldNumber;
const int Event::kErrorFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
  subscribed_ = const_cast< ::mesos::v1::executor::Event_Subscribed*>(&::mesos::v1::executor::Event_Subscribed::default_instance());
  acknowledged_ = const_cast< ::mesos::v1::executor::Event_Acknowledged*>(&::mesos::v1::executor::Event_Acknowledged::default_instance());
  launch_ = const_cast< ::mesos::v1::executor::Event_Launch*>(&::mesos::v1::executor::Event_Launch::default_instance());
  kill_ = const_cast< ::mesos::v1::executor::Event_Kill*>(&::mesos::v1::executor::Event_Kill::default_instance());
  message_ = const_cast< ::mesos::v1::executor::Event_Message*>(&::mesos::v1::executor::Event_Message::default_instance());
  error_ = const_cast< ::mesos::v1::executor::Event_Error*>(&::mesos::v1::executor::Event_Error::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  subscribed_ = NULL;
  acknowledged_ = NULL;
  launch_ = NULL;
  kill_ = NULL;
  message_ = NULL;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete subscribed_;
    delete acknowledged_;
    delete launch_;
    delete kill_;
    delete message_;
    delete error_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_subscribed()) {
      if (subscribed_ != NULL) subscribed_->::mesos::v1::executor::Event_Subscribed::Clear();
    }
    if (has_acknowledged()) {
      if (acknowledged_ != NULL) acknowledged_->::mesos::v1::executor::Event_Acknowledged::Clear();
    }
    if (has_launch()) {
      if (launch_ != NULL) launch_->::mesos::v1::executor::Event_Launch::Clear();
    }
    if (has_kill()) {
      if (kill_ != NULL) kill_->::mesos::v1::executor::Event_Kill::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::mesos::v1::executor::Event_Message::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::mesos::v1::executor::Event_Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.executor.Event.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::executor::Event_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::executor::Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscribed;
        break;
      }

      // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acknowledged;
        break;
      }

      // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acknowledged:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acknowledged()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_launch;
        break;
      }

      // optional .mesos.v1.executor.Event.Launch launch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_launch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_launch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_kill;
        break;
      }

      // optional .mesos.v1.executor.Event.Kill kill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional .mesos.v1.executor.Event.Message message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_error;
        break;
      }

      // optional .mesos.v1.executor.Event.Error error = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.executor.Event.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
  if (has_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscribed(), output);
  }

  // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
  if (has_acknowledged()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->acknowledged(), output);
  }

  // optional .mesos.v1.executor.Event.Launch launch = 4;
  if (has_launch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->launch(), output);
  }

  // optional .mesos.v1.executor.Event.Kill kill = 5;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kill(), output);
  }

  // optional .mesos.v1.executor.Event.Message message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->message(), output);
  }

  // optional .mesos.v1.executor.Event.Error error = 7;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.executor.Event.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
  if (has_subscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscribed(), target);
  }

  // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
  if (has_acknowledged()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->acknowledged(), target);
  }

  // optional .mesos.v1.executor.Event.Launch launch = 4;
  if (has_launch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->launch(), target);
  }

  // optional .mesos.v1.executor.Event.Kill kill = 5;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->kill(), target);
  }

  // optional .mesos.v1.executor.Event.Message message = 6;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->message(), target);
  }

  // optional .mesos.v1.executor.Event.Error error = 7;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.executor.Event.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.executor.Event.Subscribed subscribed = 2;
    if (has_subscribed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribed());
    }

    // optional .mesos.v1.executor.Event.Acknowledged acknowledged = 3;
    if (has_acknowledged()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acknowledged());
    }

    // optional .mesos.v1.executor.Event.Launch launch = 4;
    if (has_launch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->launch());
    }

    // optional .mesos.v1.executor.Event.Kill kill = 5;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kill());
    }

    // optional .mesos.v1.executor.Event.Message message = 6;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

    // optional .mesos.v1.executor.Event.Error error = 7;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subscribed()) {
      mutable_subscribed()->::mesos::v1::executor::Event_Subscribed::MergeFrom(from.subscribed());
    }
    if (from.has_acknowledged()) {
      mutable_acknowledged()->::mesos::v1::executor::Event_Acknowledged::MergeFrom(from.acknowledged());
    }
    if (from.has_launch()) {
      mutable_launch()->::mesos::v1::executor::Event_Launch::MergeFrom(from.launch());
    }
    if (from.has_kill()) {
      mutable_kill()->::mesos::v1::executor::Event_Kill::MergeFrom(from.kill());
    }
    if (from.has_message()) {
      mutable_message()->::mesos::v1::executor::Event_Message::MergeFrom(from.message());
    }
    if (from.has_error()) {
      mutable_error()->::mesos::v1::executor::Event_Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_subscribed()) {
    if (!this->subscribed().IsInitialized()) return false;
  }
  if (has_acknowledged()) {
    if (!this->acknowledged().IsInitialized()) return false;
  }
  if (has_launch()) {
    if (!this->launch().IsInitialized()) return false;
  }
  if (has_kill()) {
    if (!this->kill().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(subscribed_, other->subscribed_);
    std::swap(acknowledged_, other->acknowledged_);
    std::swap(launch_, other->launch_);
    std::swap(kill_, other->kill_);
    std::swap(message_, other->message_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Type_descriptor_;
}
bool Call_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Call_Type Call::SUBSCRIBE;
const Call_Type Call::UPDATE;
const Call_Type Call::MESSAGE;
const Call_Type Call::Type_MIN;
const Call_Type Call::Type_MAX;
const int Call::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Call_Subscribe::kTasksFieldNumber;
const int Call_Subscribe::kUpdatesFieldNumber;
#endif  // !_MSC_VER

Call_Subscribe::Call_Subscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call_Subscribe::InitAsDefaultInstance() {
}

Call_Subscribe::Call_Subscribe(const Call_Subscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call_Subscribe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_Subscribe::~Call_Subscribe() {
  SharedDtor();
}

void Call_Subscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call_Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Subscribe_descriptor_;
}

const Call_Subscribe& Call_Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Call_Subscribe* Call_Subscribe::default_instance_ = NULL;

Call_Subscribe* Call_Subscribe::New() const {
  return new Call_Subscribe;
}

void Call_Subscribe::Clear() {
  tasks_.Clear();
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.v1.TaskInfo tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(18)) goto parse_updates;
        break;
      }

      // repeated .mesos.v1.executor.Call.Update updates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call_Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.v1.TaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  // repeated .mesos.v1.executor.Call.Update updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call_Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.v1.TaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  // repeated .mesos.v1.executor.Call.Update updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call_Subscribe::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.v1.TaskInfo tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated .mesos.v1.executor.Call.Update updates = 2;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_Subscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_Subscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_Subscribe::MergeFrom(const Call_Subscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  updates_.MergeFrom(from.updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_Subscribe::CopyFrom(const Call_Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_Subscribe::IsInitialized() const {

  for (int i = 0; i < tasks_size(); i++) {
    if (!this->tasks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < updates_size(); i++) {
    if (!this->updates(i).IsInitialized()) return false;
  }
  return true;
}

void Call_Subscribe::Swap(Call_Subscribe* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_Subscribe_descriptor_;
  metadata.reflection = Call_Subscribe_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_Update::kStatusFieldNumber;
const int Call_Update::kTimestampFieldNumber;
const int Call_Update::kUuidFieldNumber;
#endif  // !_MSC_VER

Call_Update::Call_Update()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call_Update::InitAsDefaultInstance() {
  status_ = const_cast< ::mesos::v1::TaskStatus*>(&::mesos::v1::TaskStatus::default_instance());
}

Call_Update::Call_Update(const Call_Update& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call_Update::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  timestamp_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_Update::~Call_Update() {
  SharedDtor();
}

void Call_Update::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void Call_Update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_Update::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Update_descriptor_;
}

const Call_Update& Call_Update::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Call_Update* Call_Update::default_instance_ = NULL;

Call_Update* Call_Update::New() const {
  return new Call_Update;
}

void Call_Update::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::mesos::v1::TaskStatus::Clear();
    }
    timestamp_ = 0;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.TaskStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // required double timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }

      // required bytes uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.TaskStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // required bytes uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call_Update::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.TaskStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  // required double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // required bytes uuid = 3;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call_Update::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.TaskStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // required bytes uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_Update::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_Update* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_Update*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_Update::MergeFrom(const Call_Update& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::mesos::v1::TaskStatus::MergeFrom(from.status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_Update::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_Update::CopyFrom(const Call_Update& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_Update::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Call_Update::Swap(Call_Update* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_Update::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_Update_descriptor_;
  metadata.reflection = Call_Update_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_Message::kDataFieldNumber;
#endif  // !_MSC_VER

Call_Message::Call_Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call_Message::InitAsDefaultInstance() {
}

Call_Message::Call_Message(const Call_Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call_Message::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_Message::~Call_Message() {
  SharedDtor();
}

void Call_Message::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Call_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Message_descriptor_;
}

const Call_Message& Call_Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Call_Message* Call_Message::default_instance_ = NULL;

Call_Message* Call_Message::New() const {
  return new Call_Message;
}

void Call_Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call_Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call_Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_Message::MergeFrom(const Call_Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_Message::CopyFrom(const Call_Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Call_Message::Swap(Call_Message* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_Message_descriptor_;
  metadata.reflection = Call_Message_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call::kExecutorIdFieldNumber;
const int Call::kFrameworkIdFieldNumber;
const int Call::kTypeFieldNumber;
const int Call::kSubscribeFieldNumber;
const int Call::kUpdateFieldNumber;
const int Call::kMessageFieldNumber;
#endif  // !_MSC_VER

Call::Call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Call::InitAsDefaultInstance() {
  executor_id_ = const_cast< ::mesos::v1::ExecutorID*>(&::mesos::v1::ExecutorID::default_instance());
  framework_id_ = const_cast< ::mesos::v1::FrameworkID*>(&::mesos::v1::FrameworkID::default_instance());
  subscribe_ = const_cast< ::mesos::v1::executor::Call_Subscribe*>(&::mesos::v1::executor::Call_Subscribe::default_instance());
  update_ = const_cast< ::mesos::v1::executor::Call_Update*>(&::mesos::v1::executor::Call_Update::default_instance());
  message_ = const_cast< ::mesos::v1::executor::Call_Message*>(&::mesos::v1::executor::Call_Message::default_instance());
}

Call::Call(const Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Call::SharedCtor() {
  _cached_size_ = 0;
  executor_id_ = NULL;
  framework_id_ = NULL;
  type_ = 1;
  subscribe_ = NULL;
  update_ = NULL;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call::~Call() {
  SharedDtor();
}

void Call::SharedDtor() {
  if (this != default_instance_) {
    delete executor_id_;
    delete framework_id_;
    delete subscribe_;
    delete update_;
    delete message_;
  }
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_descriptor_;
}

const Call& Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fv1_2fexecutor_2fexecutor_2eproto();
  return *default_instance_;
}

Call* Call::default_instance_ = NULL;

Call* Call::New() const {
  return new Call;
}

void Call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executor_id()) {
      if (executor_id_ != NULL) executor_id_->::mesos::v1::ExecutorID::Clear();
    }
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::v1::FrameworkID::Clear();
    }
    type_ = 1;
    if (has_subscribe()) {
      if (subscribe_ != NULL) subscribe_->::mesos::v1::executor::Call_Subscribe::Clear();
    }
    if (has_update()) {
      if (update_ != NULL) update_->::mesos::v1::executor::Call_Update::Clear();
    }
    if (has_message()) {
      if (message_ != NULL) message_->::mesos::v1::executor::Call_Message::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.v1.ExecutorID executor_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_id;
        break;
      }

      // required .mesos.v1.FrameworkID framework_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .mesos.v1.executor.Call.Type type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::v1::executor::Call_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::v1::executor::Call_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subscribe;
        break;
      }

      // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_update;
        break;
      }

      // optional .mesos.v1.executor.Call.Update update = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }

      // optional .mesos.v1.executor.Call.Message message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.v1.ExecutorID executor_id = 1;
  if (has_executor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_id(), output);
  }

  // required .mesos.v1.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_id(), output);
  }

  // required .mesos.v1.executor.Call.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subscribe(), output);
  }

  // optional .mesos.v1.executor.Call.Update update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->update(), output);
  }

  // optional .mesos.v1.executor.Call.Message message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.v1.ExecutorID executor_id = 1;
  if (has_executor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_id(), target);
  }

  // required .mesos.v1.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_id(), target);
  }

  // required .mesos.v1.executor.Call.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subscribe(), target);
  }

  // optional .mesos.v1.executor.Call.Update update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->update(), target);
  }

  // optional .mesos.v1.executor.Call.Message message = 6;
  if (has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.v1.ExecutorID executor_id = 1;
    if (has_executor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_id());
    }

    // required .mesos.v1.FrameworkID framework_id = 2;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // required .mesos.v1.executor.Call.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.v1.executor.Call.Subscribe subscribe = 4;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribe());
    }

    // optional .mesos.v1.executor.Call.Update update = 5;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional .mesos.v1.executor.Call.Message message = 6;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_id()) {
      mutable_executor_id()->::mesos::v1::ExecutorID::MergeFrom(from.executor_id());
    }
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::v1::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subscribe()) {
      mutable_subscribe()->::mesos::v1::executor::Call_Subscribe::MergeFrom(from.subscribe());
    }
    if (from.has_update()) {
      mutable_update()->::mesos::v1::executor::Call_Update::MergeFrom(from.update());
    }
    if (from.has_message()) {
      mutable_message()->::mesos::v1::executor::Call_Message::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_executor_id()) {
    if (!this->executor_id().IsInitialized()) return false;
  }
  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_subscribe()) {
    if (!this->subscribe().IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void Call::Swap(Call* other) {
  if (other != this) {
    std::swap(executor_id_, other->executor_id_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(type_, other->type_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(update_, other->update_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_descriptor_;
  metadata.reflection = Call_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace executor
}  // namespace v1
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
