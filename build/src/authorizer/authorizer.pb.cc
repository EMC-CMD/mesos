// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/authorizer/authorizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos/authorizer/authorizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {

namespace {

const ::google::protobuf::Descriptor* ACL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACL_Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_Entity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACL_Entity_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ACL_RegisterFramework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_RegisterFramework_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACL_RunTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_RunTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACL_ShutdownFramework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACL_ShutdownFramework_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACLs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACLs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2fauthorizer_2fauthorizer_2eproto() {
  protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos/authorizer/authorizer.proto");
  GOOGLE_CHECK(file != NULL);
  ACL_descriptor_ = file->message_type(0);
  static const int ACL_offsets_[1] = {
  };
  ACL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_descriptor_,
      ACL::default_instance_,
      ACL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL));
  ACL_Entity_descriptor_ = ACL_descriptor_->nested_type(0);
  static const int ACL_Entity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_Entity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_Entity, values_),
  };
  ACL_Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_Entity_descriptor_,
      ACL_Entity::default_instance_,
      ACL_Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_Entity));
  ACL_Entity_Type_descriptor_ = ACL_Entity_descriptor_->enum_type(0);
  ACL_RegisterFramework_descriptor_ = ACL_descriptor_->nested_type(1);
  static const int ACL_RegisterFramework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RegisterFramework, principals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RegisterFramework, roles_),
  };
  ACL_RegisterFramework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_RegisterFramework_descriptor_,
      ACL_RegisterFramework::default_instance_,
      ACL_RegisterFramework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RegisterFramework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RegisterFramework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_RegisterFramework));
  ACL_RunTask_descriptor_ = ACL_descriptor_->nested_type(2);
  static const int ACL_RunTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RunTask, principals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RunTask, users_),
  };
  ACL_RunTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_RunTask_descriptor_,
      ACL_RunTask::default_instance_,
      ACL_RunTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RunTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_RunTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_RunTask));
  ACL_ShutdownFramework_descriptor_ = ACL_descriptor_->nested_type(3);
  static const int ACL_ShutdownFramework_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ShutdownFramework, principals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ShutdownFramework, framework_principals_),
  };
  ACL_ShutdownFramework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACL_ShutdownFramework_descriptor_,
      ACL_ShutdownFramework::default_instance_,
      ACL_ShutdownFramework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ShutdownFramework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACL_ShutdownFramework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACL_ShutdownFramework));
  ACLs_descriptor_ = file->message_type(1);
  static const int ACLs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, permissive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, register_frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, run_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, shutdown_frameworks_),
  };
  ACLs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACLs_descriptor_,
      ACLs::default_instance_,
      ACLs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACLs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2fauthorizer_2fauthorizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACL_descriptor_, &ACL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACL_Entity_descriptor_, &ACL_Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACL_RegisterFramework_descriptor_, &ACL_RegisterFramework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACL_RunTask_descriptor_, &ACL_RunTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACL_ShutdownFramework_descriptor_, &ACL_ShutdownFramework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACLs_descriptor_, &ACLs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2fauthorizer_2fauthorizer_2eproto() {
  delete ACL::default_instance_;
  delete ACL_reflection_;
  delete ACL_Entity::default_instance_;
  delete ACL_Entity_reflection_;
  delete ACL_RegisterFramework::default_instance_;
  delete ACL_RegisterFramework_reflection_;
  delete ACL_RunTask::default_instance_;
  delete ACL_RunTask_reflection_;
  delete ACL_ShutdownFramework::default_instance_;
  delete ACL_ShutdownFramework_reflection_;
  delete ACLs::default_instance_;
  delete ACLs_reflection_;
}

void protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!mesos/authorizer/authorizer.proto\022\005mes"
    "os\032\021mesos/mesos.proto\"\217\003\n\003ACL\032i\n\006Entity\022"
    "*\n\004type\030\001 \001(\0162\026.mesos.ACL.Entity.Type:\004S"
    "OME\022\016\n\006values\030\002 \003(\t\"#\n\004Type\022\010\n\004SOME\020\000\022\007\n"
    "\003ANY\020\001\022\010\n\004NONE\020\002\032\\\n\021RegisterFramework\022%\n"
    "\nprincipals\030\001 \002(\0132\021.mesos.ACL.Entity\022 \n\005"
    "roles\030\002 \002(\0132\021.mesos.ACL.Entity\032R\n\007RunTas"
    "k\022%\n\nprincipals\030\001 \002(\0132\021.mesos.ACL.Entity"
    "\022 \n\005users\030\002 \002(\0132\021.mesos.ACL.Entity\032k\n\021Sh"
    "utdownFramework\022%\n\nprincipals\030\001 \002(\0132\021.me"
    "sos.ACL.Entity\022/\n\024framework_principals\030\002"
    " \002(\0132\021.mesos.ACL.Entity\"\275\001\n\004ACLs\022\030\n\nperm"
    "issive\030\001 \001(\010:\004true\0229\n\023register_framework"
    "s\030\002 \003(\0132\034.mesos.ACL.RegisterFramework\022%\n"
    "\trun_tasks\030\003 \003(\0132\022.mesos.ACL.RunTask\0229\n\023"
    "shutdown_frameworks\030\004 \003(\0132\034.mesos.ACL.Sh"
    "utdownFrameworkB\032\n\020org.apache.mesosB\006Pro"
    "tos", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos/authorizer/authorizer.proto", &protobuf_RegisterTypes);
  ACL::default_instance_ = new ACL();
  ACL_Entity::default_instance_ = new ACL_Entity();
  ACL_RegisterFramework::default_instance_ = new ACL_RegisterFramework();
  ACL_RunTask::default_instance_ = new ACL_RunTask();
  ACL_ShutdownFramework::default_instance_ = new ACL_ShutdownFramework();
  ACLs::default_instance_ = new ACLs();
  ACL::default_instance_->InitAsDefaultInstance();
  ACL_Entity::default_instance_->InitAsDefaultInstance();
  ACL_RegisterFramework::default_instance_->InitAsDefaultInstance();
  ACL_RunTask::default_instance_->InitAsDefaultInstance();
  ACL_ShutdownFramework::default_instance_->InitAsDefaultInstance();
  ACLs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2fauthorizer_2fauthorizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2fauthorizer_2fauthorizer_2eproto {
  StaticDescriptorInitializer_mesos_2fauthorizer_2fauthorizer_2eproto() {
    protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  }
} static_descriptor_initializer_mesos_2fauthorizer_2fauthorizer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ACL_Entity_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_Entity_Type_descriptor_;
}
bool ACL_Entity_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ACL_Entity_Type ACL_Entity::SOME;
const ACL_Entity_Type ACL_Entity::ANY;
const ACL_Entity_Type ACL_Entity::NONE;
const ACL_Entity_Type ACL_Entity::Type_MIN;
const ACL_Entity_Type ACL_Entity::Type_MAX;
const int ACL_Entity::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ACL_Entity::kTypeFieldNumber;
const int ACL_Entity::kValuesFieldNumber;
#endif  // !_MSC_VER

ACL_Entity::ACL_Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACL_Entity::InitAsDefaultInstance() {
}

ACL_Entity::ACL_Entity(const ACL_Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACL_Entity::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_Entity::~ACL_Entity() {
  SharedDtor();
}

void ACL_Entity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACL_Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_Entity_descriptor_;
}

const ACL_Entity& ACL_Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACL_Entity* ACL_Entity::default_instance_ = NULL;

ACL_Entity* ACL_Entity::New() const {
  return new ACL_Entity;
}

void ACL_Entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACL_Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.ACL.Entity.Type type = 1 [default = SOME];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::ACL_Entity_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::ACL_Entity_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACL_Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.ACL.Entity.Type type = 1 [default = SOME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACL_Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.ACL.Entity.Type type = 1 [default = SOME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACL_Entity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.ACL.Entity.Type type = 1 [default = SOME];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACL_Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACL_Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACL_Entity::MergeFrom(const ACL_Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACL_Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_Entity::CopyFrom(const ACL_Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_Entity::IsInitialized() const {

  return true;
}

void ACL_Entity::Swap(ACL_Entity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACL_Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_Entity_descriptor_;
  metadata.reflection = ACL_Entity_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACL_RegisterFramework::kPrincipalsFieldNumber;
const int ACL_RegisterFramework::kRolesFieldNumber;
#endif  // !_MSC_VER

ACL_RegisterFramework::ACL_RegisterFramework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACL_RegisterFramework::InitAsDefaultInstance() {
  principals_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
  roles_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
}

ACL_RegisterFramework::ACL_RegisterFramework(const ACL_RegisterFramework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACL_RegisterFramework::SharedCtor() {
  _cached_size_ = 0;
  principals_ = NULL;
  roles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_RegisterFramework::~ACL_RegisterFramework() {
  SharedDtor();
}

void ACL_RegisterFramework::SharedDtor() {
  if (this != default_instance_) {
    delete principals_;
    delete roles_;
  }
}

void ACL_RegisterFramework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_RegisterFramework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_RegisterFramework_descriptor_;
}

const ACL_RegisterFramework& ACL_RegisterFramework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACL_RegisterFramework* ACL_RegisterFramework::default_instance_ = NULL;

ACL_RegisterFramework* ACL_RegisterFramework::New() const {
  return new ACL_RegisterFramework;
}

void ACL_RegisterFramework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_principals()) {
      if (principals_ != NULL) principals_->::mesos::ACL_Entity::Clear();
    }
    if (has_roles()) {
      if (roles_ != NULL) roles_->::mesos::ACL_Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACL_RegisterFramework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ACL.Entity principals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_principals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roles;
        break;
      }

      // required .mesos.ACL.Entity roles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACL_RegisterFramework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->principals(), output);
  }

  // required .mesos.ACL.Entity roles = 2;
  if (has_roles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACL_RegisterFramework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->principals(), target);
  }

  // required .mesos.ACL.Entity roles = 2;
  if (has_roles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACL_RegisterFramework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ACL.Entity principals = 1;
    if (has_principals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->principals());
    }

    // required .mesos.ACL.Entity roles = 2;
    if (has_roles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_RegisterFramework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACL_RegisterFramework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACL_RegisterFramework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACL_RegisterFramework::MergeFrom(const ACL_RegisterFramework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_principals()) {
      mutable_principals()->::mesos::ACL_Entity::MergeFrom(from.principals());
    }
    if (from.has_roles()) {
      mutable_roles()->::mesos::ACL_Entity::MergeFrom(from.roles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACL_RegisterFramework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_RegisterFramework::CopyFrom(const ACL_RegisterFramework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_RegisterFramework::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACL_RegisterFramework::Swap(ACL_RegisterFramework* other) {
  if (other != this) {
    std::swap(principals_, other->principals_);
    std::swap(roles_, other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACL_RegisterFramework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_RegisterFramework_descriptor_;
  metadata.reflection = ACL_RegisterFramework_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACL_RunTask::kPrincipalsFieldNumber;
const int ACL_RunTask::kUsersFieldNumber;
#endif  // !_MSC_VER

ACL_RunTask::ACL_RunTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACL_RunTask::InitAsDefaultInstance() {
  principals_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
  users_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
}

ACL_RunTask::ACL_RunTask(const ACL_RunTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACL_RunTask::SharedCtor() {
  _cached_size_ = 0;
  principals_ = NULL;
  users_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_RunTask::~ACL_RunTask() {
  SharedDtor();
}

void ACL_RunTask::SharedDtor() {
  if (this != default_instance_) {
    delete principals_;
    delete users_;
  }
}

void ACL_RunTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_RunTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_RunTask_descriptor_;
}

const ACL_RunTask& ACL_RunTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACL_RunTask* ACL_RunTask::default_instance_ = NULL;

ACL_RunTask* ACL_RunTask::New() const {
  return new ACL_RunTask;
}

void ACL_RunTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_principals()) {
      if (principals_ != NULL) principals_->::mesos::ACL_Entity::Clear();
    }
    if (has_users()) {
      if (users_ != NULL) users_->::mesos::ACL_Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACL_RunTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ACL.Entity principals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_principals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // required .mesos.ACL.Entity users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACL_RunTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->principals(), output);
  }

  // required .mesos.ACL.Entity users = 2;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->users(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACL_RunTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->principals(), target);
  }

  // required .mesos.ACL.Entity users = 2;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->users(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACL_RunTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ACL.Entity principals = 1;
    if (has_principals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->principals());
    }

    // required .mesos.ACL.Entity users = 2;
    if (has_users()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_RunTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACL_RunTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACL_RunTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACL_RunTask::MergeFrom(const ACL_RunTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_principals()) {
      mutable_principals()->::mesos::ACL_Entity::MergeFrom(from.principals());
    }
    if (from.has_users()) {
      mutable_users()->::mesos::ACL_Entity::MergeFrom(from.users());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACL_RunTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_RunTask::CopyFrom(const ACL_RunTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_RunTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACL_RunTask::Swap(ACL_RunTask* other) {
  if (other != this) {
    std::swap(principals_, other->principals_);
    std::swap(users_, other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACL_RunTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_RunTask_descriptor_;
  metadata.reflection = ACL_RunTask_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ACL_ShutdownFramework::kPrincipalsFieldNumber;
const int ACL_ShutdownFramework::kFrameworkPrincipalsFieldNumber;
#endif  // !_MSC_VER

ACL_ShutdownFramework::ACL_ShutdownFramework()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACL_ShutdownFramework::InitAsDefaultInstance() {
  principals_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
  framework_principals_ = const_cast< ::mesos::ACL_Entity*>(&::mesos::ACL_Entity::default_instance());
}

ACL_ShutdownFramework::ACL_ShutdownFramework(const ACL_ShutdownFramework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACL_ShutdownFramework::SharedCtor() {
  _cached_size_ = 0;
  principals_ = NULL;
  framework_principals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL_ShutdownFramework::~ACL_ShutdownFramework() {
  SharedDtor();
}

void ACL_ShutdownFramework::SharedDtor() {
  if (this != default_instance_) {
    delete principals_;
    delete framework_principals_;
  }
}

void ACL_ShutdownFramework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL_ShutdownFramework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_ShutdownFramework_descriptor_;
}

const ACL_ShutdownFramework& ACL_ShutdownFramework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACL_ShutdownFramework* ACL_ShutdownFramework::default_instance_ = NULL;

ACL_ShutdownFramework* ACL_ShutdownFramework::New() const {
  return new ACL_ShutdownFramework;
}

void ACL_ShutdownFramework::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_principals()) {
      if (principals_ != NULL) principals_->::mesos::ACL_Entity::Clear();
    }
    if (has_framework_principals()) {
      if (framework_principals_ != NULL) framework_principals_->::mesos::ACL_Entity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACL_ShutdownFramework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ACL.Entity principals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_principals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_framework_principals;
        break;
      }

      // required .mesos.ACL.Entity framework_principals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_framework_principals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_principals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACL_ShutdownFramework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->principals(), output);
  }

  // required .mesos.ACL.Entity framework_principals = 2;
  if (has_framework_principals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_principals(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACL_ShutdownFramework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ACL.Entity principals = 1;
  if (has_principals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->principals(), target);
  }

  // required .mesos.ACL.Entity framework_principals = 2;
  if (has_framework_principals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_principals(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACL_ShutdownFramework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ACL.Entity principals = 1;
    if (has_principals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->principals());
    }

    // required .mesos.ACL.Entity framework_principals = 2;
    if (has_framework_principals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_principals());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL_ShutdownFramework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACL_ShutdownFramework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACL_ShutdownFramework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACL_ShutdownFramework::MergeFrom(const ACL_ShutdownFramework& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_principals()) {
      mutable_principals()->::mesos::ACL_Entity::MergeFrom(from.principals());
    }
    if (from.has_framework_principals()) {
      mutable_framework_principals()->::mesos::ACL_Entity::MergeFrom(from.framework_principals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACL_ShutdownFramework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_ShutdownFramework::CopyFrom(const ACL_ShutdownFramework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_ShutdownFramework::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ACL_ShutdownFramework::Swap(ACL_ShutdownFramework* other) {
  if (other != this) {
    std::swap(principals_, other->principals_);
    std::swap(framework_principals_, other->framework_principals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACL_ShutdownFramework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_ShutdownFramework_descriptor_;
  metadata.reflection = ACL_ShutdownFramework_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ACL::ACL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACL::InitAsDefaultInstance() {
}

ACL::ACL(const ACL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACL::~ACL() {
  SharedDtor();
}

void ACL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACL_descriptor_;
}

const ACL& ACL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACL* ACL::default_instance_ = NULL;

ACL* ACL::New() const {
  return new ACL;
}

void ACL::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACL::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACL::MergeFrom(const ACL& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL::CopyFrom(const ACL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL::IsInitialized() const {

  return true;
}

void ACL::Swap(ACL* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACL_descriptor_;
  metadata.reflection = ACL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACLs::kPermissiveFieldNumber;
const int ACLs::kRegisterFrameworksFieldNumber;
const int ACLs::kRunTasksFieldNumber;
const int ACLs::kShutdownFrameworksFieldNumber;
#endif  // !_MSC_VER

ACLs::ACLs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACLs::InitAsDefaultInstance() {
}

ACLs::ACLs(const ACLs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACLs::SharedCtor() {
  _cached_size_ = 0;
  permissive_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACLs::~ACLs() {
  SharedDtor();
}

void ACLs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACLs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACLs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACLs_descriptor_;
}

const ACLs& ACLs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fauthorizer_2fauthorizer_2eproto();
  return *default_instance_;
}

ACLs* ACLs::default_instance_ = NULL;

ACLs* ACLs::New() const {
  return new ACLs;
}

void ACLs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    permissive_ = true;
  }
  register_frameworks_.Clear();
  run_tasks_.Clear();
  shutdown_frameworks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACLs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool permissive = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &permissive_)));
          set_has_permissive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_register_frameworks;
        break;
      }

      // repeated .mesos.ACL.RegisterFramework register_frameworks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_register_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_register_frameworks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_register_frameworks;
        if (input->ExpectTag(26)) goto parse_run_tasks;
        break;
      }

      // repeated .mesos.ACL.RunTask run_tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_run_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_run_tasks;
        if (input->ExpectTag(34)) goto parse_shutdown_frameworks;
        break;
      }

      // repeated .mesos.ACL.ShutdownFramework shutdown_frameworks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shutdown_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shutdown_frameworks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shutdown_frameworks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACLs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool permissive = 1 [default = true];
  if (has_permissive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->permissive(), output);
  }

  // repeated .mesos.ACL.RegisterFramework register_frameworks = 2;
  for (int i = 0; i < this->register_frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->register_frameworks(i), output);
  }

  // repeated .mesos.ACL.RunTask run_tasks = 3;
  for (int i = 0; i < this->run_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->run_tasks(i), output);
  }

  // repeated .mesos.ACL.ShutdownFramework shutdown_frameworks = 4;
  for (int i = 0; i < this->shutdown_frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shutdown_frameworks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACLs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool permissive = 1 [default = true];
  if (has_permissive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->permissive(), target);
  }

  // repeated .mesos.ACL.RegisterFramework register_frameworks = 2;
  for (int i = 0; i < this->register_frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->register_frameworks(i), target);
  }

  // repeated .mesos.ACL.RunTask run_tasks = 3;
  for (int i = 0; i < this->run_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->run_tasks(i), target);
  }

  // repeated .mesos.ACL.ShutdownFramework shutdown_frameworks = 4;
  for (int i = 0; i < this->shutdown_frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shutdown_frameworks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACLs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool permissive = 1 [default = true];
    if (has_permissive()) {
      total_size += 1 + 1;
    }

  }
  // repeated .mesos.ACL.RegisterFramework register_frameworks = 2;
  total_size += 1 * this->register_frameworks_size();
  for (int i = 0; i < this->register_frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->register_frameworks(i));
  }

  // repeated .mesos.ACL.RunTask run_tasks = 3;
  total_size += 1 * this->run_tasks_size();
  for (int i = 0; i < this->run_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->run_tasks(i));
  }

  // repeated .mesos.ACL.ShutdownFramework shutdown_frameworks = 4;
  total_size += 1 * this->shutdown_frameworks_size();
  for (int i = 0; i < this->shutdown_frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shutdown_frameworks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACLs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACLs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACLs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACLs::MergeFrom(const ACLs& from) {
  GOOGLE_CHECK_NE(&from, this);
  register_frameworks_.MergeFrom(from.register_frameworks_);
  run_tasks_.MergeFrom(from.run_tasks_);
  shutdown_frameworks_.MergeFrom(from.shutdown_frameworks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_permissive()) {
      set_permissive(from.permissive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACLs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACLs::CopyFrom(const ACLs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACLs::IsInitialized() const {

  for (int i = 0; i < register_frameworks_size(); i++) {
    if (!this->register_frameworks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < run_tasks_size(); i++) {
    if (!this->run_tasks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < shutdown_frameworks_size(); i++) {
    if (!this->shutdown_frameworks(i).IsInitialized()) return false;
  }
  return true;
}

void ACLs::Swap(ACLs* other) {
  if (other != this) {
    std::swap(permissive_, other->permissive_);
    register_frameworks_.Swap(&other->register_frameworks_);
    run_tasks_.Swap(&other->run_tasks_);
    shutdown_frameworks_.Swap(&other->shutdown_frameworks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACLs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACLs_descriptor_;
  metadata.reflection = ACLs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mesos

// @@protoc_insertion_point(global_scope)
