// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slave/containerizer/provisioner/docker/message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "slave/containerizer/provisioner/docker/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {
namespace slave {
namespace docker {

namespace {

const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Images_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Images_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_FsLayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_FsLayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_History_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_History_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_History_V1Compatibility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_History_V1Compatibility_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_Signatures_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_Signatures_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures_Header_Jwk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageManifest_Signatures_Header_Jwk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto() {
  protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "slave/containerizer/provisioner/docker/message.proto");
  GOOGLE_CHECK(file != NULL);
  Image_descriptor_ = file->message_type(0);
  static const int Image_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, layer_ids_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Image_Name_descriptor_ = Image_descriptor_->nested_type(0);
  static const int Image_Name_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_Name, registry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_Name, repository_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_Name, tag_),
  };
  Image_Name_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_Name_descriptor_,
      Image_Name::default_instance_,
      Image_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_Name, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image_Name, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image_Name));
  Images_descriptor_ = file->message_type(1);
  static const int Images_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Images, images_),
  };
  Images_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Images_descriptor_,
      Images::default_instance_,
      Images_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Images, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Images, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Images));
  DockerImageManifest_descriptor_ = file->message_type(2);
  static const int DockerImageManifest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, architecture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, fslayers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, schemaversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, signatures_),
  };
  DockerImageManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_descriptor_,
      DockerImageManifest::default_instance_,
      DockerImageManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest));
  DockerImageManifest_FsLayers_descriptor_ = DockerImageManifest_descriptor_->nested_type(0);
  static const int DockerImageManifest_FsLayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_FsLayers, blobsum_),
  };
  DockerImageManifest_FsLayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_FsLayers_descriptor_,
      DockerImageManifest_FsLayers::default_instance_,
      DockerImageManifest_FsLayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_FsLayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_FsLayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_FsLayers));
  DockerImageManifest_History_descriptor_ = DockerImageManifest_descriptor_->nested_type(1);
  static const int DockerImageManifest_History_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History, v1compatibility_),
  };
  DockerImageManifest_History_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_History_descriptor_,
      DockerImageManifest_History::default_instance_,
      DockerImageManifest_History_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_History));
  DockerImageManifest_History_V1Compatibility_descriptor_ = DockerImageManifest_History_descriptor_->nested_type(0);
  static const int DockerImageManifest_History_V1Compatibility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History_V1Compatibility, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History_V1Compatibility, parent_),
  };
  DockerImageManifest_History_V1Compatibility_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_History_V1Compatibility_descriptor_,
      DockerImageManifest_History_V1Compatibility::default_instance_,
      DockerImageManifest_History_V1Compatibility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History_V1Compatibility, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_History_V1Compatibility, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_History_V1Compatibility));
  DockerImageManifest_Signatures_descriptor_ = DockerImageManifest_descriptor_->nested_type(2);
  static const int DockerImageManifest_Signatures_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures, protected__),
  };
  DockerImageManifest_Signatures_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_Signatures_descriptor_,
      DockerImageManifest_Signatures::default_instance_,
      DockerImageManifest_Signatures_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_Signatures));
  DockerImageManifest_Signatures_Header_descriptor_ = DockerImageManifest_Signatures_descriptor_->nested_type(0);
  static const int DockerImageManifest_Signatures_Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header, jwk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header, alg_),
  };
  DockerImageManifest_Signatures_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_Signatures_Header_descriptor_,
      DockerImageManifest_Signatures_Header::default_instance_,
      DockerImageManifest_Signatures_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_Signatures_Header));
  DockerImageManifest_Signatures_Header_Jwk_descriptor_ = DockerImageManifest_Signatures_Header_descriptor_->nested_type(0);
  static const int DockerImageManifest_Signatures_Header_Jwk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, crv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, kid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, kty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, y_),
  };
  DockerImageManifest_Signatures_Header_Jwk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageManifest_Signatures_Header_Jwk_descriptor_,
      DockerImageManifest_Signatures_Header_Jwk::default_instance_,
      DockerImageManifest_Signatures_Header_Jwk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageManifest_Signatures_Header_Jwk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageManifest_Signatures_Header_Jwk));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_Name_descriptor_, &Image_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Images_descriptor_, &Images::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_descriptor_, &DockerImageManifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_FsLayers_descriptor_, &DockerImageManifest_FsLayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_History_descriptor_, &DockerImageManifest_History::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_History_V1Compatibility_descriptor_, &DockerImageManifest_History_V1Compatibility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_Signatures_descriptor_, &DockerImageManifest_Signatures::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_Signatures_Header_descriptor_, &DockerImageManifest_Signatures_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageManifest_Signatures_Header_Jwk_descriptor_, &DockerImageManifest_Signatures_Header_Jwk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto() {
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Image_Name::default_instance_;
  delete Image_Name_reflection_;
  delete Images::default_instance_;
  delete Images_reflection_;
  delete DockerImageManifest::default_instance_;
  delete DockerImageManifest_reflection_;
  delete DockerImageManifest_FsLayers::default_instance_;
  delete DockerImageManifest_FsLayers_reflection_;
  delete DockerImageManifest_History::default_instance_;
  delete DockerImageManifest_History_reflection_;
  delete DockerImageManifest_History_V1Compatibility::default_instance_;
  delete DockerImageManifest_History_V1Compatibility_reflection_;
  delete DockerImageManifest_Signatures::default_instance_;
  delete DockerImageManifest_Signatures_reflection_;
  delete DockerImageManifest_Signatures_Header::default_instance_;
  delete DockerImageManifest_Signatures_Header_reflection_;
  delete DockerImageManifest_Signatures_Header_Jwk::default_instance_;
  delete DockerImageManifest_Signatures_Header_Jwk_reflection_;
}

void protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n4slave/containerizer/provisioner/docker"
    "/message.proto\022\033mesos.internal.slave.doc"
    "ker\032\021mesos/mesos.proto\"\214\001\n\005Image\0225\n\004name"
    "\030\001 \002(\0132\'.mesos.internal.slave.docker.Ima"
    "ge.Name\022\021\n\tlayer_ids\030\002 \003(\t\0329\n\004Name\022\020\n\010re"
    "gistry\030\001 \001(\t\022\022\n\nrepository\030\002 \002(\t\022\013\n\003tag\030"
    "\003 \002(\t\"<\n\006Images\0222\n\006images\030\001 \003(\0132\".mesos."
    "internal.slave.docker.Image\"\273\006\n\023DockerIm"
    "ageManifest\022\014\n\004name\030\001 \002(\t\022\013\n\003tag\030\002 \002(\t\022\024"
    "\n\014architecture\030\003 \002(\t\022K\n\010fsLayers\030\004 \003(\01329"
    ".mesos.internal.slave.docker.DockerImage"
    "Manifest.FsLayers\022I\n\007history\030\005 \003(\01328.mes"
    "os.internal.slave.docker.DockerImageMani"
    "fest.History\022\025\n\rschemaVersion\030\006 \002(\r\022O\n\ns"
    "ignatures\030\007 \003(\0132;.mesos.internal.slave.d"
    "ocker.DockerImageManifest.Signatures\032\033\n\010"
    "FsLayers\022\017\n\007blobSum\030\001 \002(\t\032\233\001\n\007History\022a\n"
    "\017v1Compatibility\030\001 \002(\0132H.mesos.internal."
    "slave.docker.DockerImageManifest.History"
    ".V1Compatibility\032-\n\017V1Compatibility\022\n\n\002i"
    "d\030\001 \002(\t\022\016\n\006parent\030\002 \002(\t\032\267\002\n\nSignatures\022R"
    "\n\006header\030\001 \002(\0132B.mesos.internal.slave.do"
    "cker.DockerImageManifest.Signatures.Head"
    "er\022\021\n\tsignature\030\002 \002(\t\022\021\n\tprotected\030\003 \002(\t"
    "\032\256\001\n\006Header\022S\n\003jwk\030\001 \001(\0132F.mesos.interna"
    "l.slave.docker.DockerImageManifest.Signa"
    "tures.Header.Jwk\022\013\n\003alg\030\002 \002(\t\032B\n\003Jwk\022\013\n\003"
    "crv\030\001 \002(\t\022\013\n\003kid\030\002 \002(\t\022\013\n\003kty\030\003 \002(\t\022\t\n\001x"
    "\030\004 \002(\t\022\t\n\001y\030\005 \002(\t", 1137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "slave/containerizer/provisioner/docker/message.proto", &protobuf_RegisterTypes);
  Image::default_instance_ = new Image();
  Image_Name::default_instance_ = new Image_Name();
  Images::default_instance_ = new Images();
  DockerImageManifest::default_instance_ = new DockerImageManifest();
  DockerImageManifest_FsLayers::default_instance_ = new DockerImageManifest_FsLayers();
  DockerImageManifest_History::default_instance_ = new DockerImageManifest_History();
  DockerImageManifest_History_V1Compatibility::default_instance_ = new DockerImageManifest_History_V1Compatibility();
  DockerImageManifest_Signatures::default_instance_ = new DockerImageManifest_Signatures();
  DockerImageManifest_Signatures_Header::default_instance_ = new DockerImageManifest_Signatures_Header();
  DockerImageManifest_Signatures_Header_Jwk::default_instance_ = new DockerImageManifest_Signatures_Header_Jwk();
  Image::default_instance_->InitAsDefaultInstance();
  Image_Name::default_instance_->InitAsDefaultInstance();
  Images::default_instance_->InitAsDefaultInstance();
  DockerImageManifest::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_FsLayers::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_History::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_History_V1Compatibility::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_Signatures::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_Signatures_Header::default_instance_->InitAsDefaultInstance();
  DockerImageManifest_Signatures_Header_Jwk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto {
  StaticDescriptorInitializer_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto() {
    protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  }
} static_descriptor_initializer_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Image_Name::kRegistryFieldNumber;
const int Image_Name::kRepositoryFieldNumber;
const int Image_Name::kTagFieldNumber;
#endif  // !_MSC_VER

Image_Name::Image_Name()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image_Name::InitAsDefaultInstance() {
}

Image_Name::Image_Name(const Image_Name& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image_Name::SharedCtor() {
  _cached_size_ = 0;
  registry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repository_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image_Name::~Image_Name() {
  SharedDtor();
}

void Image_Name::SharedDtor() {
  if (registry_ != &::google::protobuf::internal::kEmptyString) {
    delete registry_;
  }
  if (repository_ != &::google::protobuf::internal::kEmptyString) {
    delete repository_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void Image_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_Name_descriptor_;
}

const Image_Name& Image_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

Image_Name* Image_Name::default_instance_ = NULL;

Image_Name* Image_Name::New() const {
  return new Image_Name;
}

void Image_Name::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_registry()) {
      if (registry_ != &::google::protobuf::internal::kEmptyString) {
        registry_->clear();
      }
    }
    if (has_repository()) {
      if (repository_ != &::google::protobuf::internal::kEmptyString) {
        repository_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string registry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registry().data(), this->registry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_repository;
        break;
      }

      // required string repository = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repository:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repository()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->repository().data(), this->repository().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // required string tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string registry = 1;
  if (has_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registry().data(), this->registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->registry(), output);
  }

  // required string repository = 2;
  if (has_repository()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repository().data(), this->repository().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->repository(), output);
  }

  // required string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image_Name::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string registry = 1;
  if (has_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registry().data(), this->registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->registry(), target);
  }

  // required string repository = 2;
  if (has_repository()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repository().data(), this->repository().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->repository(), target);
  }

  // required string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image_Name::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string registry = 1;
    if (has_registry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registry());
    }

    // required string repository = 2;
    if (has_repository()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repository());
    }

    // required string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image_Name::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image_Name* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image_Name*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image_Name::MergeFrom(const Image_Name& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_registry()) {
      set_registry(from.registry());
    }
    if (from.has_repository()) {
      set_repository(from.repository());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image_Name::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image_Name::CopyFrom(const Image_Name& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image_Name::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Image_Name::Swap(Image_Name* other) {
  if (other != this) {
    std::swap(registry_, other->registry_);
    std::swap(repository_, other->repository_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_Name_descriptor_;
  metadata.reflection = Image_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Image::kNameFieldNumber;
const int Image::kLayerIdsFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Image::InitAsDefaultInstance() {
  name_ = const_cast< ::mesos::internal::slave::docker::Image_Name*>(&::mesos::internal::slave::docker::Image_Name::default_instance());
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Image::SharedCtor() {
  _cached_size_ = 0;
  name_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  SharedDtor();
}

void Image::SharedDtor() {
  if (this != default_instance_) {
    delete name_;
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != NULL) name_->::mesos::internal::slave::docker::Image_Name::Clear();
    }
  }
  layer_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.slave.docker.Image.Name name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer_ids;
        break;
      }

      // repeated string layer_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_layer_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layer_ids(this->layer_ids_size() - 1).data(),
            this->layer_ids(this->layer_ids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.slave.docker.Image.Name name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->name(), output);
  }

  // repeated string layer_ids = 2;
  for (int i = 0; i < this->layer_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->layer_ids(i).data(), this->layer_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->layer_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.slave.docker.Image.Name name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->name(), target);
  }

  // repeated string layer_ids = 2;
  for (int i = 0; i < this->layer_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layer_ids(i).data(), this->layer_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->layer_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.slave.docker.Image.Name name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->name());
    }

  }
  // repeated string layer_ids = 2;
  total_size += 1 * this->layer_ids_size();
  for (int i = 0; i < this->layer_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->layer_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_ids_.MergeFrom(from.layer_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      mutable_name()->::mesos::internal::slave::docker::Image_Name::MergeFrom(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_name()) {
    if (!this->name().IsInitialized()) return false;
  }
  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    layer_ids_.Swap(&other->layer_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Images::kImagesFieldNumber;
#endif  // !_MSC_VER

Images::Images()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Images::InitAsDefaultInstance() {
}

Images::Images(const Images& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Images::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Images::~Images() {
  SharedDtor();
}

void Images::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Images::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Images::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Images_descriptor_;
}

const Images& Images::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

Images* Images::default_instance_ = NULL;

Images* Images::New() const {
  return new Images;
}

void Images::Clear() {
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Images::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.internal.slave.docker.Image images = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_images;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Images::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.internal.slave.docker.Image images = 1;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->images(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Images::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.internal.slave.docker.Image images = 1;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->images(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Images::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.internal.slave.docker.Image images = 1;
  total_size += 1 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Images::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Images* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Images*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Images::MergeFrom(const Images& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Images::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Images::CopyFrom(const Images& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Images::IsInitialized() const {

  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  return true;
}

void Images::Swap(Images* other) {
  if (other != this) {
    images_.Swap(&other->images_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Images::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Images_descriptor_;
  metadata.reflection = Images_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DockerImageManifest_FsLayers::kBlobSumFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_FsLayers::DockerImageManifest_FsLayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_FsLayers::InitAsDefaultInstance() {
}

DockerImageManifest_FsLayers::DockerImageManifest_FsLayers(const DockerImageManifest_FsLayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_FsLayers::SharedCtor() {
  _cached_size_ = 0;
  blobsum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_FsLayers::~DockerImageManifest_FsLayers() {
  SharedDtor();
}

void DockerImageManifest_FsLayers::SharedDtor() {
  if (blobsum_ != &::google::protobuf::internal::kEmptyString) {
    delete blobsum_;
  }
  if (this != default_instance_) {
  }
}

void DockerImageManifest_FsLayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_FsLayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_FsLayers_descriptor_;
}

const DockerImageManifest_FsLayers& DockerImageManifest_FsLayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_FsLayers* DockerImageManifest_FsLayers::default_instance_ = NULL;

DockerImageManifest_FsLayers* DockerImageManifest_FsLayers::New() const {
  return new DockerImageManifest_FsLayers;
}

void DockerImageManifest_FsLayers::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blobsum()) {
      if (blobsum_ != &::google::protobuf::internal::kEmptyString) {
        blobsum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_FsLayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string blobSum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blobsum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blobsum().data(), this->blobsum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_FsLayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string blobSum = 1;
  if (has_blobsum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blobsum().data(), this->blobsum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->blobsum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_FsLayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string blobSum = 1;
  if (has_blobsum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blobsum().data(), this->blobsum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->blobsum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_FsLayers::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string blobSum = 1;
    if (has_blobsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->blobsum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_FsLayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_FsLayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_FsLayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_FsLayers::MergeFrom(const DockerImageManifest_FsLayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blobsum()) {
      set_blobsum(from.blobsum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_FsLayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_FsLayers::CopyFrom(const DockerImageManifest_FsLayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_FsLayers::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DockerImageManifest_FsLayers::Swap(DockerImageManifest_FsLayers* other) {
  if (other != this) {
    std::swap(blobsum_, other->blobsum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_FsLayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_FsLayers_descriptor_;
  metadata.reflection = DockerImageManifest_FsLayers_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest_History_V1Compatibility::kIdFieldNumber;
const int DockerImageManifest_History_V1Compatibility::kParentFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_History_V1Compatibility::DockerImageManifest_History_V1Compatibility()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_History_V1Compatibility::InitAsDefaultInstance() {
}

DockerImageManifest_History_V1Compatibility::DockerImageManifest_History_V1Compatibility(const DockerImageManifest_History_V1Compatibility& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_History_V1Compatibility::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_History_V1Compatibility::~DockerImageManifest_History_V1Compatibility() {
  SharedDtor();
}

void DockerImageManifest_History_V1Compatibility::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  if (this != default_instance_) {
  }
}

void DockerImageManifest_History_V1Compatibility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_History_V1Compatibility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_History_V1Compatibility_descriptor_;
}

const DockerImageManifest_History_V1Compatibility& DockerImageManifest_History_V1Compatibility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_History_V1Compatibility* DockerImageManifest_History_V1Compatibility::default_instance_ = NULL;

DockerImageManifest_History_V1Compatibility* DockerImageManifest_History_V1Compatibility::New() const {
  return new DockerImageManifest_History_V1Compatibility;
}

void DockerImageManifest_History_V1Compatibility::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != &::google::protobuf::internal::kEmptyString) {
        parent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_History_V1Compatibility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // required string parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_History_V1Compatibility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_History_V1Compatibility::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_History_V1Compatibility::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_History_V1Compatibility::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_History_V1Compatibility* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_History_V1Compatibility*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_History_V1Compatibility::MergeFrom(const DockerImageManifest_History_V1Compatibility& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_History_V1Compatibility::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_History_V1Compatibility::CopyFrom(const DockerImageManifest_History_V1Compatibility& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_History_V1Compatibility::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DockerImageManifest_History_V1Compatibility::Swap(DockerImageManifest_History_V1Compatibility* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_History_V1Compatibility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_History_V1Compatibility_descriptor_;
  metadata.reflection = DockerImageManifest_History_V1Compatibility_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest_History::kV1CompatibilityFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_History::DockerImageManifest_History()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_History::InitAsDefaultInstance() {
  v1compatibility_ = const_cast< ::mesos::internal::slave::docker::DockerImageManifest_History_V1Compatibility*>(&::mesos::internal::slave::docker::DockerImageManifest_History_V1Compatibility::default_instance());
}

DockerImageManifest_History::DockerImageManifest_History(const DockerImageManifest_History& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_History::SharedCtor() {
  _cached_size_ = 0;
  v1compatibility_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_History::~DockerImageManifest_History() {
  SharedDtor();
}

void DockerImageManifest_History::SharedDtor() {
  if (this != default_instance_) {
    delete v1compatibility_;
  }
}

void DockerImageManifest_History::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_History::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_History_descriptor_;
}

const DockerImageManifest_History& DockerImageManifest_History::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_History* DockerImageManifest_History::default_instance_ = NULL;

DockerImageManifest_History* DockerImageManifest_History::New() const {
  return new DockerImageManifest_History;
}

void DockerImageManifest_History::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_v1compatibility()) {
      if (v1compatibility_ != NULL) v1compatibility_->::mesos::internal::slave::docker::DockerImageManifest_History_V1Compatibility::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.slave.docker.DockerImageManifest.History.V1Compatibility v1Compatibility = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v1compatibility()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.slave.docker.DockerImageManifest.History.V1Compatibility v1Compatibility = 1;
  if (has_v1compatibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->v1compatibility(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_History::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.slave.docker.DockerImageManifest.History.V1Compatibility v1Compatibility = 1;
  if (has_v1compatibility()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->v1compatibility(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_History::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.slave.docker.DockerImageManifest.History.V1Compatibility v1Compatibility = 1;
    if (has_v1compatibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v1compatibility());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_History::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_History* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_History*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_History::MergeFrom(const DockerImageManifest_History& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v1compatibility()) {
      mutable_v1compatibility()->::mesos::internal::slave::docker::DockerImageManifest_History_V1Compatibility::MergeFrom(from.v1compatibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_History::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_History::CopyFrom(const DockerImageManifest_History& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_History::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_v1compatibility()) {
    if (!this->v1compatibility().IsInitialized()) return false;
  }
  return true;
}

void DockerImageManifest_History::Swap(DockerImageManifest_History* other) {
  if (other != this) {
    std::swap(v1compatibility_, other->v1compatibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_History::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_History_descriptor_;
  metadata.reflection = DockerImageManifest_History_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest_Signatures_Header_Jwk::kCrvFieldNumber;
const int DockerImageManifest_Signatures_Header_Jwk::kKidFieldNumber;
const int DockerImageManifest_Signatures_Header_Jwk::kKtyFieldNumber;
const int DockerImageManifest_Signatures_Header_Jwk::kXFieldNumber;
const int DockerImageManifest_Signatures_Header_Jwk::kYFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_Signatures_Header_Jwk::DockerImageManifest_Signatures_Header_Jwk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_Signatures_Header_Jwk::InitAsDefaultInstance() {
}

DockerImageManifest_Signatures_Header_Jwk::DockerImageManifest_Signatures_Header_Jwk(const DockerImageManifest_Signatures_Header_Jwk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_Signatures_Header_Jwk::SharedCtor() {
  _cached_size_ = 0;
  crv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_Signatures_Header_Jwk::~DockerImageManifest_Signatures_Header_Jwk() {
  SharedDtor();
}

void DockerImageManifest_Signatures_Header_Jwk::SharedDtor() {
  if (crv_ != &::google::protobuf::internal::kEmptyString) {
    delete crv_;
  }
  if (kid_ != &::google::protobuf::internal::kEmptyString) {
    delete kid_;
  }
  if (kty_ != &::google::protobuf::internal::kEmptyString) {
    delete kty_;
  }
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (this != default_instance_) {
  }
}

void DockerImageManifest_Signatures_Header_Jwk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures_Header_Jwk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_Signatures_Header_Jwk_descriptor_;
}

const DockerImageManifest_Signatures_Header_Jwk& DockerImageManifest_Signatures_Header_Jwk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_Signatures_Header_Jwk* DockerImageManifest_Signatures_Header_Jwk::default_instance_ = NULL;

DockerImageManifest_Signatures_Header_Jwk* DockerImageManifest_Signatures_Header_Jwk::New() const {
  return new DockerImageManifest_Signatures_Header_Jwk;
}

void DockerImageManifest_Signatures_Header_Jwk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_crv()) {
      if (crv_ != &::google::protobuf::internal::kEmptyString) {
        crv_->clear();
      }
    }
    if (has_kid()) {
      if (kid_ != &::google::protobuf::internal::kEmptyString) {
        kid_->clear();
      }
    }
    if (has_kty()) {
      if (kty_ != &::google::protobuf::internal::kEmptyString) {
        kty_->clear();
      }
    }
    if (has_x()) {
      if (x_ != &::google::protobuf::internal::kEmptyString) {
        x_->clear();
      }
    }
    if (has_y()) {
      if (y_ != &::google::protobuf::internal::kEmptyString) {
        y_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_Signatures_Header_Jwk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string crv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_crv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->crv().data(), this->crv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kid;
        break;
      }

      // required string kid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kid().data(), this->kid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kty;
        break;
      }

      // required string kty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kty().data(), this->kty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x;
        break;
      }

      // required string x = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->x().data(), this->x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_y;
        break;
      }

      // required string y = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->y().data(), this->y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_Signatures_Header_Jwk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string crv = 1;
  if (has_crv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crv().data(), this->crv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->crv(), output);
  }

  // required string kid = 2;
  if (has_kid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kid().data(), this->kid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->kid(), output);
  }

  // required string kty = 3;
  if (has_kty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kty().data(), this->kty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->kty(), output);
  }

  // required string x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->x(), output);
  }

  // required string y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_Signatures_Header_Jwk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string crv = 1;
  if (has_crv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->crv().data(), this->crv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->crv(), target);
  }

  // required string kid = 2;
  if (has_kid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kid().data(), this->kid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kid(), target);
  }

  // required string kty = 3;
  if (has_kty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kty().data(), this->kty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kty(), target);
  }

  // required string x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->x(), target);
  }

  // required string y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_Signatures_Header_Jwk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string crv = 1;
    if (has_crv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->crv());
    }

    // required string kid = 2;
    if (has_kid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kid());
    }

    // required string kty = 3;
    if (has_kty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kty());
    }

    // required string x = 4;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // required string y = 5;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_Signatures_Header_Jwk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_Signatures_Header_Jwk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_Signatures_Header_Jwk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_Signatures_Header_Jwk::MergeFrom(const DockerImageManifest_Signatures_Header_Jwk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crv()) {
      set_crv(from.crv());
    }
    if (from.has_kid()) {
      set_kid(from.kid());
    }
    if (from.has_kty()) {
      set_kty(from.kty());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_Signatures_Header_Jwk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_Signatures_Header_Jwk::CopyFrom(const DockerImageManifest_Signatures_Header_Jwk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_Signatures_Header_Jwk::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DockerImageManifest_Signatures_Header_Jwk::Swap(DockerImageManifest_Signatures_Header_Jwk* other) {
  if (other != this) {
    std::swap(crv_, other->crv_);
    std::swap(kid_, other->kid_);
    std::swap(kty_, other->kty_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_Signatures_Header_Jwk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_Signatures_Header_Jwk_descriptor_;
  metadata.reflection = DockerImageManifest_Signatures_Header_Jwk_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest_Signatures_Header::kJwkFieldNumber;
const int DockerImageManifest_Signatures_Header::kAlgFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_Signatures_Header::DockerImageManifest_Signatures_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_Signatures_Header::InitAsDefaultInstance() {
  jwk_ = const_cast< ::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header_Jwk*>(&::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header_Jwk::default_instance());
}

DockerImageManifest_Signatures_Header::DockerImageManifest_Signatures_Header(const DockerImageManifest_Signatures_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_Signatures_Header::SharedCtor() {
  _cached_size_ = 0;
  jwk_ = NULL;
  alg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_Signatures_Header::~DockerImageManifest_Signatures_Header() {
  SharedDtor();
}

void DockerImageManifest_Signatures_Header::SharedDtor() {
  if (alg_ != &::google::protobuf::internal::kEmptyString) {
    delete alg_;
  }
  if (this != default_instance_) {
    delete jwk_;
  }
}

void DockerImageManifest_Signatures_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_Signatures_Header_descriptor_;
}

const DockerImageManifest_Signatures_Header& DockerImageManifest_Signatures_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_Signatures_Header* DockerImageManifest_Signatures_Header::default_instance_ = NULL;

DockerImageManifest_Signatures_Header* DockerImageManifest_Signatures_Header::New() const {
  return new DockerImageManifest_Signatures_Header;
}

void DockerImageManifest_Signatures_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_jwk()) {
      if (jwk_ != NULL) jwk_->::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header_Jwk::Clear();
    }
    if (has_alg()) {
      if (alg_ != &::google::protobuf::internal::kEmptyString) {
        alg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_Signatures_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header.Jwk jwk = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jwk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alg;
        break;
      }

      // required string alg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alg().data(), this->alg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_Signatures_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header.Jwk jwk = 1;
  if (has_jwk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->jwk(), output);
  }

  // required string alg = 2;
  if (has_alg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alg().data(), this->alg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_Signatures_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header.Jwk jwk = 1;
  if (has_jwk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->jwk(), target);
  }

  // required string alg = 2;
  if (has_alg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alg().data(), this->alg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_Signatures_Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header.Jwk jwk = 1;
    if (has_jwk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jwk());
    }

    // required string alg = 2;
    if (has_alg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_Signatures_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_Signatures_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_Signatures_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_Signatures_Header::MergeFrom(const DockerImageManifest_Signatures_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jwk()) {
      mutable_jwk()->::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header_Jwk::MergeFrom(from.jwk());
    }
    if (from.has_alg()) {
      set_alg(from.alg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_Signatures_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_Signatures_Header::CopyFrom(const DockerImageManifest_Signatures_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_Signatures_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_jwk()) {
    if (!this->jwk().IsInitialized()) return false;
  }
  return true;
}

void DockerImageManifest_Signatures_Header::Swap(DockerImageManifest_Signatures_Header* other) {
  if (other != this) {
    std::swap(jwk_, other->jwk_);
    std::swap(alg_, other->alg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_Signatures_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_Signatures_Header_descriptor_;
  metadata.reflection = DockerImageManifest_Signatures_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest_Signatures::kHeaderFieldNumber;
const int DockerImageManifest_Signatures::kSignatureFieldNumber;
const int DockerImageManifest_Signatures::kProtectedFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest_Signatures::DockerImageManifest_Signatures()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest_Signatures::InitAsDefaultInstance() {
  header_ = const_cast< ::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header*>(&::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header::default_instance());
}

DockerImageManifest_Signatures::DockerImageManifest_Signatures(const DockerImageManifest_Signatures& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest_Signatures::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protected__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest_Signatures::~DockerImageManifest_Signatures() {
  SharedDtor();
}

void DockerImageManifest_Signatures::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (protected__ != &::google::protobuf::internal::kEmptyString) {
    delete protected__;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void DockerImageManifest_Signatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest_Signatures::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_Signatures_descriptor_;
}

const DockerImageManifest_Signatures& DockerImageManifest_Signatures::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest_Signatures* DockerImageManifest_Signatures::default_instance_ = NULL;

DockerImageManifest_Signatures* DockerImageManifest_Signatures::New() const {
  return new DockerImageManifest_Signatures;
}

void DockerImageManifest_Signatures::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header::Clear();
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_protected_()) {
      if (protected__ != &::google::protobuf::internal::kEmptyString) {
        protected__->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest_Signatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required string signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protected;
        break;
      }

      // required string protected = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protected_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protected_().data(), this->protected_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest_Signatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // required string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signature(), output);
  }

  // required string protected = 3;
  if (has_protected_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protected_().data(), this->protected_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->protected_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest_Signatures::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // required string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  // required string protected = 3;
  if (has_protected_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protected_().data(), this->protected_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->protected_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest_Signatures::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.slave.docker.DockerImageManifest.Signatures.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

    // required string signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

    // required string protected = 3;
    if (has_protected_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protected_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest_Signatures::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest_Signatures* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest_Signatures*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest_Signatures::MergeFrom(const DockerImageManifest_Signatures& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::mesos::internal::slave::docker::DockerImageManifest_Signatures_Header::MergeFrom(from.header());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_protected_()) {
      set_protected_(from.protected_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest_Signatures::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest_Signatures::CopyFrom(const DockerImageManifest_Signatures& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest_Signatures::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  return true;
}

void DockerImageManifest_Signatures::Swap(DockerImageManifest_Signatures* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(signature_, other->signature_);
    std::swap(protected__, other->protected__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest_Signatures::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_Signatures_descriptor_;
  metadata.reflection = DockerImageManifest_Signatures_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DockerImageManifest::kNameFieldNumber;
const int DockerImageManifest::kTagFieldNumber;
const int DockerImageManifest::kArchitectureFieldNumber;
const int DockerImageManifest::kFsLayersFieldNumber;
const int DockerImageManifest::kHistoryFieldNumber;
const int DockerImageManifest::kSchemaVersionFieldNumber;
const int DockerImageManifest::kSignaturesFieldNumber;
#endif  // !_MSC_VER

DockerImageManifest::DockerImageManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageManifest::InitAsDefaultInstance() {
}

DockerImageManifest::DockerImageManifest(const DockerImageManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageManifest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  architecture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  schemaversion_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageManifest::~DockerImageManifest() {
  SharedDtor();
}

void DockerImageManifest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (architecture_ != &::google::protobuf::internal::kEmptyString) {
    delete architecture_;
  }
  if (this != default_instance_) {
  }
}

void DockerImageManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageManifest_descriptor_;
}

const DockerImageManifest& DockerImageManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_slave_2fcontainerizer_2fprovisioner_2fdocker_2fmessage_2eproto();
  return *default_instance_;
}

DockerImageManifest* DockerImageManifest::default_instance_ = NULL;

DockerImageManifest* DockerImageManifest::New() const {
  return new DockerImageManifest;
}

void DockerImageManifest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_architecture()) {
      if (architecture_ != &::google::protobuf::internal::kEmptyString) {
        architecture_->clear();
      }
    }
    schemaversion_ = 0u;
  }
  fslayers_.Clear();
  history_.Clear();
  signatures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // required string tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_architecture;
        break;
      }

      // required string architecture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_architecture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_architecture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->architecture().data(), this->architecture().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fsLayers;
        break;
      }

      // repeated .mesos.internal.slave.docker.DockerImageManifest.FsLayers fsLayers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fsLayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fslayers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fsLayers;
        if (input->ExpectTag(42)) goto parse_history;
        break;
      }

      // repeated .mesos.internal.slave.docker.DockerImageManifest.History history = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_history;
        if (input->ExpectTag(48)) goto parse_schemaVersion;
        break;
      }

      // required uint32 schemaVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_schemaVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schemaversion_)));
          set_has_schemaversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signatures;
        break;
      }

      // repeated .mesos.internal.slave.docker.DockerImageManifest.Signatures signatures = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signatures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signatures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_signatures;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tag(), output);
  }

  // required string architecture = 3;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->architecture().data(), this->architecture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->architecture(), output);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.FsLayers fsLayers = 4;
  for (int i = 0; i < this->fslayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fslayers(i), output);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.History history = 5;
  for (int i = 0; i < this->history_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->history(i), output);
  }

  // required uint32 schemaVersion = 6;
  if (has_schemaversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->schemaversion(), output);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.Signatures signatures = 7;
  for (int i = 0; i < this->signatures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->signatures(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // required string architecture = 3;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->architecture().data(), this->architecture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->architecture(), target);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.FsLayers fsLayers = 4;
  for (int i = 0; i < this->fslayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fslayers(i), target);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.History history = 5;
  for (int i = 0; i < this->history_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->history(i), target);
  }

  // required uint32 schemaVersion = 6;
  if (has_schemaversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->schemaversion(), target);
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.Signatures signatures = 7;
  for (int i = 0; i < this->signatures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->signatures(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // required string architecture = 3;
    if (has_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->architecture());
    }

    // required uint32 schemaVersion = 6;
    if (has_schemaversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schemaversion());
    }

  }
  // repeated .mesos.internal.slave.docker.DockerImageManifest.FsLayers fsLayers = 4;
  total_size += 1 * this->fslayers_size();
  for (int i = 0; i < this->fslayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fslayers(i));
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.History history = 5;
  total_size += 1 * this->history_size();
  for (int i = 0; i < this->history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history(i));
  }

  // repeated .mesos.internal.slave.docker.DockerImageManifest.Signatures signatures = 7;
  total_size += 1 * this->signatures_size();
  for (int i = 0; i < this->signatures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signatures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageManifest::MergeFrom(const DockerImageManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  fslayers_.MergeFrom(from.fslayers_);
  history_.MergeFrom(from.history_);
  signatures_.MergeFrom(from.signatures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_architecture()) {
      set_architecture(from.architecture());
    }
    if (from.has_schemaversion()) {
      set_schemaversion(from.schemaversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageManifest::CopyFrom(const DockerImageManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  for (int i = 0; i < fslayers_size(); i++) {
    if (!this->fslayers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < history_size(); i++) {
    if (!this->history(i).IsInitialized()) return false;
  }
  for (int i = 0; i < signatures_size(); i++) {
    if (!this->signatures(i).IsInitialized()) return false;
  }
  return true;
}

void DockerImageManifest::Swap(DockerImageManifest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(tag_, other->tag_);
    std::swap(architecture_, other->architecture_);
    fslayers_.Swap(&other->fslayers_);
    history_.Swap(&other->history_);
    std::swap(schemaversion_, other->schemaversion_);
    signatures_.Swap(&other->signatures_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageManifest_descriptor_;
  metadata.reflection = DockerImageManifest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace docker
}  // namespace slave
}  // namespace internal
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
