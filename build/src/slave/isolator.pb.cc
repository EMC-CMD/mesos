// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesos/slave/isolator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mesos/slave/isolator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace slave {

namespace {

const ::google::protobuf::Descriptor* ContainerLimitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerLimitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerPrepareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerPrepareInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto() {
  protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mesos/slave/isolator.proto");
  GOOGLE_CHECK(file != NULL);
  ContainerLimitation_descriptor_ = file->message_type(0);
  static const int ContainerLimitation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLimitation, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLimitation, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLimitation, reason_),
  };
  ContainerLimitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerLimitation_descriptor_,
      ContainerLimitation::default_instance_,
      ContainerLimitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLimitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLimitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerLimitation));
  ContainerState_descriptor_ = file->message_type(1);
  static const int ContainerState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, executor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, container_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, directory_),
  };
  ContainerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerState_descriptor_,
      ContainerState::default_instance_,
      ContainerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerState));
  ContainerPrepareInfo_descriptor_ = file->message_type(2);
  static const int ContainerPrepareInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, commands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, environment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, rootfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, namespaces_),
  };
  ContainerPrepareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerPrepareInfo_descriptor_,
      ContainerPrepareInfo::default_instance_,
      ContainerPrepareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerPrepareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerPrepareInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mesos_2fslave_2fisolator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerLimitation_descriptor_, &ContainerLimitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerState_descriptor_, &ContainerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerPrepareInfo_descriptor_, &ContainerPrepareInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto() {
  delete ContainerLimitation::default_instance_;
  delete ContainerLimitation_reflection_;
  delete ContainerState::default_instance_;
  delete ContainerState_reflection_;
  delete ContainerPrepareInfo::default_instance_;
  delete ContainerPrepareInfo_reflection_;
}

void protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2fmesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mesos/slave/isolator.proto\022\013mesos.slav"
    "e\032\021mesos/mesos.proto\"t\n\023ContainerLimitat"
    "ion\022\"\n\tresources\030\001 \003(\0132\017.mesos.Resource\022"
    "\017\n\007message\030\002 \001(\t\022(\n\006reason\030\003 \001(\0162\030.mesos"
    ".TaskStatus.Reason\"\206\001\n\016ContainerState\022*\n"
    "\rexecutor_info\030\001 \002(\0132\023.mesos.ExecutorInf"
    "o\022(\n\014container_id\030\002 \002(\0132\022.mesos.Containe"
    "rID\022\013\n\003pid\030\003 \002(\004\022\021\n\tdirectory\030\004 \002(\t\"\214\001\n\024"
    "ContainerPrepareInfo\022$\n\010commands\030\001 \003(\0132\022"
    ".mesos.CommandInfo\022\'\n\013environment\030\002 \001(\0132"
    "\022.mesos.Environment\022\016\n\006rootfs\030\003 \001(\t\022\025\n\nn"
    "amespaces\030\004 \001(\r:\0010", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesos/slave/isolator.proto", &protobuf_RegisterTypes);
  ContainerLimitation::default_instance_ = new ContainerLimitation();
  ContainerState::default_instance_ = new ContainerState();
  ContainerPrepareInfo::default_instance_ = new ContainerPrepareInfo();
  ContainerLimitation::default_instance_->InitAsDefaultInstance();
  ContainerState::default_instance_->InitAsDefaultInstance();
  ContainerPrepareInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mesos_2fslave_2fisolator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mesos_2fslave_2fisolator_2eproto {
  StaticDescriptorInitializer_mesos_2fslave_2fisolator_2eproto() {
    protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  }
} static_descriptor_initializer_mesos_2fslave_2fisolator_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContainerLimitation::kResourcesFieldNumber;
const int ContainerLimitation::kMessageFieldNumber;
const int ContainerLimitation::kReasonFieldNumber;
#endif  // !_MSC_VER

ContainerLimitation::ContainerLimitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerLimitation::InitAsDefaultInstance() {
}

ContainerLimitation::ContainerLimitation(const ContainerLimitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerLimitation::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerLimitation::~ContainerLimitation() {
  SharedDtor();
}

void ContainerLimitation::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ContainerLimitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerLimitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerLimitation_descriptor_;
}

const ContainerLimitation& ContainerLimitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  return *default_instance_;
}

ContainerLimitation* ContainerLimitation::default_instance_ = NULL;

ContainerLimitation* ContainerLimitation::New() const {
  return new ContainerLimitation;
}

void ContainerLimitation::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    reason_ = 0;
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerLimitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Resource resources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resources;
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // optional .mesos.TaskStatus.Reason reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::TaskStatus_Reason_IsValid(value)) {
            set_reason(static_cast< ::mesos::TaskStatus_Reason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerLimitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resources(i), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // optional .mesos.TaskStatus.Reason reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerLimitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.Resource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resources(i), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional .mesos.TaskStatus.Reason reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerLimitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .mesos.TaskStatus.Reason reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  // repeated .mesos.Resource resources = 1;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerLimitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerLimitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerLimitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerLimitation::MergeFrom(const ContainerLimitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerLimitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerLimitation::CopyFrom(const ContainerLimitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerLimitation::IsInitialized() const {

  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerLimitation::Swap(ContainerLimitation* other) {
  if (other != this) {
    resources_.Swap(&other->resources_);
    std::swap(message_, other->message_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerLimitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerLimitation_descriptor_;
  metadata.reflection = ContainerLimitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerState::kExecutorInfoFieldNumber;
const int ContainerState::kContainerIdFieldNumber;
const int ContainerState::kPidFieldNumber;
const int ContainerState::kDirectoryFieldNumber;
#endif  // !_MSC_VER

ContainerState::ContainerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerState::InitAsDefaultInstance() {
  executor_info_ = const_cast< ::mesos::ExecutorInfo*>(&::mesos::ExecutorInfo::default_instance());
  container_id_ = const_cast< ::mesos::ContainerID*>(&::mesos::ContainerID::default_instance());
}

ContainerState::ContainerState(const ContainerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerState::SharedCtor() {
  _cached_size_ = 0;
  executor_info_ = NULL;
  container_id_ = NULL;
  pid_ = GOOGLE_ULONGLONG(0);
  directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerState::~ContainerState() {
  SharedDtor();
}

void ContainerState::SharedDtor() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (this != default_instance_) {
    delete executor_info_;
    delete container_id_;
  }
}

void ContainerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerState_descriptor_;
}

const ContainerState& ContainerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  return *default_instance_;
}

ContainerState* ContainerState::default_instance_ = NULL;

ContainerState* ContainerState::New() const {
  return new ContainerState;
}

void ContainerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_executor_info()) {
      if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
    }
    if (has_container_id()) {
      if (container_id_ != NULL) container_id_->::mesos::ContainerID::Clear();
    }
    pid_ = GOOGLE_ULONGLONG(0);
    if (has_directory()) {
      if (directory_ != &::google::protobuf::internal::kEmptyString) {
        directory_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ExecutorInfo executor_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_container_id;
        break;
      }

      // required .mesos.ContainerID container_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }

      // required uint64 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_directory;
        break;
      }

      // required string directory = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_info(), output);
  }

  // required .mesos.ContainerID container_id = 2;
  if (has_container_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container_id(), output);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pid(), output);
  }

  // required string directory = 4;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->directory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_info(), target);
  }

  // required .mesos.ContainerID container_id = 2;
  if (has_container_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container_id(), target);
  }

  // required uint64 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pid(), target);
  }

  // required string directory = 4;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->directory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ExecutorInfo executor_info = 1;
    if (has_executor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_info());
    }

    // required .mesos.ContainerID container_id = 2;
    if (has_container_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_id());
    }

    // required uint64 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

    // required string directory = 4;
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerState::MergeFrom(const ContainerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_info()) {
      mutable_executor_info()->::mesos::ExecutorInfo::MergeFrom(from.executor_info());
    }
    if (from.has_container_id()) {
      mutable_container_id()->::mesos::ContainerID::MergeFrom(from.container_id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_directory()) {
      set_directory(from.directory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerState::CopyFrom(const ContainerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_executor_info()) {
    if (!this->executor_info().IsInitialized()) return false;
  }
  if (has_container_id()) {
    if (!this->container_id().IsInitialized()) return false;
  }
  return true;
}

void ContainerState::Swap(ContainerState* other) {
  if (other != this) {
    std::swap(executor_info_, other->executor_info_);
    std::swap(container_id_, other->container_id_);
    std::swap(pid_, other->pid_);
    std::swap(directory_, other->directory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerState_descriptor_;
  metadata.reflection = ContainerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerPrepareInfo::kCommandsFieldNumber;
const int ContainerPrepareInfo::kEnvironmentFieldNumber;
const int ContainerPrepareInfo::kRootfsFieldNumber;
const int ContainerPrepareInfo::kNamespacesFieldNumber;
#endif  // !_MSC_VER

ContainerPrepareInfo::ContainerPrepareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerPrepareInfo::InitAsDefaultInstance() {
  environment_ = const_cast< ::mesos::Environment*>(&::mesos::Environment::default_instance());
}

ContainerPrepareInfo::ContainerPrepareInfo(const ContainerPrepareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerPrepareInfo::SharedCtor() {
  _cached_size_ = 0;
  environment_ = NULL;
  rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespaces_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerPrepareInfo::~ContainerPrepareInfo() {
  SharedDtor();
}

void ContainerPrepareInfo::SharedDtor() {
  if (rootfs_ != &::google::protobuf::internal::kEmptyString) {
    delete rootfs_;
  }
  if (this != default_instance_) {
    delete environment_;
  }
}

void ContainerPrepareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerPrepareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerPrepareInfo_descriptor_;
}

const ContainerPrepareInfo& ContainerPrepareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mesos_2fslave_2fisolator_2eproto();
  return *default_instance_;
}

ContainerPrepareInfo* ContainerPrepareInfo::default_instance_ = NULL;

ContainerPrepareInfo* ContainerPrepareInfo::New() const {
  return new ContainerPrepareInfo;
}

void ContainerPrepareInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_environment()) {
      if (environment_ != NULL) environment_->::mesos::Environment::Clear();
    }
    if (has_rootfs()) {
      if (rootfs_ != &::google::protobuf::internal::kEmptyString) {
        rootfs_->clear();
      }
    }
    namespaces_ = 0u;
  }
  commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerPrepareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.CommandInfo commands = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commands()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commands;
        if (input->ExpectTag(18)) goto parse_environment;
        break;
      }

      // optional .mesos.Environment environment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_environment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rootfs;
        break;
      }

      // optional string rootfs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rootfs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootfs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rootfs().data(), this->rootfs().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_namespaces;
        break;
      }

      // optional uint32 namespaces = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namespaces:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &namespaces_)));
          set_has_namespaces();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerPrepareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .mesos.CommandInfo commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commands(i), output);
  }

  // optional .mesos.Environment environment = 2;
  if (has_environment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->environment(), output);
  }

  // optional string rootfs = 3;
  if (has_rootfs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootfs().data(), this->rootfs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rootfs(), output);
  }

  // optional uint32 namespaces = 4 [default = 0];
  if (has_namespaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->namespaces(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerPrepareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .mesos.CommandInfo commands = 1;
  for (int i = 0; i < this->commands_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commands(i), target);
  }

  // optional .mesos.Environment environment = 2;
  if (has_environment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->environment(), target);
  }

  // optional string rootfs = 3;
  if (has_rootfs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootfs().data(), this->rootfs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rootfs(), target);
  }

  // optional uint32 namespaces = 4 [default = 0];
  if (has_namespaces()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->namespaces(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerPrepareInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .mesos.Environment environment = 2;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->environment());
    }

    // optional string rootfs = 3;
    if (has_rootfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rootfs());
    }

    // optional uint32 namespaces = 4 [default = 0];
    if (has_namespaces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->namespaces());
    }

  }
  // repeated .mesos.CommandInfo commands = 1;
  total_size += 1 * this->commands_size();
  for (int i = 0; i < this->commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commands(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerPrepareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerPrepareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerPrepareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerPrepareInfo::MergeFrom(const ContainerPrepareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  commands_.MergeFrom(from.commands_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_environment()) {
      mutable_environment()->::mesos::Environment::MergeFrom(from.environment());
    }
    if (from.has_rootfs()) {
      set_rootfs(from.rootfs());
    }
    if (from.has_namespaces()) {
      set_namespaces(from.namespaces());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerPrepareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerPrepareInfo::CopyFrom(const ContainerPrepareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerPrepareInfo::IsInitialized() const {

  for (int i = 0; i < commands_size(); i++) {
    if (!this->commands(i).IsInitialized()) return false;
  }
  if (has_environment()) {
    if (!this->environment().IsInitialized()) return false;
  }
  return true;
}

void ContainerPrepareInfo::Swap(ContainerPrepareInfo* other) {
  if (other != this) {
    commands_.Swap(&other->commands_);
    std::swap(environment_, other->environment_);
    std::swap(rootfs_, other->rootfs_);
    std::swap(namespaces_, other->namespaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerPrepareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerPrepareInfo_descriptor_;
  metadata.reflection = ContainerPrepareInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace slave
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
